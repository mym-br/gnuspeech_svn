// dspdriver.defs - David A. Jaffe (c) CCRMA, Stanford University 1994

// This file must be identical for all dsp drivers.
// Any changes must be propogated to all versions.
// This makes sure that a uniform interface to dsp drivers is presented
// to the user.

subsystem dspdriver 500;

waittime 5000;
sendtime 5000;  // Maximum time to wait for to-driver port backlog to drain

#include <mach/std_types.defs>
import "dspdriver_types.h";

// added by len
#include <mach/mach_types.defs>
type DSPPagePtr = ^array[2048] of int;
// end addition

type DSPWordPtr = array[*:512] of int;
type DSPShortPtr = array[*:1024] of short;
type DSPCharPtr = array[*:2048] of char;
// These array numbers must match dspdriver_types.h

routine dsp_become_owner(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		unit		: int);

routine dsp_reset_chip(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		on		: char;
		unit		: int);

routine dsp_release_ownership(	
		dspdriver_port	: port_t;
		owner_port	: port_t;
		unit		: int);

routine dsp_get_icr(
		dspdriver_port	: port_t;
		owner_port	: port_t;
	out	icr		: char;
		unit		: int);

routine dsp_get_cvr(
		dspdriver_port	: port_t;
		owner_port	: port_t;
	out	cvr		: char;
		unit		: int);

routine dsp_get_isr(
		dspdriver_port	: port_t;
		owner_port	: port_t;
	out	isr		: char;
		unit		: int);

routine dsp_get_ivr(
		dspdriver_port	: port_t;
		owner_port	: port_t;
	out	ivr		: char;
		unit		: int);

simpleroutine dsp_put_icr(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		icr		: char;
		unit		: int);

simpleroutine dsp_put_cvr(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		cvr		: char;
		unit		: int);

simpleroutine dsp_put_ivr(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		ivr		: char;
		unit		: int);

simpleroutine dsp_put_data_raw(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		high		: char;
		med		: char;
		low		: char;
		unit		: int);

routine dsp_get_data_raw(
		dspdriver_port	: port_t;
		owner_port	: port_t;
	out	high		: char;
	out	med		: char;
	out	low		: char;
		unit		: int);

simpleroutine dsp_put_data(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		high		: char;
		med		: char;
		low		: char;
		unit		: int);

routine dsp_get_data(
		dspdriver_port	: port_t;
		owner_port	: port_t;
	out	high		: char;
	out	med		: char;
	out	low		: char;
		unit		: int);

simpleroutine dsp_put_data_array(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		data		: DSPWordPtr;
		unit		: int);

simpleroutine dsp_put_data_byte_array(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		data		: DSPCharPtr;
		unit		: int);

simpleroutine dsp_put_data_short_array(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		data		: DSPShortPtr;
		unit		: int);

simpleroutine dsp_put_data_packed_array(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		data		: DSPCharPtr;
		unit		: int);

simpleroutine dsp_put_data_left_array(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		data		: DSPWordPtr;
		unit		: int);

routine dsp_get_data_array(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		count		: int;		
	out	data		: DSPWordPtr;
		unit		: int);

simpleroutine dsp_put_mk_timed_message(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		highWord	: int;
		lowWord		: int;
		opCode		: int;
		unit		: int);

simpleroutine dsp_exec_mk_host_message(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		unit		: int);

routine dsp_get_hi(
		dspdriver_port	: port_t;
		owner_port	: port_t;
	out	hi		: int;
		unit		: int);



// added by len

simpleroutine dsp_put_page(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		pageAddress	: DSPPagePtr;
		regionTag	: int;
		msgStarted	: boolean_t;
		msgCompleted	: boolean_t;
		reply_port	: port_t;
		unit		: int);

simpleroutine dsp_set_messaging(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		flag		: boolean_t;
		unit		: int);

simpleroutine dsp_queue_page(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		pageAddress	: DSPPagePtr;
		regionTag	: int;
		msgStarted	: boolean_t;
		msgCompleted	: boolean_t;
		reply_port	: port_t;
		unit		: int);

simpleroutine dsp_set_short_swapped_return(
		dspdriver_port	: port_t;
		owner_port	: port_t;
		regionTag	: int;
		wordCount	: int;
		reply_port	: port_t;
		unit		: int);

// end addition