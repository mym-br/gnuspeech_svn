
/* Generated by Interface Builder */

#import <objc/Object.h>
#import <appkit/View.h>
#import <mach.h>
#import "Generate.h"

/*  DEFINITIONS  */
#define PROPORTION_MIN		0.05    /*  EQUALS 5%  */
#define FIXED_DURATION_DEF      10      /*  IN MILLISECONDS  */
#define INTERVALS_MAX           6       /*  CHOSEN PRIMARILY DUE TO WINDOW SIZE  */
#define SUB_INTERVALS_MAX       6       /*  CHOSEN PRIMARILY DUE TO WINDOW SIZE  */

#define SPECIFIER_DEF           "phone"
#define CAT1_DEF	        ""
#define CAT2_DEF	        ""  

/*  FORM NUMBERS  */
#define CAT1                    0
#define CAT2		        1

#define PROP                    0
#define FIXED                   1

#define LENGTH                  0
#define RISE                    1

/*  SPECIFIER ORDER DEFAULT  */
#define ORDER_DEF		1

/*  FONT TYPE AND SIZE FOR BROWSERS  */
#define FONTNAME                "Courier"
#define FONTSIZE                12.0

/*  SYMBOL AND SPECIFIER MAXIMUM SIZES  */
#define SYMBOL_LENGTH_MAX       12     /*  CHOSEN BECAUSE OF BROWSER SIZE  */
#define SPECIFIER_LENGTH_MAX    65     /*  CHOSEN BECAUSE OF FORM SIZE  */

/*  MISC.  */
#define ON                      1
#define OFF                     0

/*  TRANSITION MODE DEFINITIONS  */
#define SLOPE_RATIO_MODE        0
#define FIXED_RISE_MODE         1

/*  SPLIT MODE DEFINITIONS  */
#define SPLIT_MODE_ARBITRARY    0
#define SPLIT_MODE_FORMULA      1


/*  SUB WINDOW OFFSETS  */
#define CAT_X_OFFSET            (0)
#define CAT_Y_OFFSET            (-77)
#define SPECIAL_X_OFFSET        (592)
#define SPECIAL_Y_OFFSET        (17)

/*  DEFINES FOR INTERVAL BOXES  */
#define I_BOX_X                 16.0
#define I_BOX_Y                 16.0
#define I_BOX_WIDTH             120.0
#define I_BOX_HEIGHT            184.0
#define SI_BOX_HEIGHT           160.0
#define I_BOX_X_OFFSET          (I_BOX_WIDTH + 8.0)

/*  FOR INTERVAL BOX SWITCH1  */
#define SWITCH1_X               16.0
#define SWITCH1_Y               120.0
#define SI_SWITCH1_Y            96.0
#define SWITCH1_WIDTH           89.0
#define SWITCH1_HEIGHT          33.0

/*  FOR INTERVAL BOX SWITCH2  */
#define SWITCH2_X               16.0
#define SWITCH2_Y               96.0
#define SWITCH2_WIDTH           88.0
#define SWITCH2_HEIGHT          15.0

/*  FOR INTERVAL BOX FORM  */
#define FORM_X                  0.0
#define FORM_Y                  42.0
#define FORM_WIDTH              100.0
#define FORM_HEIGHT             45.0

/*  FOR INTERVAL BOX TEXT  */
#define TEXT_X                  99.0
#define TEXT_Y                  39.0
#define TEXT_WIDTH              21.0
#define TEXT_HEIGHT             45.0

/*  FOR INTERVAL BOX RESET BUTTON  */
#define RESET_BUTTON_X         6.0
#define RESET_BUTTON_Y         8.0
#define RESET_BUTTON_WIDTH     52.0
#define RESET_BUTTON_HEIGHT    24.0

/*  FOR INTERVAL BOX SET BUTTON  */
#define SET_BUTTON_X            62.0
#define SET_BUTTON_Y            8.0
#define SET_BUTTON_WIDTH        52.0
#define SET_BUTTON_HEIGHT       24.0

/*  SPLIT INTERVAL PANEL OFFSETS  */
#define SPLIT_INTERVAL_X_OFFSET 17
#define SPLIT_INTERVAL_Y_OFFSET 129

/*  SPLIT SUB INTERVAL PANEL OFFSETS  */
#define SPLIT_S_INTERVAL_X_OFFSET 145
#define SPLIT_S_INTERVAL_Y_OFFSET 105

/*  DELETE INTERVAL PANEL OFFSETS  */
#define DELETE_INTERVAL_X_OFFSET 145
#define DELETE_INTERVAL_Y_OFFSET 129

/*  DELETE SUB INTERVAL PANEL OFFSETS  */
#define DELETE_S_INTERVAL_X_OFFSET 273
#define DELETE_S_INTERVAL_Y_OFFSET 105

/*  ZOOM IN PANEL OFFSETS  */
#define ZOOM_X_OFFSET            17
#define ZOOM_Y_OFFSET            105

/*  SPECIAL EVENT PROFILE BUTTON STATES  */
#define ZOOM_IN                  1
#define ZOOM_OUT                 0
#define NO_DISPLAY               -1

/*  DURATION RULE DEFINES  */
#define DUR_RULE_P1              0
#define DUR_RULE_P2              1
#define DUR_RULE_AVG             2
#define DUR_RULE_NORMAL          3
#define DUR_RULE_T_RIGHT         4
#define DUR_RULE_T_LEFT          5
#define DUR_RULE_T_MIDDLE        6
#define DUR_RULE_FIXED           7
#define DUR_FIXED_DEF            50



/*  DATA STRUCTURES  */
/*  STRUCT TO STORE START TIMES  */
struct _start_time_struct {
    int value;
    int special_event;
    struct _start_time_struct *next;
    struct _start_time_struct *previous;
};
typedef struct _start_time_struct start_timeStruct;
typedef start_timeStruct *start_timePtr;

/*  STRUCT FOR FILTERED INTERVALS  */
struct _f_interval {
    int run;
    double regression_factor;
    double abs_value;
    double rise;
    int special_event;
    struct _f_interval *next;
    struct _f_interval *previous;
};
typedef struct _f_interval f_interval;
typedef f_interval *f_intervalPtr;

/*  STRUCT FOR EACH FILTERED PARAMETER  */
struct _f_parameter {
    char symbol[SYMBOL_LENGTH_MAX+1];
    int number_of_f_intervals;
    f_intervalPtr f_intervalHead;
    struct _f_parameter *next;
};
typedef struct _f_parameter f_parameter;
typedef f_parameter *f_parameterPtr;

/*  STRUCT FOR EACH SPECIAL EVENT SUB-INTERVAL  */
struct _sub_interval {
  short int proportional;
  union _dur {
    int ival;
    float fval;
  } duration;
  float rise;
  struct _sub_interval *next;
  struct _sub_interval *previous;
};

typedef struct _sub_interval sub_interval;
typedef sub_interval *sub_intervalPtr;


/*  STRUCT FOR EACH SPECIAL EVENT INTERVAL  */
struct _se_interval {
  sub_intervalPtr sub_intervalHead;
  int number_of_sub_intervals;
  struct _se_interval *next;
  struct _se_interval *previous;
};

typedef struct _se_interval se_interval;
typedef se_interval *se_intervalPtr;


/*  STRUCT FOR EACH SPECIAL EVENT PROFILE  */
struct _specialEventStruct {
  char symbol[SYMBOL_LENGTH_MAX+1];
  se_intervalPtr se_intervalHead;
  struct _specialEventStruct *next;
};

typedef struct _specialEventStruct specialEventStruct;
typedef specialEventStruct *specialEventStructPtr;


/*  STRUCT FOR EACH TRANSITION INTERVAL  */
struct _t_interval {
  short int proportional;
  short int regression;
  union _duration {
    int   ival;
    float fval;
  } duration;
  float rise;
  float slope_ratio;
  struct _t_interval *next;
  struct _t_interval *previous;
};

typedef struct _t_interval t_interval;
typedef t_interval *t_intervalPtr;


/*  STRUCT FOR EACH TRANSITION SPECIFIER  */
struct _specifierStruct {
  char *category1;
  char *category2;
  t_intervalPtr t_intervalHead;
  int number_of_t_intervals;
  short int t_interval_mode;
  short int split_mode;
  specialEventStructPtr specialEventHead;
  int number_of_special_events;
  struct {
      int rule;
      int fixed_length;
  } duration;
  struct _specifierStruct *next;
};

typedef struct _specifierStruct specifierStruct;
typedef specifierStruct *specifierStructPtr;



@interface Rule:Object
{
    id	template;
    id	categories;
    id	phone_description;

    id	ruleWindow;
    id	addTransitionPanel;
    id	modTransitionPanel;
    id  tProfileWindow;
    id  seProfileWindow;
    id  transitionView;
    id  specialEventView;
    id  addSpecialEventPanel;

    id	currentSpecifier;

    id	specifierList;
    id	specialEventList;
    id  addSpecialEventList;

    id	specifierTotal;
    id	specialEventTotal;

    id	addTransitionForm;
    id	addTransitionOrder;

    id	modTransitionForm;
    id	modTransitionOrder;

    id  splitIntervalPanel;
    id  splitIntervalForm;

    id  deleteIntervalPanel;
    id  deleteIntervalForm;

    id  addSpecialEventForm;

    id  modeSwitch;

    id  splitSubIntervalPanel;
    id  splitSubIntervalForm;

    id  deleteSubIntervalPanel;
    id  deleteSubIntervalForm;

    id  durSwitch;
    id  durLength;

    id  splitModeButton;
    id  splitIntervalButton;
    id  deleteIntervalButton;
    id  defaultButton;

    NXRect r;

    int specifierCurrentRow;
    specifierStructPtr specifierHead;
    specifierStructPtr currentSpecifierPtr;
    specifierStructPtr oldSpecifierPtr;
    int number_of_specifiers;

    int specialEventCurrentRow;
    specialEventStructPtr currentSEPtr;
    specialEventStructPtr oldSEPtr;
    int specialEventStatus;
    int specialEventSubInterval;
    se_intervalPtr currentSEIntervalPtr;
    short int currentSEIntervalProp;

    int addSpecialEventCurrentRow;

    id  fontObj;
    char separator1[4];
    char separator2[6];

    id  intervalBox[INTERVALS_MAX];
    id  IB_switch1[INTERVALS_MAX];
    id  IB_switch2[INTERVALS_MAX];
    id  IB_form[INTERVALS_MAX];
    id  IB_text[INTERVALS_MAX];
    id  IB_reset_button[INTERVALS_MAX];
    id  IB_set_button[INTERVALS_MAX];

    id  subIntervalBox[SUB_INTERVALS_MAX];
    id  SIB_switch1[SUB_INTERVALS_MAX];
    id  SIB_form[SUB_INTERVALS_MAX];
    id  SIB_text[SUB_INTERVALS_MAX];
    id  SIB_reset_button[SUB_INTERVALS_MAX];
    id  SIB_set_button[SUB_INTERVALS_MAX];

    id  sepDeleteButton;
    id  sepInspectButton;

    id  seZoomButton;
    id  seSplitButton;
    id  seDeleteButton;
    id  seDefaultButton;
    id  seCopyButton;
    id  seModeSwitch;
    id  seAddButton;

    id  zoomInPanel;
    id  zoomInForm;

    id  gRulePhone1Field;
    id  gRulePhone2Field;
    id  gRuleResultField;
}

- appDidInit:sender;

- setTitleBar:(char *)currentPath;

- specifierBrowserHit:sender;
- specifierAdd:sender;
- specifierModify:sender;

- transitionInspect:sender;

- specialEventAdd:sender;
- specialEventDelete:sender;
- specialEventInspect:sender;

- specialEventAddCancel:sender;
- specialEventAddOK:sender;

- addTransitionCancel:sender;
- addTransitionOK:sender;

- modTransitionCancel:sender;
- modTransitionDelete:sender;
- modTransitionOK:sender;

- splitInterval:sender;
- deleteInterval:sender;

- splitIntervalCancel:sender;
- splitIntervalOK:sender;

- deleteIntervalCancel:sender;
- deleteIntervalOK:sender;

- tProfileDefault:sender;
- tProfileCopy:sender;

- defaultTransition:(specifierStructPtr)specifierPtr;
- displayIntervalBoxes;
- addIntervalBox:(t_intervalPtr)intervalPtr:(int)interval_number:(short int)mode;

- intervalSet:sender;
- intervalReset:sender;
- switch1Hit:sender;
- switch2Hit:sender;

- (t_intervalPtr)intervalPointer:(specifierStructPtr)specifierPtr:(int)interval_number;

- (BOOL)validCategory:(char *)symbol;

- fixedRiseMode:sender;
- slopeRatioMode:sender;

- arbitrarySplit:sender;
- formulaSplit:sender;

- convertRatioToRise:(specifierStructPtr)specifier;
- convertRiseToRatio:(specifierStructPtr)specifier;

- displayTransition;
- displaySpecialEvent:(int)status:(int)intervalNumber;

- seZoom:sender;
- seProfileDefault:sender;
- propagateDefaultToSEProfiles;
- setSEPToDefault:(specialEventStructPtr)current_SEPtr;
- defaultSpecialEventProfile:(specialEventStructPtr)current_SEPtr;

- zoomInOK:sender;
- zoomInCancel:sender;

- displaySubIntervalBoxes;
- addSubIntervalBox:(sub_intervalPtr)intervalPtr:(int)interval_number:(int)anchor;
- subIntervalReset:sender;
- subIntervalSet:sender;
- subSwitch1Hit:sender;

- splitSubInterval:sender;
- deleteSubInterval:sender;

- splitSubIntervalCancel:sender;
- splitSubIntervalOK:sender;
- deleteSubIntervalCancel:sender;
- deleteSubIntervalOK:sender;

- durSwitchHit:sender;
- durLengthEntered:sender;

- propagateModeChange:(int)t_interval;
- propagateDeletion:(int)t_interval;
- propagateSplit:(int)t_interval;
- propagateLengthChange:(int)t_interval:(int)proportional:(int)old_value:(int)new_value;

- findRule:sender;

- (specifierStructPtr)governingRule:(char *)phone1:(char *)phone2;
- (int)matchPhone:(char *)phone ToCategory:(char *)category;

- writeDiphone:(char *)phone1:(char *)phone2:(specifierStructPtr)g_rule
              :(filterParamPtr)filter_paramHead:(FILE *)fp:(vm_address_t)page;

- saveToFile:(FILE *)fp1;
- readFromFile:(FILE *)fp1;

@end




