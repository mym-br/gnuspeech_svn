/*
 *    Filename:	KeyboardController.m 
 *    Created :	Sat Jan 18 19:32:07 1992 
 *    Author  :	Vince DeMarco
 *		<vince@whatnxt.cuc.ab.ca>
 *
 *
 * LastEditDate "Sat Jun  6 13:52:31 1992"
 *
 *    Font is 9pt when Helvetica is Used
 *
 *
 * $Log: not supported by cvs2svn $
# Revision 2.1  1992/06/10  14:01:13  vince
# Method to toggle the Keyboard has been added. (Ie if the
# shift keys are down, toggleShift: will switch the shift keys
# so they are up, and visa versa)
#
# Revision 2.0  1992/04/08  03:43:23  vince
# Initial-Release
#
 *
 */


/* Generated by Interface Builder */

#import <stdio.h>

#import "KeyboardController.h"
#import "KeyboardText.h"
#import <appkit/Application.h> // or #import "PrEditorApp.h"
#import <appkit/Button.h>
#import <appkit/ButtonCell.h>
#import <appkit/Matrix.h>
#import <objc/List.h>
#import <appkit/NXCType.h>
#import <libc.h>

@implementation KeyboardController

- init
{
    self = [super init];
    enabled = YES;
    sendAction = YES;
    return self;
}

inline static int search(char find, const char *list, const int length)
{
    int i = 0;
    
    while (i < length){
	if (find == list[i])
	    return i;
	else
	    i++;
    }
    return -1;
}

#define UPKEY       0xAD
#define DOWNKEY     0xAF
#define LEFTKEY     0xAC
#define RIGHTKEY    0xAE
#define DOUBLEQUOTE 0x22
#define QUOTE       0x27
#define PERIOD      0x2e

- pressKey: (const char)key
{
    static const char *QtoP = "QWERTYUIOP";
    static const char *AtoL = "ASDFGHJKL";
    static const char *ZtoM = "ZXCVBNM";
    char   keyPressed = NXToUpper(key);
    int    value;

    if ( ((key & 0xff) > 0x7f) || (key == ' ') ){
	return self;
    }

    sendAction = NO;
    if (key == PERIOD){
	[self shiftUp:self];
	[[zToM cellAt:0:8] performClick:self];
	sendAction = YES;	
	return self;	
    }

    if (key == '\n'){
	[returnKey performClick:self];
	sendAction = YES;	
	return self;
    }

    if (key == 0x7f){
	[deleteKey performClick:self];
	sendAction = YES;	
	return self;
    }

    if ((key == QUOTE) || (key == DOUBLEQUOTE)){
	[[aToL cellAt:0:10] performClick:self];	
	sendAction = YES;
	return self;
    }

    if (!NXIsAlpha(key)){
	sendAction = YES;
	return self;
    }

    if (NXIsLower(key)) 
	[self shiftUp:self];
    else
	[self shiftDown:self];
    
    if ( (value = search(keyPressed,QtoP,10)) >= 0){
	[[qToP cellAt:0:value] performClick:self];
    }else{
	if ( (value = search(keyPressed,AtoL,9)) >= 0){
	    [[aToL cellAt:0:value] performClick:self];
	}else{
	    if ( (value = search(keyPressed,ZtoM,7)) >= 0){	    
		[[zToM cellAt:0:value] performClick:self];
	    } 
	}
    }
    sendAction = YES;
    return self;
}

- shiftDown:sender
{
    if (!shiftDown)
	[rightShiftKey performClick:sender];
    return self;
}

- shiftUp:sender
{
    if (shiftDown)
	[rightShiftKey performClick:sender];
    return self;
}

- leftShift:sender
{
    int senderState = [sender state];
    [rightShiftKey setState:senderState];
    [self shiftKeys:sender];
    shiftDown = (senderState ? YES : NO);

    return self;
}

- rightShift:sender
{
    int senderState = [sender state];
    [leftShiftKey setState:senderState];
    [self shiftKeys:sender];
    shiftDown = (senderState ? YES : NO);

    return self;
}

- toggleShift:sender
{
    [rightShiftKey performClick:sender];
    return self;
}

- shiftKeys:sender
{
    id       list;
    id       currentCell;
    unsigned int i;
    unsigned int number;
    char     title[2];
    char     altTitle[2];

    [window disableFlushWindow];
    /* Perform a shift on the Number Keys */
    i = 0;
    list = [numberKeys cellList];
    number = [list count];
    while(i < number){
	currentCell = [list objectAt:i++];
	altTitle[0] = *[currentCell altTitle];
	title[0]    = *[currentCell title];
	altTitle[1] = title[1] = '\000';
        [currentCell setAltTitle:title];
	[currentCell setTitle:altTitle];
    }

    /* Perform a shift on the Keys from Q to P */
    i = 0;
    list = [qToP cellList];
    number = [list count];
    while(i < number){
	currentCell = [list objectAt:i++];
	altTitle[0] = *[currentCell altTitle];
	title[0]    = *[currentCell title];
	altTitle[1] = title[1] = '\000';
        [currentCell setAltTitle:title];
	[currentCell setTitle:altTitle];
    }

    /* Perform a shift on the Keys from A to L */
    i = 0;
    list = [aToL cellList];
    number = [list count];
    while(i < number){
	currentCell = [list objectAt:i++];
	altTitle[0] = *[currentCell altTitle];
	title[0]    = *[currentCell title];
	altTitle[1] = title[1] = '\000';
        [currentCell setAltTitle:title];
	[currentCell setTitle:altTitle];
    }

    /* Perform a shift on the Keys from Z to M */
    i = 0;
    list = [zToM cellList];
    number = [list count];
    while(i < number){
	currentCell = [list objectAt:i++];
	altTitle[0] = *[currentCell altTitle];
	title[0]    = *[currentCell title];
	altTitle[1] = title[1] = '\000';
        [currentCell setAltTitle:title];
	[currentCell setTitle:altTitle];
    }
    if (shiftDown){
	[[list objectAt:8] setEnabled:YES]; /* the >.  key */
    }else{
	[[list objectAt:8] setEnabled:NO]; /* the >.  key */
    }
    [window reenableFlushWindow];
    [window flushWindow];
    return self;
}

- setFont: fontObj
{
    [window disableFlushWindow];
    [numberKeys setFont:fontObj];
    [qToP setFont:fontObj];
    [aToL setFont:fontObj];
    [zToM setFont:fontObj];
    [numberKeys display];
    [window reenableFlushWindow];
    [window flushWindow];
    return self;
}

- disableKeyboard
{
    if (enabled){
	[window disableFlushWindow];
	[deleteKey setEnabled:NO];
	[returnKey setEnabled:NO];
	[qToP setEnabled:NO];
	[aToL setEnabled:NO];
	[zToM setEnabled:NO];
	[window reenableFlushWindow];
	[window flushWindow];
	enabled = NO;
    }
    return self;
}

- enableKeyboard
{
    id list;
    NXEvent *theEvent;

    if (!enabled){
	[window disableFlushWindow];
	theEvent = [NXApp currentEvent];
	if (theEvent->flags & NX_ALPHASHIFTMASK){
	    [self shiftDown:self];
	}else{
	    [self shiftUp:self];
	}

	[deleteKey setEnabled:YES];
	[returnKey setEnabled:YES];
	[qToP setEnabled:YES];
	[aToL setEnabled:YES];
	[zToM setEnabled:YES];

	list = [qToP cellList];
	[[list objectAt:10] setEnabled:NO];
	[[list objectAt:11] setEnabled:NO];
	[[list objectAt:12] setEnabled:NO];

	list = [aToL cellList];
	[[list objectAt:9] setEnabled:NO];

	list = [zToM cellList];
	[[list objectAt:7] setEnabled:NO];   /* the < , key */

	if (shiftDown){
	    [[list objectAt:8] setEnabled:NO]; /* the >.  key */
	}else{
	    [[list objectAt:8] setEnabled:YES]; /* the >.  key */
	}
	[[list objectAt:9] setEnabled:NO];   /* the / ? key */
	
	[window reenableFlushWindow];
	[window flushWindow];
	enabled = YES;
    }
    return self;
}

- recieveAction:sender
{
    const char *key;

    if (sendAction){
	if ([sender tag] == 27){ /* Delete key */
	    [target delete];
	    return self;
	}
	if ([sender tag] == 42) { /* Return key */
	    return self;
	}
	/* somthing else on the keyboard */

	if (key = [[sender selectedCell] title])
	    [target insertKey:key[0]];
    }else{
	usleep(10000);
    }
    return self;
}
@end
