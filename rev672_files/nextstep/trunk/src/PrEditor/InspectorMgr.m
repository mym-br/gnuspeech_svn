/*
 *    Filename:	InspectorMgr.m 
 *    Created :	Wed Jan  8 23:34:34 1992 
 *    Author  :	Vince DeMarco
 *		<vince@whatnxt.cuc.ab.ca>
 *
 * LastEditDate "Tue May 26 23:04:36 1992"
 *
 * $Log: not supported by cvs2svn $
# Revision 2.1  1992/06/10  13:59:25  vince
# Code to enable and disable the InspectorPanel has been
# added. When the panel is disabled, it will simply contain
# the words No Inspector and the popup menu will be disabled.
#
# Revision 2.0  1992/04/08  03:43:23  vince
# Initial-Release
#
 *
 */


/* Generated by Interface Builder */

#import "InspectorMgr.h"
#import "PrEditorApp.h"

#import <stdlib.h>
#import <stdio.h>
#import <appkit/Panel.h>
#import <appkit/Control.h>
#import <appkit/Matrix.h>
#import <appkit/ActionCell.h>
#import <appkit/Box.h>
#import <appkit/ScrollView.h>
#import <mach/mach.h>
#import <TextToSpeech/TTS_types.h>
#import <objc/List.h>
#import <defaults/defaults.h>

#import "NiftyMatrix.h"
#import "NiftyMatrixCat.h"
#import "NiftyMatrixCell.h"

/* Defines for the font names, i decided to add these because if a name changes
 * It must be changed in several places within this file
 */
#define TRILLIUM_FONT     "Trillium-Phonetic"
#define LEXICAL_FONT      "Lexical"
#define PHONETICA_FONT    "Phonetica"

#define INSPECTORPOSITION "InspectorPosition"

@implementation InspectorMgr

+ initialize
{
    const NXDefaultsVector PrEditorDefaults = {{INSPECTORPOSITION,"38 77"},
                                                {"DefaultFont",TRILLIUM_FONT},{NULL,NULL}};

    if (self == [InspectorMgr class]){
	NXRegisterDefaults("PrEditor", PrEditorDefaults);
    }
    return self;
}

- init
{
    self = [super init];
    inspectorZone = [NXApp newZone];

    order[0] = CURRENT_DICTIONARY;     /* Set up the default search order */
    order[1] = TTS_USER_DICTIONARY;
    order[2] = TTS_MAIN_DICTIONARY;
    order[3] = TTS_LETTER_TO_SOUND;

    return self;
}

- free
{
    [inspectorPanel setDelegate:nil];
    [directoryMatrix free];
    [NXApp reuseZone:inspectorZone];
    return [super free];
}

- inspector:sender
{
    const char *panelPositionDefault;
    const char *DefaultFont;
    NXRect windowFrame;

    if (!inspectorPanel){
	[NXApp loadNibSection:"Inspector.nib" owner:self withNames:NO fromZone:inspectorZone];
	[inspectorPanel setFloatingPanel:YES];
	[inspectorPanel setBecomeKeyOnlyIfNeeded:YES];	
	[inspectorPanel useOptimizedDrawing:YES];
	[self createScrollView];

	if (panelPositionDefault = NXGetDefaultValue("PrEditor",INSPECTORPOSITION)){
	    sscanf(panelPositionDefault,"%f %f",&windowFrame.origin.x,&windowFrame.origin.y);
	    if (windowFrame.origin.x != 0.0)
		[inspectorPanel moveTo:windowFrame.origin.x :windowFrame.origin.y];
	}

	DefaultFont = NXGetDefaultValue("PrEditor","DefaultFont");

	if (DefaultFont){
	    switch (DefaultFont[0]){
	    case 'C': 
	        [fontMatrix selectCellWithTag:1];
		break;
	    case 'L': 
		[fontMatrix selectCellWithTag:2];
		break;
	    case 'P': 
		[fontMatrix selectCellWithTag:3];
		break;
	    }
	}else{
	        [fontMatrix selectCellWithTag:1];
	}
    }

    if ([NXApp mainDocument]){         /* If there is an editable document visible then
					* Enable the Inspector else don't bother 
					*/
	[self enableInspector:sender];
    }else{
	[self disableInspector:sender];
    }

    [inspectorPanel orderFront:sender];
    return self;
}


- createScrollView
{
    NXRect      scrollRect, matrixRect;
    NXSize      interCellSpacing = {0.0, 0.0};
    NXSize      cellSize;

    /* set the scrollView's attributes */
    [scrollView setBorderType:NX_BEZEL];
    [scrollView setVertScrollerRequired:NO];
    [scrollView setHorizScrollerRequired:NO];
                
    /* get the scrollView's dimensions */
    [scrollView getFrame:&scrollRect];

    /* determine the matrix bounds */
    [ScrollView getContentSize:&(matrixRect.size)
                forFrameSize:&(scrollRect.size)
                horizScroller:NO
                vertScroller:NO
                borderType:NX_BEZEL];
    
    /* prepare a matrix to go inside our scrollView */
    directoryMatrix = [[NiftyMatrix allocFromZone:inspectorZone] initFrame:&matrixRect 
                                  mode:NX_RADIOMODE
                                  cellClass:[NiftyMatrixCell class]
                                  numRows:0
                                  numCols:1];


    /* we don't want any space between the matrix's cells  */
    [directoryMatrix setIntercell:&interCellSpacing];

    /* resize the matrix's cells and size the matrix to contain them */
    [directoryMatrix getCellSize:&cellSize];
    cellSize.width = NX_WIDTH(&matrixRect) + 0.1;
    [directoryMatrix setCellSize:&cellSize];
    [directoryMatrix sizeToCells];
    [directoryMatrix setAutosizeCells:YES];
    
    /*
     * when the user clicks in the matrix and then drags the mouse out of
     * scrollView's contentView, we want the matrix to scroll
     */
    [directoryMatrix setAutoscroll:YES];
    
    /* stick the matrix in our scrollView */
    [scrollView setDocView:directoryMatrix];
    
    /* set things up so that the matrix will resize properly */
    [[directoryMatrix superview] setAutoresizeSubviews:YES];
    [directoryMatrix setAutosizing:NX_WIDTHSIZABLE];
    
    /* set the matrix's single-click actions */
    [directoryMatrix setTarget:self];
    [directoryMatrix setAction:@selector(dictionaryOrderChanged:)];
//    [directoryMatrix allowEmptySel:YES];

    /* Localize this when you get the Localization Routines */
    [directoryMatrix  insertCellWithStringValue: "Current Dictionary"];
    [directoryMatrix  insertCellWithStringValue: "User Dictionary"];
    [directoryMatrix  insertCellWithStringValue: "Main Dictionary"];
    [directoryMatrix  insertCellWithStringValue: "Letter To Sound Rules"];
    [[directoryMatrix findCellNamed:             "Letter To Sound Rules"] lock];
    [directoryMatrix display];

    return self;
}

/* User has changed the dictionary Order */
- dictionaryOrderChanged:sender
{
    id  list;
    id  cellAt;
    int count;
    int i = 0;

    if (directoryMatrix){
	list = [directoryMatrix cellList];
	count = [list count];
	while (i < count){
	    cellAt = [list objectAt:i];
	    switch ([cellAt stringValue][0]){
	        case 'C'    : order[i++] = ([cellAt toggleValue] ? CURRENT_DICTIONARY  : TTS_EMPTY);
		    break;
		case 'U'    : order[i++] = ([cellAt toggleValue] ? TTS_USER_DICTIONARY : TTS_EMPTY);
		    break;
		case 'M'    : order[i++] = ([cellAt toggleValue] ? TTS_MAIN_DICTIONARY : TTS_EMPTY);
		    break;
		case 'L'    : order[i++] = TTS_LETTER_TO_SOUND;
		    break;
		default     : order[i++] = TTS_EMPTY;
		    break;
		}
	}
    }

    /* Send the message dictionaryOrderChanged down the first responder chain */
    [NXApp sendAction:@selector(dictionaryOrderChanged:) to:nil from:self];
    /* Above returns NO if nothing responded to the message */
    return self;
}

- revertToDefaultSearchOrder:sender
{
    [directoryMatrix  unlockAllCells];    
    [directoryMatrix  removeAllCells];
    [directoryMatrix  insertCellWithStringValue: "PrEditor by"]; /* Junk values that seem to fix a
								  * strange bug
								  * This will stay for now
								  * until i can figure out why
								  */
    [directoryMatrix  insertCellWithStringValue: "Vince DeMarco"];

    [directoryMatrix  removeAllCells];
    [directoryMatrix  insertCellWithStringValue: "Current Dictionary"];
    [directoryMatrix  insertCellWithStringValue: "User Dictionary"];
    [directoryMatrix  insertCellWithStringValue: "Main Dictionary"];
    [directoryMatrix  insertCellWithStringValue: "Letter To Sound Rules"];
    [[directoryMatrix findCellNamed:             "Letter To Sound Rules"] lock];
    [directoryMatrix  ungrayAllCells];

    [self dictionaryOrderChanged:sender];
    [directoryMatrix  display];

    return self;
}

- (const short int *) dictionaryOrder
{
    return (const short int *)order;
}    


- enableInspector:sender
{
    const char *title;

    if (inspectorPanel && [popUp isEnabled] == NO){  /* Check if the inspectorPanel
						      * Has already been loaded into
						      * memory if it hasn't don't bother
						      * trying to enable the Panel
						      * and if the panel is already disabled
						      * ie the popUp is disabled
						      * don't bother trying to do it again
						      */
	[currentView removeFromSuperview];

	title = [popUp title];

	switch(title[0]){
	case 'P':
	    [[inspectorPanel contentView] addSubview:alphabetView];
	    currentView = alphabetView;
	    break;
	case 'D':
	    [[inspectorPanel contentView] addSubview:dictionaryView];
	    currentView = dictionaryView;
	    break;
	}
	[[inspectorPanel contentView] display];
	[popUp setEnabled: YES];
    }

    return self;
}

- disableInspector:sender
{
    if (inspectorPanel && ([popUp isEnabled] == YES) && ([NXApp mainDocument] == nil)){
	                                                  /* Check if the inspectorPanel
							   * Has already been loaded into
							   * memory if it hasn't don't bother
							   * trying to enable the Panel
							   * and if the panel is already disabled
							   * ie the popUp is disabled
							   * don't bother trying to do it again
							   */
	[currentView removeFromSuperview];
	[[inspectorPanel contentView] addSubview:emptyView];
	[[inspectorPanel contentView] display];
	currentView = emptyView;
	[popUp setEnabled: NO];
    }
    return self;
}

- switchViews:sender
{
    [inspectorPanel disableFlushWindow];
    [currentView removeFromSuperview];
    switch ([[sender selectedCell] tag]){
     case 1:
         [[inspectorPanel contentView] addSubview:alphabetView];
         currentView = alphabetView;
         break;
     case 2: 
         [[inspectorPanel contentView] addSubview:dictionaryView];
         currentView = dictionaryView;
         break;
     }
    [[inspectorPanel contentView] display];

    [inspectorPanel reenableFlushWindow];
    [inspectorPanel flushWindow];

    return self;
}

/* Return the name of the currently selected font */
- (const char *)fontName
{
    if (!inspectorPanel){                    /* If the inspectorPanel hasn't been created
					      * Simply return the default fontName
					      */
	return NXGetDefaultValue("PrEditor","DefaultFont");
    }
    switch ([[fontMatrix selectedCell] tag]){
	case 1  : 
	    NXWriteDefault("PrEditor","DefaultFont",TRILLIUM_FONT);
	    return TRILLIUM_FONT;
	case 2  : 
	    NXWriteDefault("PrEditor","DefaultFont",LEXICAL_FONT);
	    return LEXICAL_FONT;
	case 3  : 
	    NXWriteDefault("PrEditor","DefaultFont",PHONETICA_FONT);
	    return PHONETICA_FONT;
	default : 
	    return NXGetDefaultValue("PrEditor","DefaultFont");
	}
}

/* Window Delegation Methods */
- windowDidMove:sender
{
    NXRect windowFrame;
    char theDefault[50];
    
    [sender getFrame: &windowFrame];
    sprintf(theDefault,"%.0f %.0f", windowFrame.origin.x,windowFrame.origin.y);
    NXWriteDefault("PrEditor",INSPECTORPOSITION,theDefault);
    return self;
}

@end
