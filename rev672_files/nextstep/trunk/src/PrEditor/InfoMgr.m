/*
 *    Filename:	InfoMgr.m 
 *    Created :	Sun Oct 20 20:38:59 1991 
 *    Author  :	Vince DeMarco
 *		<vince@whatnxt.cuc.ab.ca>
 *
 * LastEditDate "Fri May 15 16:09:32 1992"
 *
 * $Log: not supported by cvs2svn $
# Revision 2.1  1992/06/10  13:57:44  vince
# Make suggestions option has been added. This will start
# up the Mail.app to allow the user to send in bug reports
#
# Revision 2.0  1992/04/08  03:43:23  vince
# Initial-Release
#
 *
 */


/* Generated by Interface Builder */

#import "InfoMgr.h"
#import <appkit/Panel.h>
#import <appkit/TextField.h>
#import <appkit/Speaker.h>    // for makeSuggestion: method
#import <appkit/Listener.h>   // for makeSuggestion: method
#import <stdlib.h>            // for makeSuggestion: method
#import <strings.h>           // for makeSuggestion: method

#import <TextToSpeech/TextToSpeech.h>

#import "PrEditorApp.h"


@implementation InfoMgr

- info:sender
{
    id server;

    if (!infoPanel){
	[NXApp loadNibSection:"Info.nib" owner:self withNames: NO fromZone:[self zone]];
	server = [[TextToSpeech allocFromZone:[self zone]] init];

	[preditorVersion setStringValue: PREDITORVERSION];
	[compileDate setStringValue: __DATE__];
	[compileTime setStringValue: __TIME__];	

	if (server){
	    [serverVersion   setStringValue: [server serverVersion]];
	    [server free];
	}
    }
    [infoPanel makeKeyAndOrderFront:sender];
    return self;
}


#define CALL_MAIL(a,b) [s performRemoteMethod:a with:b length:strlen(b)+1]

- makeSuggestion:sender
{
    id     s                = [NXApp appSpeaker];
    port_t mailPort         = NXPortFromName("Mail", NULL); // make sure app is launched

    const char *reciever    = SUGGESTION_RECIEVER;
//    const char *carbon_copy = CARBON_COPY_RECIEVER;
    const char *subj        = "PrEditor Comments";
    const char *body  	    = 
	"Comments and suggestions for\nPrEditor "PREDITORVERSION" Last Changed "__DATE__" @ "__TIME__"\n\n";
    
    mailPort = NXPortFromName("MailSendDemo",NULL);
    if (mailPort == PORT_NULL) {
	NXRunAlertPanel("Make Suggestion","Check if Mail is running.", "OK", NULL, NULL);
	return self;
    }
    [s setSendPort:mailPort];

    CALL_MAIL("setTo:",reciever);
//    CALL_MAIL("setCc:",carbon_copy); 
    CALL_MAIL("setSubject:",subj);
    CALL_MAIL("setBody:",body);    

    return self;
}

/* InfoPanel Delegation Methods */
- windowWillClose:sender
{
    return self;
}

- windowDidBecomeKey:sender
{
    return self;
}

@end
