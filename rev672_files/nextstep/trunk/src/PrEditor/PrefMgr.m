/*
 *    Filename:	PrefMgr.m 
 *    Created :	Sun Feb 23 15:49:05 1992 
 *    Author  :	Vince DeMarco
 *		<vince@whatnxt.cuc.ab.ca>
 *
 * LastEditDate "Tue Jun  2 21:20:11 1992"
 *
 * $Log: not supported by cvs2svn $
# Revision 2.1  1992/06/10  14:33:05  vince
# This object now sets all of the default values
# for the TextToSpeech Kit. After a value has been changed
# a test phrase is spoken to allow the user to see if the
# change that he/she has made is okay.
#
# Revision 2.0  1992/04/08  03:43:23  vince
# Initial-Release
#
 *
 */


/* Generated by Interface Builder */

#import "PrefMgr.h"
#import <stdlib.h>
#import <appkit/Application.h>
#import <appkit/Window.h>
#import <appkit/View.h>
#import <appkit/Control.h>
#import <appkit/ActionCell.h>
#import <appkit/TextField.h>
#import <appkit/Button.h>
#import <appkit/OpenPanel.h>
#import <appkit/Matrix.h>
#import <defaults/defaults.h>
#import <appkit/publicWraps.h>        // For NXBeep()
#import <TextToSpeech/TextToSpeech.h>
#import "CustSlider.h"
#import "objc-debug.h"


/* STRINGIFICATION MACROS
 * THE STRINGIFY macro will expand a macro and then convert it
 * to a string
 */

#define STRINGIFY(s) STR(s)
#define STR(s)  #s



@implementation PrefMgr

+ initialize
{
    const NXDefaultsVector SpeechDefaults = {
        {TTS_NXDEFAULT_SPEED,          STRINGIFY(TTS_SPEED_DEF)},
	{TTS_NXDEFAULT_INTONATION,     STRINGIFY(TTS_INTONATION_DEF)},
	{TTS_NXDEFAULT_VOICE_TYPE,     STRINGIFY(TTS_VOICE_TYPE_DEF)},
	{TTS_NXDEFAULT_PITCH_OFFSET,   STRINGIFY(TTS_PITCH_OFFSET_DEF)},
	{TTS_NXDEFAULT_VTL_OFFSET,     STRINGIFY(TTS_VTL_OFFSET_DEF)},
	{TTS_NXDEFAULT_VOLUME,         STRINGIFY(TTS_VOLUME_DEF)},
	{TTS_NXDEFAULT_CHANNELS,       STRINGIFY(TTS_CHANNELS_DEF)},
	{TTS_NXDEFAULT_BALANCE,        STRINGIFY(TTS_BALANCE_DEF)},
	{TTS_NXDEFAULT_BREATHINESS,    STRINGIFY(TTS_BREATHINESS_DEF)},
	{TTS_NXDEFAULT_USER_DICT_PATH, NULL},
	{NULL,NULL},
    };
    const NXDefaultsVector PrEditorDefaults = {
	{"TestSentence",TEST_SENTENCE},
	{NULL,NULL},
    };
    
    if (self == [PrefMgr class]){
	NXRegisterDefaults(TTS_NXDEFAULT_OWNER, SpeechDefaults);
	NXRegisterDefaults("PrEditor", PrEditorDefaults);
    }

    return self;
}



- free
{
    [window setDelegate:nil];
    [speechObject free];
    return [super free];
}


    
- preferences:sender
{
    if (!window){
	[NXApp loadNibSection:"PrefMgr.nib" owner:self
	       withNames:NO fromZone:[self zone]];
	currentView = generalView;

	[volumeField setFloatingPointFormat:YES left:2 right:1];
	[speedField setFloatingPointFormat:NO left:1 right:2];
	[pitchOffsetField setFloatingPointFormat:YES left:2 right:1];
	[vtlOffsetField setFloatingPointFormat:YES left:1 right:2];
	[balanceField setFloatingPointFormat:YES left:1 right:2];
	[breathinessField setFloatingPointFormat:NO left:1 right:1];

	[volume setMinValue:TTS_VOLUME_MIN];
	[volume setMaxValue:TTS_VOLUME_MAX];
	[[volume setTarget:self] setAction: @selector(setVOlume:)];
	[[volume setTarget2:self] setAction2: @selector(sayTestSentence:)];

	[speed setMinValue:TTS_SPEED_MIN];
	[speed setMaxValue:TTS_SPEED_MAX];
	[[speed setTarget:self] setAction: @selector(setSPeed:)];
	[[speed setTarget2:self] setAction2: @selector(sayTestSentence:)];

	[balance setMinValue:TTS_BALANCE_MIN];
	[balance setMaxValue:TTS_BALANCE_MAX];
	[[balance setTarget:self] setAction: @selector(setBAlance:)];
	[[balance setTarget2:self] setAction2: @selector(sayTestSentence:)];

	[breathiness setMinValue:TTS_BREATHINESS_MIN];
	[breathiness setMaxValue:TTS_BREATHINESS_MAX];
	[[breathiness setTarget:self] setAction: @selector(setBReathiness:)];
	[[breathiness setTarget2:self] setAction2: @selector(sayTestSentence:)];

	[pitchOffset setMinValue:TTS_PITCH_OFFSET_MIN];
	[pitchOffset setMaxValue:TTS_PITCH_OFFSET_MAX];
	[[pitchOffset setTarget:self] setAction: @selector(setPitchOFFset:)];
	[[pitchOffset setTarget2:self] setAction2: @selector(sayTestSentence:)];

	[vtlOffset setMinValue:TTS_VTL_OFFSET_MIN];
	[vtlOffset setMaxValue:TTS_VTL_OFFSET_MAX];
	[[vtlOffset setTarget:self] setAction: @selector(setVtlOFFset:)];
	[[vtlOffset setTarget2:self] setAction2: @selector(sayTestSentence:)];

	[window useOptimizedDrawing:YES];
    }

    if (!speechObject)
	speechObject = [[TextToSpeech allocFromZone:[self zone]] init];

    [self revertAll:sender];
    [window makeKeyAndOrderFront:sender];

    return self;
}



- revertAll:sender
{
    const char *value;
    long int the_intonation;

    [self revertUserDictPath:sender];

    value = NXGetDefaultValue(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_VOLUME);
    [volume setFloatValue: atof(value)];
    [volumeField setFloatValue: atof(value)];

    value = NXGetDefaultValue(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_SPEED);
    [speed setFloatValue: atof(value)];
    [speedField setFloatValue: atof(value)];

    value = NXGetDefaultValue(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_PITCH_OFFSET);
    [pitchOffset setFloatValue: atof(value)];
    [pitchOffsetField setFloatValue: atof(value)];

    value = NXGetDefaultValue(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_VTL_OFFSET);
    [vtlOffset setFloatValue: atof(value)];
    [vtlOffsetField setFloatValue: atof(value)];

    value = NXGetDefaultValue(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_CHANNELS);
    [channels selectCellWithTag:atoi(value)];

    value = NXGetDefaultValue(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_VOICE_TYPE);
    [voiceType selectCellWithTag:atoi(value)];

    value = NXGetDefaultValue(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_BALANCE);
    [balance setFloatValue:atof(value)];
    [balanceField setFloatValue:atof(value)];

    value = NXGetDefaultValue(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_BREATHINESS);
    [breathiness setFloatValue:atof(value)];
    [breathinessField setFloatValue:atof(value)];


    the_intonation =
	strtol(NXGetDefaultValue(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_INTONATION),NULL,0);

    if (the_intonation & TTS_INTONATION_MICRO){
	[[intonation cellAt:0:0] setState:1];
    }else{
	[[intonation cellAt:0:0] setState:0];
    }
    if (the_intonation & TTS_INTONATION_MACRO){
	[[intonation cellAt:1:0] setState:1];
    }else{
	[[intonation cellAt:1:0] setState:0];
    }
    if (the_intonation & TTS_INTONATION_DECLIN){
	[[intonation cellAt:2:0] setState:1];
    }else{
	[[intonation cellAt:2:0] setState:0];
    }
    if (the_intonation & TTS_INTONATION_CREAK){
	[[intonation cellAt:3:0] setState:1];
    }else{
	[[intonation cellAt:3:0] setState:0];
    }
    if (the_intonation & TTS_INTONATION_RANDOMIZE){
	[[intonation cellAt:4:0] setState:1];
    }else{
	[[intonation cellAt:4:0] setState:0];
    }

    [testSentenceField setStringValue:NXGetDefaultValue("PrEditor","TestSentence")];

    return self;
}



- switchViews:sender
{
    [window disableFlushWindow];
    [currentView removeFromSuperview];
    switch ([[sender selectedCell] tag]){
     case 1:
	[[window contentView] addSubview:generalView];
	currentView = generalView;
	break;
     case 2:
	[[window contentView] addSubview:speechQualityView];
	currentView = speechQualityView;
	break;
     case 3:
	[[window contentView] addSubview:dictionarySettingsView];
	currentView = dictionarySettingsView;
	break;
    }
    [[window contentView] display];
    [window reenableFlushWindow];
    [window flushWindow];

    return self;
}



- setTestSentence:sender
{
    const char *testSentence = [sender stringValue];
    if (testSentence){
	NXWriteDefault("PrEditor","TestSentence",[sender stringValue]);
	[self sayTestSentence:sender];
    }else{
	[sender setStringValue:NXReadDefault("PrEditor","TestSentence")];
	[self sayTestSentence:sender];
    }
    return self;
}



- setINtonation:sender
{
    static char defaultValue[10];
    int i = 0;
    int the_intonation = TTS_INTONATION_NONE;
    id  theCell;

    for (i=0;i<=5;i++){
	theCell = [sender cellAt:i:0];
	if ([theCell state]){
	    switch([theCell tag]){
	     case 1:
		the_intonation |= TTS_INTONATION_MICRO;
		break;
	     case 2:
		the_intonation |= TTS_INTONATION_MACRO;
		break;
	     case 3:
		the_intonation |= TTS_INTONATION_DECLIN;
		break;
	     case 4:
		the_intonation |= TTS_INTONATION_CREAK;
		break;
	     case 5:
		the_intonation |= TTS_INTONATION_RANDOMIZE;
		break;
	    }
	}
    }
    sprintf(defaultValue,"0x%-x",the_intonation);
    NXWriteDefault(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_INTONATION,defaultValue);
    [speechObject setIntonation:the_intonation];
    [self sayTestSentence:sender];
    return self;
}



- setUSerDictPath:sender
{
    const char *const dictType[3] = {"preditor", NULL};
    id                openpanel   = [[OpenPanel new] allowMultipleFiles:NO];
    
    if ([openpanel runModalForTypes:dictType]) {
        [userDictionaryField setStringValue:[openpanel filename]];
	[userDictPathRevertButton setEnabled:YES];
	[userDictPathAcceptButton setEnabled:YES];
    }
    return self;
}



- revertUserDictPath:sender
{
    [userDictionaryField setStringValue:NXGetDefaultValue(TTS_NXDEFAULT_OWNER,
							  TTS_NXDEFAULT_USER_DICT_PATH)];
    [userDictPathRevertButton setEnabled:NO];
    [userDictPathAcceptButton setEnabled:NO];
    return self;
}



- acceptUserDictPath:sender
{
    NXWriteDefault(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_USER_DICT_PATH,
		   [userDictionaryField stringValue]);
    [userDictPathRevertButton setEnabled:NO];
    [userDictPathAcceptButton setEnabled:NO];
    [speechObject setAppDictPath:[userDictionaryField stringValue]];
    [self sayTestSentence:sender];
    return self;
}



- setVOlume:sender
{
    static char defaultValue[10];
    float val = [sender floatValue];

    if ([sender isKindOf:[Slider class]]){
	[volumeField setFloatValue:val];
    }else{
	if ((val <= TTS_VOLUME_MAX) && (val >= TTS_VOLUME_MIN)){
	    [volume setFloatValue:val];
	}else{
	    [volumeField setFloatValue:[volume floatValue]];
	    NXBeep();
	    return self;
	}
    }
    [speechObject setVolume:val];
    sprintf(defaultValue,"%f",val);
    NXWriteDefault(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_VOLUME,defaultValue);
    if (![sender isKindOf:[Slider class]]){
	[self sayTestSentence:sender];
    }
    return self;
}



- setCHannels:sender
{
    static char defaultValue[10];
    int numberChannels;


    /*  GET THE NUMBER OF CHANNELS SELECTED  */
    numberChannels = [[sender selectedCell] tag];

    /*  WRITE THIS VALUE TO THE DEFAULTS DATABASE  */
    sprintf(defaultValue,"%d",numberChannels);
    NXWriteDefault(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_CHANNELS,defaultValue);

    /*  SET THE NUMBER OF CHANNELS FOR THE VOICE  */
    [speechObject setNumberChannels:numberChannels];

    /*  SAY THE TEST SENTENCE WITH THE NEW VALUE  */
    [self sayTestSentence:sender];

    return self;
}



- setBAlance:sender
{
    static char defaultValue[10];
    float val = [sender floatValue];

    if ([sender isKindOf:[Slider class]]){
	[balanceField setFloatValue:val];
    }else{
	if ((val <= TTS_BALANCE_MAX) && (val >= TTS_BALANCE_MIN)){
	    [balance setFloatValue:val];
	}else{
	    [balanceField setFloatValue:[balance floatValue]];
	    NXBeep();
	    return self;
	}
    }
    [speechObject setBalance:val];
    sprintf(defaultValue,"%f",val);
    NXWriteDefault(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_BALANCE,defaultValue);
    if (![sender isKindOf:[Slider class]]){
	[self sayTestSentence:sender];
    }
    return self;
}



- setSPeed:sender
{
    static char defaultValue[10];
    float val = [sender floatValue];

    if ([sender isKindOf:[Slider class]]){
	[speedField setFloatValue:val];
    }else{
	if ((val <= TTS_SPEED_MAX) && (val >= TTS_SPEED_MIN)){
	    [speed setFloatValue:val];
	}else{
	    [speedField setFloatValue:[speed floatValue]];
	    NXBeep();
	    return self;
	}
    }
    [speechObject setSpeed:val];
    sprintf(defaultValue,"%f",val);
    NXWriteDefault(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_SPEED,defaultValue);
    if (![sender isKindOf:[Slider class]]){
	[self sayTestSentence:sender];
    }
    return self;
}



- setPitchOFFset:sender
{
    static char defaultValue[10];
    float val = [sender floatValue];

    if ([sender isKindOf:[Slider class]]){
	[pitchOffsetField setFloatValue:val];
    }else{
	if ((val <= TTS_PITCH_OFFSET_MAX) && (val >= TTS_PITCH_OFFSET_MIN)){
	    [pitchOffset setFloatValue:val];
	}else{
	    [pitchOffsetField setFloatValue:[pitchOffset floatValue]];
	    NXBeep();
	    return self;
	}
    }
    [speechObject setPitchOffset:val];
    sprintf(defaultValue,"%f",val);
    NXWriteDefault(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_PITCH_OFFSET,defaultValue);
    if (![sender isKindOf:[Slider class]]){
	[self sayTestSentence:sender];
    }
    return self;
}



- setVtlOFFset:sender
{
    static char defaultValue[10];
    float val = [sender floatValue];

    if ([sender isKindOf:[Slider class]]){
	[vtlOffsetField setFloatValue:val];
    }else{
	if ((val <= TTS_VTL_OFFSET_MAX) && (val >= TTS_VTL_OFFSET_MIN)){
	    [vtlOffset setFloatValue:val];
	}else{
	    [vtlOffsetField setFloatValue:[vtlOffset floatValue]];
	    NXBeep();
	    return self;
	}
    }
    [speechObject setVocalTractLengthOffset:val];
    sprintf(defaultValue,"%f",val);
    NXWriteDefault(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_VTL_OFFSET,defaultValue);
    if (![sender isKindOf:[Slider class]]){
	[self sayTestSentence:sender];
    }
    return self;
}



- setVOiceType:sender
{
    static char defaultValue[10];
    int type;


    /*  GET THE VOICE TYPE SELECTED  */
    type = [[sender selectedCell] tag];

    /*  WRITE THIS VALUE TO THE DEFAULTS DATABASE  */
    sprintf(defaultValue,"%d",type);
    NXWriteDefault(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_VOICE_TYPE,defaultValue);

    /*  SET THE VOICE TYPE  */
    [speechObject setVoiceType:type];

    /*  SAY THE TEST SENTENCE WITH THE NEW VALUE  */
    [self sayTestSentence:sender];

    return self;
}



- setBReathiness:sender
{
    static char defaultValue[10];
    float val = [sender floatValue];

    if ([sender isKindOf:[Slider class]]){
	[breathinessField setFloatValue:val];
    }else{
	if ((val <= TTS_BREATHINESS_MAX) && (val >= TTS_BREATHINESS_MIN)){
	    [breathiness setFloatValue:val];
	}else{
	    [breathinessField setFloatValue:[breathiness floatValue]];
	    NXBeep();
	    return self;
	}
    }
    [speechObject setBreathiness:val];
    sprintf(defaultValue,"%f",val);
    NXWriteDefault(TTS_NXDEFAULT_OWNER,TTS_NXDEFAULT_BREATHINESS,defaultValue);
    if (![sender isKindOf:[Slider class]]){
	[self sayTestSentence:sender];
    }
    return self;
}



- sayTestSentence:sender
{
    [speechObject eraseAllSound]; // eraseCurrentUtterance
    if ([speechObject speakText:[testSentenceField stringValue]] == TTS_DSP_TOO_SLOW) {
	NXBeep();
	/*  TELL THE USER THAT THE DSP IS TOO SLOW  */
        NXRunAlertPanel("DSP hardware is too slow",
           "Choose a larger voice type and/or a longer vocal tract length offset.",
           "OK", NULL, NULL);

    }
    return self;
}



/* Window Delegations Methods */

- windowWillClose:sender
{
    [speechObject free];
    speechObject = nil;
    return self;
}

@end
