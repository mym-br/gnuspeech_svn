/*
 *    Filename:	Help.m 
 *    Created :	Wed Jan  8 23:34:45 1992 
 *    Author  :	Vince DeMarco
 *		<vince@whatnxt.cuc.ab.ca>
 *
 * LastEditDate "Tue Jun  2 15:14:01 1992"
 *
 * $Log: not supported by cvs2svn $
# Revision 2.1  1992/06/10  13:54:40  vince
# More Entries have been added to the help window
# and each time the window is displayed the
# What is PrEditor? option is displayed.
#
# Revision 2.0  1992/04/08  03:43:23  vince
# Initial-Release
#
 *
 */


/* Generated by Interface Builder */

#import "Help.h"
#import "PrEditorApp.h"

#import <appkit/Window.h>
#import <appkit/Matrix.h>
#import <appkit/NXBrowser.h>
#import <appkit/NXBrowserCell.h>
#import <appkit/ScrollView.h>
#import <appkit/Text.h>

#import <appkit/nextstd.h>

#import <mach-o/ldsyms.h>
#import <mach-o/loader.h>
#import <mach/mach.h>
#import <defaults/defaults.h>
#ifdef DEBUG
#import <stdio.h>
#endif
#define HELPSEG        "__RTF"
#define NUMFILES       6

#define HELPPOSITION "HelpPosition"

@implementation Help


+ initialize
{
    const NXDefaultsVector PrEditorDefaults = {{HELPPOSITION,"0 0 0 0"},{NULL}};

    if (self == [Help class]){
	NXRegisterDefaults("PrEditor", PrEditorDefaults);
    }
    return self;
}

- init
{
    self = [super init];
    helpZone = NXCreateZone(vm_page_size, vm_page_size, NO);
    return self;
}

- free
{
    NXDestroyZone(helpZone);
    return [super free];
}

- help:sender
{
    const char *theDefault;
    NXRect windowFrame;

    if (!helpWindow){
	[NXApp loadNibSection:"Help.nib" owner:self withNames: NO fromZone:helpZone];
        [helpBrowser setMaxVisibleColumns:1];
	[helpWindow getFrame:&WindowRect];
	[self showHelpFile:"What is PrEditor"];
	[helpBrowser loadColumnZero];
	[helpWindow setMiniwindowIcon:"help"];
        if (theDefault = NXReadDefault("PrEditor",HELPPOSITION)){
            sscanf(theDefault,"%f %f %f %f",&windowFrame.origin.x,&windowFrame.origin.y,
                   &windowFrame.size.width,&windowFrame.size.height);
	    [helpWindow sizeWindow:windowFrame.size.width:windowFrame.size.height];
	    [helpWindow moveTo:windowFrame.origin.x :windowFrame.origin.y];
	}
    }	
    [[[helpBrowser matrixInColumn:0] selectCellAt:0 :0] scrollCellToVisible:0 :0];
    [self showHelpFile:"What is PrEditor"];
    [helpWindow makeKeyAndOrderFront:sender];

    return self;
}

/* Browser Hit */

- browserHit:sender
{
    [self showHelpFile:[[[sender matrixInColumn:0] selectedCell] stringValue]];
    return self;
}

- showHelpFile:(const char*)filename
{
    int size;
    char *data = NULL;
    NXStream *stream;
    static NXPoint origin = {0.0,0.0};
#ifdef DEBUG
    fprintf(stderr,"showHelpFile: filename %s\n",filename);
#endif
    if (filename){
	switch(filename[0]){
	case 'W':
	    data = getsectdata(HELPSEG,"What",&size);
	    break;
	case 'E':
	    data = getsectdata(HELPSEG,"Entering",&size);
	    break;
	case 'P':
	    switch (filename[1]){
	    case 'h':
		data = getsectdata(HELPSEG,"Phonetic",&size);
		break;
	    default:
		data = getsectdata(HELPSEG,"Pronunciation",&size);
		break;
	    }
	    break;
	case 'S':
	    data = getsectdata(HELPSEG,"Setting",&size);
	    break;
	case 'K':
	    data = getsectdata(HELPSEG,"Bugs",&size);
	}

	if (data){
	    stream = NXOpenMemory(data,size,NX_READONLY);
	    if (stream){
		[helpWindow disableFlushWindow];
		[[helpScrollView docView] readRichText:stream];
		[[helpScrollView docView] scrollPoint:&origin];
		[[helpWindow reenableFlushWindow] flushWindow];
		NXClose(stream);
	    }
	}
    }
    return self;
}    

- print:sender
{
    [[helpScrollView docView] printPSCode:sender];
    return self;
}

/* Browser Delegation Methods */
- (int)browser:sender fillMatrix:matrix inColumn:(int)column
{
    int numRows, numCols;
    id  newCell;

    [matrix getNumRows:&numRows numCols:&numCols];
    [matrix addRow];
    newCell = [matrix cellAt: numRows:column];
    [newCell setStringValue:"What is PrEditor?"];
    [newCell setLoaded:YES];
    [newCell setLeaf:YES];

    [matrix getNumRows:&numRows numCols:&numCols];
    [matrix addRow];
    newCell = [matrix cellAt: numRows:column];
    [newCell setStringValue:"Entering and Editing Pronunciations"];
    [newCell setLoaded:YES];
    [newCell setLeaf:YES];

    [matrix getNumRows:&numRows numCols:&numCols];
    [matrix addRow];
    newCell = [matrix cellAt: numRows:column];
    [newCell setStringValue:"Phonetic Representations"];
    [newCell setLoaded:YES];
    [newCell setLeaf:YES];

    [matrix getNumRows:&numRows numCols:&numCols];
    [matrix addRow];
    newCell = [matrix cellAt: numRows:column];
    [newCell setStringValue:"Pronunciation Guide"];
    [newCell setLoaded:YES];
    [newCell setLeaf:YES];

    [matrix getNumRows:&numRows numCols:&numCols];
    [matrix addRow];
    newCell = [matrix cellAt: numRows:column];
    [newCell setStringValue:"Setting TextToSpeech User Defaults"];
    [newCell setLoaded:YES];
    [newCell setLeaf:YES];

    [matrix getNumRows:&numRows numCols:&numCols];
    [matrix addRow];
    newCell = [matrix cellAt: numRows:column];
    [newCell setStringValue:"Known Bugs in PrEditor"];
    [newCell setLoaded:YES];
    [newCell setLeaf:YES];

    return NUMFILES;
}

/* Window Delegation Methods */
- windowWillResize:sender toSize:(NXSize *)frameSize
{
    /* Now i don't have to change the min size here when i change the size
     * of the Window in Interface Builder
     * Isn't this much cleaner?
     */
    frameSize->width  = MAX(frameSize->width, WindowRect.size.width);
    frameSize->height = MAX(frameSize->height,WindowRect.size.height);
    return self;
}

- windowDidUpdate:sender
{
    NXRect windowFrame;
    static char theDefault[50];

    [sender getFrame: &windowFrame];
    sprintf(theDefault,"%.0f %.0f %.0f %.0f",
	    windowFrame.origin.x,windowFrame.origin.y,
            windowFrame.size.width-2,windowFrame.size.height-32);

    NXWriteDefault("PrEditor",HELPPOSITION,theDefault);
    return sender;
}

@end
