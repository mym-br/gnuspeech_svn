
/* Generated by Interface Builder */

#import "PhoneDescription.h"
#import "Template.h"
#import "Categories.h"
#import "Rule.h"
#import <appkit/appkit.h>

@implementation PhoneDescription

- appDidInit:sender
{
    /*  INITIALIZE HEAD OF LIST  */
    phoneDescriptionHead = currentDescriptionPtr = NULL;
    number_of_phones = 0;

    /*  SET TARGET AND ACTION OF PHONE BROWSER  */
    [phoneList setTarget:self];
    [phoneList setAction:(SEL)(@selector(phoneBrowserHit:))];
    phoneCurrentRow = 0;

    /*  SET TARGET AND ACTION OF TARGET VALUE BROWSER  */
    [targetList setTarget:self];
    [targetList setAction:(SEL)(@selector(targetBrowserHit:))];
    [targetList setDoubleAction:(SEL)(@selector(targetBrowserDoubleHit:))];
    targetCurrentRow = 0;
    currentTargetPtr = NULL;
    [targetModButton setEnabled:0];

    /*  SET TARGET AND ACTION OF CATEGORY BROWSER  */
    [categoryList setTarget:self];
    [categoryList setAction:(SEL)(@selector(categoryBrowserHit:))];
    categoryCurrentRow = 0;
    [categoryDeleteButton setEnabled:0];
    [categoryAddButton setEnabled:0];

    /*  SET TARGET AND ACTION OF ADD CATEGORIZE BROWSER  */
    [addCategorizeList setTarget:self];
    [addCategorizeList setAction:(SEL)(@selector(addCategorizeBrowserHit:))];
    [addCategorizeList setDoubleAction:(SEL)(@selector(addCategorizeBrowserDoubleHit:))];
    addCategorizeCurrentRow = 0;
    [categorizeAddButton setEnabled:0];

    /*  SET FONT OF ALL BROWSERS  */
    fontObj = [Font newFont:FONTNAME size:FONTSIZE];
    [[phoneList matrixInColumn:0] setFont:fontObj];
    [[targetList matrixInColumn:0] setFont:fontObj];
    [[categoryList matrixInColumn:0] setFont:fontObj];
    [[addCategorizeList matrixInColumn:0] setFont:fontObj];

    /*  SET TRANSITION DURATION TYPE BUTTON TO FIXED  */
    [transitionDurSwitch setTitle:"Fixed"];
    [transitionDurLabel setStringValue:"ms"];
    [transitionDurSwitch setEnabled:0];
    [transitionDurField setEnabled:0];

    /*  DISABLE DURATION FIELD  */
    [displayPhoneDuration setEnabled:0];

    return self;
}



- setTitleBar:(char *)currentPath
{
    char buffer[MAXPATHLEN+22];

    /*  ADD FILENAME TO TITLE OF EACH WINDOW  */
    strcpy(buffer,"Phone Description:   ");
    strcat(buffer,currentPath);
    [phoneDescriptionWindow setTitle:(const char *)buffer];

    return self;
}



- phoneBrowserHit:sender
{
    int i;

    /*  SET VARIABLE TO INDICATE SELECTED ROW  */
    phoneCurrentRow = [[sender matrixInColumn:0] selectedRow] + 1;
    currentDescriptionPtr = phoneDescriptionHead;
    for (i = 1; i < phoneCurrentRow; i++)
	currentDescriptionPtr = currentDescriptionPtr->next;

    /*  IF NOTHING TO DISPLAY, RETURN  */
    if (currentDescriptionPtr == NULL) {
	NXBeep();
	return self;
    }

    /*  UPDATE CURRENT PHONE DISPLAY  */
    [displayCurrentPhone setStringValue:currentDescriptionPtr->symbol];

    /*  UPDATE PHONE DURATION DISPLAY  */
    [displayPhoneDuration setEnabled:1];
    [displayPhoneDuration setIntValue:currentDescriptionPtr->duration];

    /*  UPDATE TRANSITION DURATION DISPLAY  */
    [transitionDurSwitch setEnabled:1];
    [transitionDurField setEnabled:1];
    if (currentDescriptionPtr->transition_duration.type == T_DURATION_FIXED) {
	/*  SET LABEL  */
	[transitionDurLabel setStringValue:"ms"];
	/*  SET SWITCH  */
	[transitionDurSwitch setTitle:"Fixed"];
	/*  SET NUMERIC DISPLAY  */
	[transitionDurField setIntValue:currentDescriptionPtr->transition_duration.fixed];
    }
    else {
	/*  SET LABEL  */
	[transitionDurLabel setStringValue:"%"];
	/*  SET SWITCH  */
	[transitionDurSwitch setTitle:"Proportional"];
	/*  SET NUMERIC DISPLAY  */
	[transitionDurField setFloatValue:(currentDescriptionPtr->transition_duration.prop*100.0)];
    }


    /*  UPDATE TARGET BROWSER  */
    targetCurrentRow = 0;
    [targetModButton setEnabled:0];
    [targetList loadColumnZero];

    /*  UPDATE CATEGORIZE BROWSER  */
    categoryCurrentRow = 0;
    [categoryDeleteButton setEnabled:0];
    [categoryAddButton setEnabled:1];
    [categoryList loadColumnZero];
    return self;
}



- targetBrowserHit:sender
{
    int i;

    /*  SET VARIABLE TO INDICATE SELECTED ROW  */
    targetCurrentRow = [[sender matrixInColumn:0] selectedRow] + 1;

    /*  SET CURRENT POINTER TO TARGET  */
    currentTargetPtr = currentDescriptionPtr->targetHead;
    for (i = 1; i < targetCurrentRow; i++)
	currentTargetPtr = currentTargetPtr->next;

    /*  ENABLE MOD BUTTON  */
    [targetModButton setEnabled:1];

    return self;
}



- targetBrowserDoubleHit:sender
{
    /*  SAME AS USING THE MODIFY BUTTON  */
    [self modifyTarget:self];
    return self;
}



- categoryBrowserHit:sender
{
    /*  SET VARIABLE TO INDICATE SELECTED ROW  */
    categoryCurrentRow = [[sender matrixInColumn:0] selectedRow] + 1;

    /*  ENABLE MOD BUTTON  */
    [categoryDeleteButton setEnabled:1];

    return self;
}



- addCategorizeBrowserHit:sender
{
    /*  SET VARIABLE TO INDICATE SELECTED ROW  */
    addCategorizeCurrentRow = [[sender matrixInColumn:0] selectedRow] + 1;

    /*  PUT SELECTED SYMBOL IN DISPLAY  */
    [addCategorizeForm setStringValue:[categories symbolAtRow:addCategorizeCurrentRow-1]];

    /*  ENABLE MOD BUTTON  */
    [categorizeAddButton setEnabled:1];

    return self;
}



- addCategorizeBrowserDoubleHit:sender
{
    /*  SAME AS DOING AN ADD  */
    [self addCategorizeAdd:self];
    return self;
}



- (int)browser:sender fillMatrix:matrix inColumn:(int)column
{
    /*  DELEGATE METHOD FOR NXBROWSER  */
    /*  MERELY UPDATE THE BROWSER WITH THE NUMBER OF ITEMS  */
    if (sender == phoneList) {
	return(number_of_phones);
    }
    else if (sender == targetList) {
      	return(number_of_targets);
    }
    else if (sender == categoryList) {
	if (currentDescriptionPtr != NULL)
     	    return(currentDescriptionPtr->number_of_categories);
	else
	    return(0);
    }
    else if (sender == addCategorizeList) {
      	return([categories numberOfCategories]);
    }
    else
    	return(0);
}

- browser:sender loadCell:cell atRow:(int)row inColumn:(int)column
{
    /*  NXBROWSER DELEGATE METHOD WHICH UPDATES PARTICULAR CELLS
        FROM THE DATA STORED IN LINKED LISTS  */
    int i, len;

    if (sender == phoneList) {
        phoneDescriptionPtr current_ptr;
	char string[ROW_NUMBER_MAX+SYMBOL_LENGTH_MAX+1];

	/*  SEARCH THROUGH LIST TILL ITEM FOUND  */
	current_ptr = phoneDescriptionHead;
	for (i = 0; i < row; i++)
	  current_ptr = current_ptr->next;
	/*  PUT ROW NUMBER AND SYMBOL IN CELL  */
	sprintf(string,"%-d.",row+1);
        len = strlen(string);
        for (i = 0; i < (ROW_NUMBER_MAX-len); i++)
	    strcat(string," ");
	strcat(string,current_ptr->symbol);
        [cell setStringValue:string];
    }
    else if (sender == targetList) {
        int i, len;
	targetPtr current_target_ptr;
	char string[ROW_NUMBER_MAX+SYMBOL_LENGTH_MAX+FLOAT_LENGTH_MAX+1];
        char s[2*FLOAT_LENGTH_MAX];

	/*  FIND DESIRED TARGET  */
	current_target_ptr = currentDescriptionPtr->targetHead;
	for (i = 0; i < row; i++)
	    current_target_ptr = current_target_ptr->next;

	/*  PUT ROW NUMBER, SYMBOL, IS_DEFAULT AND VALUE IN CELL  */
	sprintf(string,"%-d.",row+1);
        len = strlen(string);
        for (i = 0; i < (ROW_NUMBER_MAX-len); i++)
	    strcat(string," ");

	strcat(string,[template parameterSymbol:row+1]);

        len = strlen(string);
	for (i = 0; i < (COLUMN1-len-1); i++)
	    strcat(string," ");

        if (current_target_ptr->is_default)
	    strcat(string,"*");
	else
	    strcat(string," ");

        sprintf(s,"%-.2f",current_target_ptr->value);
	strncat(string,s,FLOAT_LENGTH_MAX);

        [cell setStringValue:string];
    }
    else if (sender == categoryList) {
        int i, len;
	categoryPtr current_cat_ptr;
	char string[ROW_NUMBER_MAX+SYMBOL_LENGTH_MAX+1];

	/*  FIND DESIRED CATEGORY  */
	current_cat_ptr = currentDescriptionPtr->categoryHead;
	for (i = 0; i < row; i++)
	    current_cat_ptr = current_cat_ptr->next;

	/*  PUT ROW NUMBER AND SYMBOL IN CELL  */
	sprintf(string,"%-d.",row+1);
        len = strlen(string);
        for (i = 0; i < (ROW_NUMBER_MAX-len); i++)
	    strcat(string," ");
	strcat(string,current_cat_ptr->symbol);
        [cell setStringValue:string];
    }
    else if (sender == addCategorizeList) {
	char string[ROW_NUMBER_MAX+SYMBOL_LENGTH_MAX+1];
	categoryPtr currentPtr;

	/*  PUT ROW NUMBER AND SYMBOL IN CELL  */
	sprintf(string,"%-d.",row+1);
        len = strlen(string);
        for (i = 0; i < (ROW_NUMBER_MAX-len); i++)
	    strcat(string," ");
	strcat(string,[categories symbolAtRow:row]);
        [cell setStringValue:string];

	/*  DISABLE ITEM IF ALREADY SELECTED AS A CATEGORY  */
	currentPtr = currentDescriptionPtr->categoryHead;
	for (i = 0; i < currentDescriptionPtr->number_of_categories; i++) {
	    if (!strcmp([categories symbolAtRow:row],currentPtr->symbol)) {
		[cell setEnabled:0];
		break;
	    }
	    currentPtr = currentPtr->next;
	}
    }

    /*  INDICATE THAT THE CELL IS A LEAF NODE  */
    [cell setLeaf:YES];
    return self;
}



- modifyTarget:sender
{
    /*  MAKE SURE A PHONE HAS BEEN SELECTED  */
    if (currentDescriptionPtr == NULL) {
	NXBeep();
	return self;
    }

    /*  MAKE SURE A TARGET HAS BEEN SELECTED  */
    if (targetCurrentRow == 0) {
	NXBeep();
	return self;
    }

    /*  PUT INFO IN PANEL  */
    [[modTargetMatrix cellAt:TARGET_MATRIX_PARAM:0] 
	setStringValue:[template parameterSymbol:targetCurrentRow]];
    [[modTargetMatrix cellAt:TARGET_MATRIX_MIN:0]
	setFloatValue:[template parameterMinimum:targetCurrentRow]];
    [[modTargetMatrix cellAt:TARGET_MATRIX_MAX:0]
	setFloatValue:[template parameterMaximum:targetCurrentRow]];
    [[modTargetMatrix cellAt:TARGET_MATRIX_DEF:0]
	setFloatValue:[template parameterDefault:targetCurrentRow]];

    [modTargetSwitch selectCellAt:(currentTargetPtr->is_default) :0];
    [modTargetForm setFloatValue:currentTargetPtr->value];

    /*  PUT CURSOR AT SYMBOL FIELD  */
    [modTargetForm selectTextAt:0];

    /*  PUT PANEL IN PROPER RELATION TO WINDOW  */
    [phoneDescriptionWindow getFrame:(NXRect *)&r];
    [modTargetPanel moveTo:(NXCoord)r.origin.x+MODTARGET_X_OFFSET
		          :(NXCoord)r.origin.y+MODTARGET_Y_OFFSET];

    /*  MAKE PANEL VISIBLE  */
    [modTargetPanel makeKeyAndOrderFront:self];

    /*  MAKE SURE PANEL IS MODAL  */
    [NXApp runModalFor:modTargetPanel];

    return self;
}



- addCategory:sender
{
    /*  MAKE SURE A PHONE HAS BEEN SELECTED  */
    if (currentDescriptionPtr == NULL) {
	NXBeep();
	return self;
    }

    /*  UPDATE THE addCategorizePanel BROWSER  */
    [addCategorizeList loadColumnZero];

    /*  PUT PANEL IN PROPER RELATION TO WINDOW  */
    [phoneDescriptionWindow getFrame:(NXRect *)&r];
    [addCategorizePanel moveTo:(NXCoord)r.origin.x+CATEGORIZE_X_OFFSET
		              :(NXCoord)r.origin.y+CATEGORIZE_Y_OFFSET];

    /*  MAKE PANEL VISIBLE  */
    [addCategorizePanel makeKeyAndOrderFront:self];

    /*  MAKE SURE PANEL IS MODAL  */
    [NXApp runModalFor:addCategorizePanel];

    return self;
}

- deleteCategory:sender
{
    categoryPtr current_cat_ptr, temp_cat_ptr;
    int i;

    /*  MAKE SURE A PHONE HAS BEEN SELECTED  */
    if (currentDescriptionPtr == NULL) {
	NXBeep();
	return self;
    }

    /*  MAKE SURE A CATEGORY IS SELECTED  */
    if (categoryCurrentRow <= 0) {
	NXBeep();
	return self;
    }

    /* MAKE SURE THE "NATIVE" AND "PHONE" CATEGORIES ARE NEVER DELETED  */
    if (categoryCurrentRow == 1) {
	NXBeep();
	NXRunAlertPanel("Illegal",
		"You cannot remove this phone\nfrom the native \"%s\" category.",
	        "OK", NULL, NULL, currentDescriptionPtr->symbol);
	return self;
    }
    else if (categoryCurrentRow == 2) {
	NXBeep();
	NXRunAlertPanel("Illegal",
		"You cannot remove this phone\nfrom the \"phone\" category.",
	        "OK", NULL, NULL);
	return self;
    }

    /*  GO TO STRUCT JUST BEFORE THE ONE TO DELETE,
        FREE STRUCT AND ADJUST LINKED LIST  */
    if (categoryCurrentRow == 1) {
        temp_cat_ptr = currentDescriptionPtr->categoryHead;
	currentDescriptionPtr->categoryHead = currentDescriptionPtr->categoryHead->next;
        free(temp_cat_ptr);
    }
    else {
	current_cat_ptr = currentDescriptionPtr->categoryHead;
	for (i = 1; i < categoryCurrentRow; i++) {
	    if (i == categoryCurrentRow-1) {
	    	temp_cat_ptr = current_cat_ptr->next;
	    	current_cat_ptr->next = current_cat_ptr->next->next;
	    	free(temp_cat_ptr);
	    	break;
	    }
	    current_cat_ptr = current_cat_ptr->next;
        }
    }

    /*  DECREMENT NUMBER OF CATEGORIES FOR PHONE  */
    (currentDescriptionPtr->number_of_categories) -= 1;
    i = categoryCurrentRow;
    if (i > (currentDescriptionPtr->number_of_categories))
	i--;
    categoryCurrentRow = 0;

    /*  DISABLE MOD BUTTON  */
    [categoryDeleteButton setEnabled:0];

    /*  RELOAD LIST INTO BROWSER  */
    [categoryList loadColumnZero];

    /*  SCROLL TO ROW WHERE DELETION OCCURRED  */
    [[categoryList matrixInColumn:0] scrollCellToVisible:i-1 :0];

    return self;
}



- modDurationOK:sender
{
    int i;

    /*  MAKE SURE A PHONE HAS BEEN SELECTED  */
    if (currentDescriptionPtr == NULL) {
	NXBeep();
	return self;
    }

    /*  GET ASSGIGNED VALUE  */
    i = [sender intValue];

    /*  MAKE SURE VALUE IS A POSITIVE MULTIPLE OF SAMPLE VALUE  */
    if ( ((i % [template sampleValue]) != 0) || (i <= 0)) {
	NXBeep();
	NXRunAlertPanel("Illegal",
		"Phone duration must be a positive\nmultiple of the sample size (%-d).", 
	        "OK", NULL, NULL, [template sampleValue]);
	[sender selectText:self];
	return self;
    }

    /*  ASSIGN VALUE TO LIST  */
    currentDescriptionPtr->duration = i;

    /*  MAKE SURE TRANSITION DURATION IS <= PHONE DURATION  */
    if (currentDescriptionPtr->transition_duration.type == T_DURATION_FIXED) {
	if (currentDescriptionPtr->transition_duration.fixed > i) {
	    /*  ADJUST TRANSITION DURATION TO SAME SIZE AS PHONE DURATION  */
	    currentDescriptionPtr->transition_duration.fixed = i;
	    /*  DISPLAY CHANGE IN FIELD  */
	    [transitionDurField setIntValue:currentDescriptionPtr->transition_duration.fixed];
	    /*  LET USER KNOW WHAT HAPPENED  */
	    NXBeep();
	    NXRunAlertPanel("Warning",
		"Transition Duration adjusted downwards.",
	        "OK", NULL, NULL);
	}
    }

    return self;
}



- modTransitionDurOK:sender
{
    /*  MAKE SURE A PHONE HAS BEEN SELECTED  */
    if (currentDescriptionPtr == NULL) {
	NXBeep();
	return self;
    }

    /*  STORE VALUE, ACCORDING TO KIND  */
    if (currentDescriptionPtr->transition_duration.type == T_DURATION_FIXED) {
	int value;
	/*  GET ASSIGNED VALUE  */
	value = [sender intValue];
	/*  MAKE SURE VALUE IS A POSITIVE MULTIPLE OF SAMPLE VALUE  */
	if ( ((value % [template sampleValue]) != 0) || (value < 0)) {
	    NXBeep();
	    NXRunAlertPanel("Illegal",
	       "Transition duration must be a positive\nmultiple of the sample size (%-d).", 
	       "OK", NULL, NULL, [template sampleValue]);
	    [sender selectText:self];
	    return self;
	}
	/*  MAKE SURE VALUE NOT GREATER THAN PHONE DURATION  */
	if (value > currentDescriptionPtr->duration) {
	    NXBeep();
	    NXRunAlertPanel("Illegal",
	       "Transition duration cannot be\ngreater than the phone duration.",
	       "OK", NULL, NULL);
	    [sender selectText:self];
	    return self;
	}
	/*  ASSIGN VALUE TO LIST  */
	currentDescriptionPtr->transition_duration.fixed = value;	
    }
    else {
	float value;
	/*  GET ASSIGNED VALUE  */
	value = [sender floatValue];
	/*  MAKE SURE VALUE IS BETWEEN 0 AND 100 %  */
	if ((value < 0.0) || (value > 100.0)) {
	    NXBeep();
	    NXRunAlertPanel("Illegal",
	       "Transition duration must be between 0% and 100%.\n",
	       "OK", NULL, NULL);
	    [sender selectText:self];
	    return self;
	}
	/*  ASSIGN VALUE TO LIST  */
	currentDescriptionPtr->transition_duration.prop = (value/100.0);
    }

    return self;
}


- fixedTransitionDur:sender
{
    float value;
    int nint();

    /*  IF STATE NOT CHANGED, THEN RETURN IMMEDIATELY  */
    if (currentDescriptionPtr->transition_duration.type == T_DURATION_FIXED)
	return self;

    /*  STORE TRANSITION DURATION TYPE  */
    currentDescriptionPtr->transition_duration.type = T_DURATION_FIXED;

    /*  SET LABEL TO ms  */
    [transitionDurLabel setStringValue:"ms"];

    /*  CONVERT PERCENTAGE TO FIXED VALUE, ROUNDING TO SAMPLE SIZE  */
    value = currentDescriptionPtr->transition_duration.prop * 
	currentDescriptionPtr->duration;
    currentDescriptionPtr->transition_duration.fixed =
	nint(value/(float)[template sampleValue]) * [template sampleValue];

    /*  DISPLAY FIXED VALUE  */
    [transitionDurField setIntValue:currentDescriptionPtr->transition_duration.fixed];

    return self;
}


- propTransitionDur:sender
{
    /*  IF STATE NOT CHANGED, THEN RETURN IMMEDIATELY  */
    if (currentDescriptionPtr->transition_duration.type == T_DURATION_PROP)
	return self;

    /*  STORE TRANSITION DURATION TYPE  */
    currentDescriptionPtr->transition_duration.type = T_DURATION_PROP;

    /*  SET LABEL TO %  */
    [transitionDurLabel setStringValue:"%"];

    /*  CONVERT FIXED VALUE TO PERCENTAGE  */
    currentDescriptionPtr->transition_duration.prop = 
	((float)(currentDescriptionPtr->transition_duration.fixed)) /
	    ((float)currentDescriptionPtr->duration);

    /*  DISPLAY PROPORTIONAL VALUE  */
    [transitionDurField setFloatValue:(currentDescriptionPtr->transition_duration.prop * 100.0)];
    return self;
}



- modTargetCancel:sender
{
    /*  CLOSE THE PANEL  */
    [modTargetPanel close];
    [NXApp stopModal];
    return self;
}

- modTargetDefault:sender
{
    /*  IF SET TO DEFAULT, PUT IN DEFAULT VALUE  */
    if ([sender selectedRow] == YES) {
	currentTargetPtr->is_default = YES;
	[modTargetForm setFloatValue:[template parameterDefault:targetCurrentRow]];
    }
    else {
	currentTargetPtr->is_default = NO;
    }

    return self;
}

- modTargetOK:sender
{
    float new_value;

    /*  GET VALUE FROM FORM  */
    new_value = [modTargetForm floatValue];

    /*  IF VALUE DIFFERS FROM DEFAULT, CHANGE DEFAULT SWITCH  */
    if (new_value != [template parameterDefault:targetCurrentRow]) {
	[modTargetSwitch selectCellAt:NO :0];
	currentTargetPtr->is_default = NO;
    }

    /*  MAKE SURE VALUE WITHIN RANGE  */
    if (new_value < [template parameterMinimum:targetCurrentRow]) {
	NXBeep();
	NXRunAlertPanel("Illegal",
		"Assigned target value is less than\nthe minimum of %.2f",
	        "OK", NULL, NULL, [template parameterMinimum:targetCurrentRow]);
	/*  PUT CURSOR AT FIELD  */
	[modTargetForm selectTextAt:0];
	return self;
    }

    /*  MAKE SURE VALUE WITHIN RANGE  */
    if (new_value > [template parameterMaximum:targetCurrentRow]) {
	NXBeep();
	NXRunAlertPanel("Illegal",
		"Assigned target value is greater than\nthe maximum of %.2f",
	        "OK", NULL, NULL, [template parameterMaximum:targetCurrentRow]);
	/*  PUT CURSOR AT FIELD  */
	[modTargetForm selectTextAt:0];
	return self;
    }

    /*  CHANGE VALUE IN DATA BASE TO THAT CONTAINED IN FORM  */
    currentTargetPtr->value = [modTargetForm floatValue];

    /*  UPDATE CATEGORY BROWSER DISPLAY  */
    [targetList loadColumnZero];
	
    /*  SCROLL TO LATEST ITEM, SO IT CAN BE SEEN  */
    [[targetList matrixInColumn:0] scrollCellToVisible:targetCurrentRow-1 :0];

    /*  SELECT THE LATEST ITEM  */
    [[targetList matrixInColumn:0] selectCellAt:targetCurrentRow-1 :0];
    [self targetBrowserHit:targetList];

    /*  CLOSE THE PANEL  */
    [modTargetPanel close];
    [NXApp stopModal];
    return self;
}



- addCategorizeCancel:sender
{
    /*  BLANK OUT DISPLAY  */
    [addCategorizeForm setStringValue:""];

    /*  DISABLE ADD BUTTON  */
    [categorizeAddButton setEnabled:0];

    /*  CLOSE THE PANEL  */
    [addCategorizePanel close];
    [NXApp stopModal];
    return self;
}

- addCategorizeAdd:sender
{
    categoryPtr current_cat_ptr, new_category();

    /*  MAKE SURE AN ITEM HAS BEEN SELECTED  */
    if (!strcmp([addCategorizeForm stringValue], "")) {
	NXBeep();
	return self;
    }

    /*  ADD THE ITEM TO THE END OF THE LIST  */
    current_cat_ptr = currentDescriptionPtr->categoryHead;
    while ((current_cat_ptr->next) != NULL)
	current_cat_ptr = current_cat_ptr->next;

    current_cat_ptr->next = new_category();
    current_cat_ptr->next->next = NULL;
    strcpy(current_cat_ptr->next->symbol,[addCategorizeForm stringValue]);

    /*  UPDATE THE NUMBER OF CATEGORIES FOR THIS PHONE  */
    currentDescriptionPtr->number_of_categories += 1;

    /*  DISABLE ADD BUTTON  */
    [categorizeAddButton setEnabled:0];

    /*  UPDATE CATEGORY BROWSER DISPLAY  */
    [categoryList loadColumnZero];

    /*  UPDATE addCategorize BROWSER  */
    [addCategorizeList loadColumnZero];

    /*  BLANK THE DISPLAY  */
    [addCategorizeForm setStringValue:""];

    return self;
}



- addPhone:(char *)string order:(int)order
{
    int i, nint();
    phoneDescriptionPtr temp_next, current_ptr, new_phoneDescription();
    categoryPtr current_cat_ptr, new_category();

    /*  ADD NEW PHONE INTO LINKED LIST  */
    if (order == 1) {
	temp_next = phoneDescriptionHead;
	phoneDescriptionHead = new_phoneDescription();
        phoneDescriptionHead->next = temp_next;

	/*  ADD SYMBOL  */
	strcpy(phoneDescriptionHead->symbol,string);
	/*  ADD PHONE AND TRANSITION DURATIONS  */
        phoneDescriptionHead->duration = 
		nint((double)DURATION_DEF/[template sampleValue]) * [template sampleValue];
	phoneDescriptionHead->transition_duration.type = T_DURATION_FIXED;
	phoneDescriptionHead->transition_duration.fixed = T_DURATION_FIXED_DEF;
        /*  ADD "NATIVE" CATEGORY  */
        current_cat_ptr = (phoneDescriptionHead->categoryHead) = new_category();
        strcpy(current_cat_ptr->symbol,string);
        current_cat_ptr->next = NULL;
        phoneDescriptionHead->number_of_categories = 1;
	/*  ADD "PHONE" CATEGORY  */
        current_cat_ptr->next = new_category();
	current_cat_ptr = current_cat_ptr->next;
        strcpy((current_cat_ptr)->symbol,"phone");
        current_cat_ptr->next = NULL;
        phoneDescriptionHead->number_of_categories = 2;
	/*  ADD DEFAULT TARGETS  */
	[self addDefaultTargets:phoneDescriptionHead];
    }
    else {
	current_ptr = phoneDescriptionHead;
	for (i = 1; i < order; i++) {
	    if (i == (order-1)) {
		temp_next = current_ptr->next;
		current_ptr->next = new_phoneDescription();
		current_ptr->next->next = temp_next;

		/*  ADD SYMBOL  */
		strcpy(current_ptr->next->symbol,string);
		/*  ADD PHONE AND TRANSITION DURATIONS  */
                current_ptr->next->duration =
		  nint((double)DURATION_DEF/[template sampleValue]) * [template sampleValue];
		current_ptr->next->transition_duration.type = T_DURATION_FIXED;
		current_ptr->next->transition_duration.fixed = T_DURATION_FIXED_DEF;
	        /*  ADD "NATIVE" CATEGORY  */
        	current_cat_ptr = (current_ptr->next->categoryHead) = new_category();
	        strcpy(current_cat_ptr->symbol,string);
        	current_cat_ptr->next = NULL;
	        current_ptr->next->number_of_categories = 1;
		/*  ADD "PHONE" CATEGORY  */
        	current_cat_ptr->next = new_category();
		current_cat_ptr = current_cat_ptr->next;
        	strcpy(current_cat_ptr->symbol,"phone");
	        current_cat_ptr->next = NULL;
        	current_ptr->next->number_of_categories = 2;
		/*  ADD DEFAULT TARGETS  */
		[self addDefaultTargets:current_ptr->next];

		break;
	    }
	    current_ptr = current_ptr->next;
 	}
    }

    /*  UPDATE TOTAL NUMBER OF PHONES  */
    ++number_of_phones;

    /*  RELOAD LIST INTO BROWSER  */
    [phoneList loadColumnZero];

    /*  SCROLL TO LATEST ITEM, SO IT CAN BE SEEN  */
    [[phoneList matrixInColumn:0] scrollCellToVisible:order-1 :0];

    /*  SELECT THE LATEST ITEM  */
    [[phoneList matrixInColumn:0] selectCellAt:order-1 :0];
    [self phoneBrowserHit:phoneList];

    return self;
}


- deletePhone:(int)row
{
    int i;
    phoneDescriptionPtr next_temp, current_ptr;
    categoryPtr current_cat_ptr, temp_cat_ptr;
    targetPtr current_target_ptr, temp_target_ptr;

    /*  GO TO STRUCT JUST BEFORE THE ONE TO DELETE,
        FREE STRUCT AND ADJUST LINKED LIST  */
    if (row == 1) {
        next_temp = phoneDescriptionHead;
	phoneDescriptionHead = phoneDescriptionHead->next;
	/*  FREE ALL DEPENDENT CATEGORY MEMORY  */
	current_cat_ptr = next_temp->categoryHead;
	while (current_cat_ptr != NULL) {
	    temp_cat_ptr = current_cat_ptr->next;
	    free(current_cat_ptr);
	    current_cat_ptr = temp_cat_ptr;
	}
	/*  FREE ALL DEPENDENT TARGET MEMORY  */
	current_target_ptr = next_temp->targetHead;
	while (current_target_ptr != NULL) {
	    temp_target_ptr = current_target_ptr->next;
	    free(current_target_ptr);
	    current_target_ptr = temp_target_ptr;
	}
        /*  FREE PHONE NODE  */
        free(next_temp);
    }
    else {
	current_ptr = phoneDescriptionHead;
        for (i = 1; i < row; i++) {
	    if (i == row-1) {
		next_temp = current_ptr->next;
		current_ptr->next = current_ptr->next->next;
		/*  FREE ALL DEPENDENT CATEGORY MEMORY  */
		current_cat_ptr = next_temp->categoryHead;
		while (current_cat_ptr != NULL) {
		    temp_cat_ptr = current_cat_ptr->next;
		    free(current_cat_ptr);
		    current_cat_ptr = temp_cat_ptr;
		}
		/*  FREE ALL DEPENDENT TARGET MEMORY  */
		current_target_ptr = next_temp->targetHead;
		while (current_target_ptr != NULL) {
		    temp_target_ptr = current_target_ptr->next;
		    free(current_target_ptr);
		    current_target_ptr = temp_target_ptr;
		}
        	/*  FREE PHONE NODE  */
		free(next_temp);
		break;
	    }
            current_ptr = current_ptr->next;
        }
    }


    /*  DECREMENT TOTAL NUMBER OF PHONES  */
    --number_of_phones;
    i = row;
    if (i > number_of_phones)
	i--;

    /*  RELOAD LIST INTO BROWSER  */
    [phoneList loadColumnZero];

    /*  SCROLL TO ROW WHERE DELETION OCCURRED  */
    [[phoneList matrixInColumn:0] scrollCellToVisible:i-1 :0];

    /*  SELECT THE ITEM WHERE DELETION OCCURRED, IF IT EXISTS;
	ELSE, BLANK EVERYTHING  */
    if (i > 0) {
        [[phoneList matrixInColumn:0] selectCellAt:i-1 :0];
        [self phoneBrowserHit:phoneList];
    }
    else {
	/*  BLANK ALL DISPLAYS  */
	currentDescriptionPtr = phoneDescriptionHead = NULL;
	phoneCurrentRow = 0;

	[displayCurrentPhone setStringValue:""];
	[displayPhoneDuration setStringValue:""];
	[transitionDurField setStringValue:""];

	/*  RESET TRANSITION DURATION BUTTON AND LABEL  */
	[transitionDurLabel setStringValue:"ms"];
	[transitionDurSwitch setTitle:"Fixed"];

	/*  DISABLE BUTTONS AND FIELDS  */
	[targetModButton setEnabled:0];
	[categoryDeleteButton setEnabled:0];
	[categoryAddButton setEnabled:0];

	[displayPhoneDuration setEnabled:0];
	[transitionDurField setEnabled:0];
	[transitionDurSwitch setEnabled:0];
	
	[categoryList loadColumnZero];
    }

    return self;
}



- modPhone:(char *)string row:(int)row order:(int)order
{
    int i;
    phoneDescriptionPtr next_temp, current_ptr, item_ptr;

    /*  TAKE OUT ITEM FROM LIST  */
    if (row == 1) {
        item_ptr = phoneDescriptionHead;
	phoneDescriptionHead = phoneDescriptionHead->next;
    }
    else {
        item_ptr = NULL;
	current_ptr = phoneDescriptionHead;
        for (i = 1; i < row; i++) {
	    if (i == row-1) {
		item_ptr = current_ptr->next;
		current_ptr->next = current_ptr->next->next;
		break;
	    }
            current_ptr = current_ptr->next;
        }
    }

    /*  ADD PHONE BACK INTO LINKED LIST USING NEW VALUES  */
    if (order == 1) {
	next_temp = phoneDescriptionHead;
	phoneDescriptionHead = item_ptr;
        phoneDescriptionHead->next = next_temp;
	strcpy(phoneDescriptionHead->symbol,string);
	/*  UPDATE "NATIVE" CATEGORY SYMBOL AS WELL  */
	strcpy(phoneDescriptionHead->categoryHead->symbol,string);
    }
    else {
	current_ptr = phoneDescriptionHead;
	for (i = 1; i < order; i++) {
	    if (i == (order-1)) {
		next_temp = current_ptr->next;
		current_ptr->next = item_ptr;
		current_ptr->next->next = next_temp;
		strcpy(current_ptr->next->symbol,string);
		/*  UPDATE "NATIVE" CATEGORY SYMBOL AS WELL  */
		strcpy(current_ptr->next->categoryHead->symbol,string);
		break;
	    }
	    current_ptr = current_ptr->next;
 	}
    }


    /*  RELOAD LIST INTO BROWSER  */
    [phoneList loadColumnZero];

    /*  SCROLL TO CELL, SO IT CAN BE SEEN  */
    [[phoneList matrixInColumn:0] scrollCellToVisible:order-1 :0];

    /*  SELECT THE ITEM  */
    [[phoneList matrixInColumn:0] selectCellAt:order-1 :0];
    [self phoneBrowserHit:phoneList];

    return self;
}



- propagateModCategory:(char *)old_symbol :(char *)new_symbol;
{
    phoneDescriptionPtr current_ptr;
    categoryPtr current_cat_ptr;
    int i, j;

    /*  PROPAGATE ANY NAME CHANGES IN CATEGORY OBJ IN PHONE DESCRIPTION  */
    current_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	current_cat_ptr = current_ptr->categoryHead;
	for (j = 0; j < current_ptr->number_of_categories; j++) {
	    if (!strcmp(old_symbol,current_cat_ptr->symbol))
		strcpy(current_cat_ptr->symbol,new_symbol);
	    current_cat_ptr = current_cat_ptr->next;
	}
	current_ptr = current_ptr->next;
    }

    /*  UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
    [self phoneBrowserHit:phoneList];

    return self;
}

- propagateDeleteCategory:(char *)old_symbol;
{
    phoneDescriptionPtr current_ptr;
    categoryPtr current_cat_ptr, temp_cat_ptr = NULL;
    int i, j;

    /*  PROPAGATE ANY DELETIONS IN CATEGORY OBJ IN PHONE DESCRIPTION  */
    current_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	current_cat_ptr = current_ptr->categoryHead;
	if (!strcmp(current_cat_ptr->symbol,old_symbol)) {
	    temp_cat_ptr = current_cat_ptr;
	    current_ptr->categoryHead = current_cat_ptr->next;
	    free(temp_cat_ptr);
	    current_ptr->number_of_categories -= 1;
	}
	else {
	    current_cat_ptr = current_ptr->categoryHead;
            for (j = 0; j < (current_ptr->number_of_categories - 1); j++) {
	        if (!strcmp(current_cat_ptr->next->symbol,old_symbol)) {
		    temp_cat_ptr = current_cat_ptr->next;
		    current_cat_ptr->next= current_cat_ptr->next->next;
		    free(temp_cat_ptr);
		    current_ptr->number_of_categories -= 1;
		    break;
	        }
                current_cat_ptr = current_cat_ptr->next;
            }
	}
        current_ptr = current_ptr->next;
    }


    /*  UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
    [self phoneBrowserHit:phoneList];

    return self;
}



- addDefaultTargets:(phoneDescriptionPtr)phone_ptr
{
    int i;
    targetPtr new_target(), current_target_ptr = NULL;

    /*  MAKE SURE HEAD OF LIST NULL TO START WITH  */
    phone_ptr->targetHead = NULL;

    /*  FIND HOW MANY TARGETS TO ADD  */
    number_of_targets = [template numberOfParameters];

    /*  ADD TARGETS TO LIST FOR PARTICULAR PHONE  */
    for (i = 1; i <= number_of_targets; i++) {
	if (i == 1) {
	    current_target_ptr = (phone_ptr->targetHead) = new_target();
	    current_target_ptr->is_default = YES;
	    current_target_ptr->value = [template parameterDefault:i];
	    current_target_ptr->next = NULL;
	}
	else {
	    current_target_ptr->next = new_target();
	    current_target_ptr = current_target_ptr->next;
	    current_target_ptr->is_default = YES;
	    current_target_ptr->value = [template parameterDefault:i];
	    current_target_ptr->next = NULL;
	}
    }

    return self;
}


- propagateDeleteTarget:(int)currentRow
{
    phoneDescriptionPtr current_ptr;
    targetPtr current_target_ptr, temp_target_ptr = NULL;
    int i, j;

    /*  MAKE SURE THERE ARE PHONE TO OPERATE ON  */
    if (number_of_phones <= 0)
	return self;

    /*  PROPAGATE ANY DELETIONS OF PARAMETERS IN PHONE DESCRIPTION  */
    current_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	current_target_ptr = current_ptr->targetHead;
	if (currentRow == 1) {
	    temp_target_ptr = current_target_ptr;
	    current_ptr->targetHead = current_target_ptr->next;
	    free(temp_target_ptr);
	}
	else {
            for (j = 1; j < currentRow-1; j++)
                current_target_ptr = current_target_ptr->next;

            temp_target_ptr = current_target_ptr->next;
	    current_target_ptr->next= current_target_ptr->next->next;
	    free(temp_target_ptr);
	}
        current_ptr = current_ptr->next;
    }

    /*  ADJUST NUMBER OF TARGETS  */
    number_of_targets -= 1;

    /*  UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
    [self phoneBrowserHit:phoneList];

    return self;
}



- propagateAddTarget:(int)order
{
    phoneDescriptionPtr current_ptr;
    targetPtr current_target_ptr, temp_target_ptr = NULL;
    targetPtr new_target();
    int i, j;

    /*  MAKE SURE THERE ARE PHONES TO OPERATE ON  */
    if (number_of_phones <= 0)
	return self;

    /*  PROPAGATE ANY ADDITIONS OF PARAMETERS IN PHONE DESCRIPTION  */
    current_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	current_target_ptr = current_ptr->targetHead;
        if (order == 1) {
	    temp_target_ptr = current_ptr->targetHead;
	    current_ptr->targetHead = new_target();
            current_ptr->targetHead->next = temp_target_ptr;
	    current_ptr->targetHead->is_default = YES;
	    current_ptr->targetHead->value = [template parameterDefault:order];
	}
	else {
	    for (j = 1; j < order-1; j++)
	        current_target_ptr = current_target_ptr->next;

	    temp_target_ptr = current_target_ptr->next;
	    current_target_ptr->next = new_target();
	    current_target_ptr->next->next = temp_target_ptr;
	    current_target_ptr->next->is_default = YES;
	    current_target_ptr->next->value = [template parameterDefault:order];
	}
        current_ptr = current_ptr->next;
    }

    /*  ADJUST NUMBER OF TARGETS  */
    number_of_targets += 1;

    /*  UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
    [self phoneBrowserHit:phoneList];

    return self;
}



- propagateModParam:(int)old_order:(int)new_order
{
    phoneDescriptionPtr current_ptr;
    targetPtr current_target_ptr, temp_target_ptr = NULL;
    targetPtr new_target(), item_ptr = NULL;
    int i, j, warning_on_min = YES, warning_on_max = YES;
    float x;

    /*  MAKE SURE THERE ARE PHONES TO OPERATE ON  */
    if (number_of_phones <= 0)
	return self;

    /*  PROPAGATE ANY MODIFICATIONS OF PARAMETERS IN PHONE DESCRIPTION  */
    current_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	current_target_ptr = current_ptr->targetHead;

	/*  TAKE OUT ITEM FROM LIST  */
	if (old_order == 1) {
            item_ptr = current_ptr->targetHead;
	    current_ptr->targetHead = current_ptr->targetHead->next;
        }
	else {
	    for (j = 1; j < old_order-1; j++)
                current_target_ptr = current_target_ptr->next;

	    item_ptr = current_target_ptr->next;
	    current_target_ptr->next = current_target_ptr->next->next;
	}

        /*  PUT ITEM BACK IN PROPER PLACE IN LIST  */
        current_target_ptr = current_ptr->targetHead;
        if (new_order == 1) {
	    temp_target_ptr = current_ptr->targetHead;
	    current_ptr->targetHead = item_ptr;
            current_ptr->targetHead->next = temp_target_ptr;
    	}
        else {
	    for (j = 1; j < new_order-1; j++)
	        current_target_ptr = current_target_ptr->next;

	    temp_target_ptr = current_target_ptr->next;
	    current_target_ptr->next = item_ptr;
	    current_target_ptr->next->next = temp_target_ptr;
        }

	/*  put mods to item_ptr here  */
	/*  IF ITEM IS SET TO DEFAULT, SET ITEM TO NEW DEFAULT  */
	if (item_ptr->is_default)
	    item_ptr->value = [template parameterDefault:new_order];

	/*  IF ITEM VALUE IS LESS THAN PARAMETER MINIMUM,
	    RAISE IT TO MINIMUM, AND ISSUE WARNING  */
	if (item_ptr->value < (x = [template parameterMinimum:new_order])) {
	    if (warning_on_min) {
	      NXBeep();
	      if (NX_ALERTDEFAULT != NXRunAlertPanel("Warning",
		"The target for \"%s\" in phone \"%s\" is\nbeing raised from %.2f to new\nminimum of %.2f",
	       	"OK", "Ignore warnings", NULL,
		[template parameterSymbol:new_order],current_ptr->symbol, item_ptr->value, x))
			warning_on_min = NO;
	    }
	    item_ptr->value = x;
	}


	/*  IF ITEM VALUE IS GREATER THAN PARAMETER MAXIMUM,
	    LOWER IT TO MAXIMUM, AND ISSUE WARNING  */
	if (item_ptr->value > (x = [template parameterMaximum:new_order])) {
	    if (warning_on_max) {
	      NXBeep();
	      if (NX_ALERTDEFAULT != NXRunAlertPanel("Warning",
		"The target for \"%s\" in phone \"%s\" is\nbeing lowered from %.2f to new\nmaximum of %.2f",
	       	"OK", "Ignore warnings", NULL,
		[template parameterSymbol:new_order],current_ptr->symbol, item_ptr->value, x))
			warning_on_max = NO;
	    }
	    item_ptr->value = x;
	}

        current_ptr = current_ptr->next;
    }

    /*  UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
    [self phoneBrowserHit:phoneList];


    return self;
}



- propagateSetSample:(int)new_size
{
    phoneDescriptionPtr current_ptr;
    int i, warning_on = YES, phone_length, t_length, nint();

    /*  MAKE SURE THERE ARE PHONES TO OPERATE ON  */
    if (number_of_phones <= 0)
	return self;

    /*  PROPAGATE ANY MODIFICATIONS OF SAMPLE SIZE IN PHONE DESCRIPTION  */
    current_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	phone_length = current_ptr->duration;
	/*  ROUND UP CURRENT DURATION IF NEEDED  */
	if ((phone_length % new_size) != 0) {
	    current_ptr->duration = nint((double)phone_length/(double)new_size) * new_size;
	    if (warning_on) {
	      NXBeep();
	      if (NX_ALERTDEFAULT != NXRunAlertPanel("Warning",
		"The duration for phone \"%s\" is\nbeing rounded from %-d to %-d",
	       	"OK", "Ignore warnings", NULL,
		current_ptr->symbol, phone_length, current_ptr->duration))
			warning_on = NO;
	    }
	}
	/*  ROUND UP TRANSITION DURATION IF FIXED, AND IF NEEDED  */
	if (current_ptr->transition_duration.type == T_DURATION_FIXED) {
	    t_length = current_ptr->transition_duration.fixed;
	    if ((t_length % new_size) != 0) {
		current_ptr->transition_duration.fixed = 
		    nint((double)t_length/(double)new_size) * new_size;
		if (warning_on) {
		    NXBeep();
		    if (NX_ALERTDEFAULT != NXRunAlertPanel("Warning",
		      "The transition duration for phone \"%s\" is\nbeing rounded from %-d to %-d",
		      "OK", "Ignore warnings", NULL,
		       current_ptr->symbol, t_length, current_ptr->transition_duration.fixed))
			       warning_on = NO;
		}
	    }
	}
        current_ptr = current_ptr->next;
    }

    /*  UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
    [self phoneBrowserHit:phoneList];

    return self;
}



- (int)matchPhone:(char *)phone ToCategory:(char *)category
{
    phoneDescriptionPtr current_phone_ptr;
    categoryPtr current_category_ptr;
    int i;

    /*  GET PROPER POINTER TO PHONE DESCRIPTION  */
    current_phone_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	if (!strcmp(current_phone_ptr->symbol,phone))
	    break;
	current_phone_ptr = current_phone_ptr->next;
    }

    /*  IF PHONE IS OF CATEGORY, THEN RETURN 1, ELSE RETURN 0  */
    current_category_ptr = current_phone_ptr->categoryHead;
    for (i = 0; i < current_phone_ptr->number_of_categories; i++) {
	if (!strcmp(current_category_ptr->symbol,category))
	    return(1);
	current_category_ptr = current_category_ptr->next;
    }
    return(0);

}



- (float)getTarget:(char *)phone:(char *)parameter
{
    int i, j;
    phoneDescriptionPtr current_phoneDescription_ptr;
    targetPtr current_target_ptr;

    /*  SEARCH UNTIL PHONE MATCHES  */
    current_phoneDescription_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	if (!strcmp(current_phoneDescription_ptr->symbol,phone)) {
	    /*  SEARCH UNTIL PARAMETER MATCHES  */
	    current_target_ptr = current_phoneDescription_ptr->targetHead;
	    for (j = 0; j < number_of_targets; j++) {
		if (!strcmp([template parameterSymbol:j+1],parameter)) {
		    return(current_target_ptr->value);
		}
		current_target_ptr = current_target_ptr->next;
	    }
	}
	/*  UPDATE POINTER TO NEXT PHONE DESCRIPTION STRUCTURE  */
	current_phoneDescription_ptr = current_phoneDescription_ptr->next;
    }

    /*  IF WE GET HERE, THEN RETURN ERROR  */
    return(0.0);
}



- (int)getPhoneLength:(char *)phone
{
    int i;
    phoneDescriptionPtr current_phoneDescription_ptr;

    /*  SEARCH UNTIL PHONE MATCHES  */
    current_phoneDescription_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	if (!strcmp(current_phoneDescription_ptr->symbol,phone)) {
	    return(current_phoneDescription_ptr->duration);
	}
	/*  UPDATE POINTER TO NEXT PHONE DESCRIPTION STRUCTURE  */
	current_phoneDescription_ptr = current_phoneDescription_ptr->next;
    }

    /*  IF WE GET HERE, THEN RETURN ERROR  */
    return(0);

}



- (int)getTransitionType:(char *)phone
{
    int i;
    phoneDescriptionPtr current_phoneDescription_ptr;

    /*  SEARCH UNTIL PHONE MATCHES  */
    current_phoneDescription_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	if (!strcmp(current_phoneDescription_ptr->symbol,phone)) {
	    return(current_phoneDescription_ptr->transition_duration.type);
	}
	/*  UPDATE POINTER TO NEXT PHONE DESCRIPTION STRUCTURE  */
	current_phoneDescription_ptr = current_phoneDescription_ptr->next;
    }

    /*  IF WE GET HERE, THEN RETURN ERROR  */
    return(-1);
}



- (int)getTransitionDurationFixed:(char *)phone
{
    int i;
    phoneDescriptionPtr current_phoneDescription_ptr;

    /*  SEARCH UNTIL PHONE MATCHES  */
    current_phoneDescription_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	if (!strcmp(current_phoneDescription_ptr->symbol,phone)) {
	    return(current_phoneDescription_ptr->transition_duration.fixed);
	}
	/*  UPDATE POINTER TO NEXT PHONE DESCRIPTION STRUCTURE  */
	current_phoneDescription_ptr = current_phoneDescription_ptr->next;
    }

    /*  IF WE GET HERE, THEN RETURN ERROR  */
    return(-1);
}



- (float)getTransitionDurationProp:(char *)phone
{
    int i;
    phoneDescriptionPtr current_phoneDescription_ptr;

    /*  SEARCH UNTIL PHONE MATCHES  */
    current_phoneDescription_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	if (!strcmp(current_phoneDescription_ptr->symbol,phone)) {
	    return(current_phoneDescription_ptr->transition_duration.prop);
	}
	/*  UPDATE POINTER TO NEXT PHONE DESCRIPTION STRUCTURE  */
	current_phoneDescription_ptr = current_phoneDescription_ptr->next;
    }

    /*  IF WE GET HERE, THEN RETURN ERROR  */
    return(-1.0);
}



- saveToFile:(FILE *)fp1
{
    int i, j;
    phoneDescriptionPtr current_phoneDescription_ptr;
    targetPtr current_target_ptr;
    categoryPtr current_category_ptr;

    /*  WRITE PHONE DESCRIPTION TO FILE  */
    fwrite((char *)&number_of_phones,sizeof(number_of_phones),1,fp1);
    fwrite((char *)&number_of_targets,sizeof(number_of_targets),1,fp1);
    current_phoneDescription_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	/*  WRITE OUT SYMBOL AND DURATIONS  */
	fwrite((char *)&(current_phoneDescription_ptr->symbol),SYMBOL_LENGTH_MAX+1,1,fp1);
	fwrite((char *)&(current_phoneDescription_ptr->duration),sizeof(int),1,fp1);
	fwrite((char *)&(current_phoneDescription_ptr->transition_duration.type),
	       sizeof(int),1,fp1);
	fwrite((char *)&(current_phoneDescription_ptr->transition_duration.fixed),
	       sizeof(int),1,fp1);
	fwrite((char *)&(current_phoneDescription_ptr->transition_duration.prop),
	       sizeof(float),1,fp1);

	/*  WRITE OUT TARGETS  */
	current_target_ptr = current_phoneDescription_ptr->targetHead;
	for (j = 0; j < number_of_targets; j++) {
	    fwrite((char *)&(current_target_ptr->is_default),sizeof(int),1,fp1);
	    fwrite((char *)&(current_target_ptr->value),sizeof(float),1,fp1);

	    current_target_ptr = current_target_ptr->next;
	}

	/*  WRITE OUT CATEGORIES  */
	fwrite((char *)&(current_phoneDescription_ptr->number_of_categories),sizeof(int),1,fp1);

	current_category_ptr = current_phoneDescription_ptr->categoryHead;
	for (j = 0; j < (current_phoneDescription_ptr->number_of_categories); j++) {
	    fwrite((char *)&(current_category_ptr->symbol),SYMBOL_LENGTH_MAX+1,1,fp1);
	    current_category_ptr = current_category_ptr->next;
	}

	/*  UPDATE POINTER TO NEXT PHONE DESCRIPTION STRUCTURE  */
	current_phoneDescription_ptr = current_phoneDescription_ptr->next;
    }

    return self;
}


- ReadFromFile:(FILE *)fp1
{
    int i, j;
    phoneDescriptionPtr current_phoneDescription_ptr, temp_phoneDescription_ptr;
    phoneDescriptionPtr new_phoneDescription();
    targetPtr current_target_ptr = NULL, temp_target_ptr, new_target();
    categoryPtr current_category_ptr = NULL, temp_category_ptr, new_category();


    /*  FIRST FREE ALL CURRENT MEMORY, IF NEEDED  */
    current_phoneDescription_ptr = phoneDescriptionHead;
    for (i = 0; i < number_of_phones; i++) {
	/*  FREE ALL TARGETS  */
	current_target_ptr = current_phoneDescription_ptr->targetHead;
	for (j = 0; j < number_of_targets; j++) {
	    temp_target_ptr = current_target_ptr->next;
	    free(current_target_ptr);
	    current_target_ptr = temp_target_ptr;
	}
	/*  FREE ALL CATEGORIES  */
	current_category_ptr = current_phoneDescription_ptr->categoryHead;
	for (j = 0; j < (current_phoneDescription_ptr->number_of_categories); j++) {
	    temp_category_ptr = current_category_ptr->next;
	    free(current_category_ptr);
	    current_category_ptr = temp_category_ptr;
	}
	/*  FREE THE PHONE DESCRIPTION STRUCTURE ITSELF  */
	temp_phoneDescription_ptr = current_phoneDescription_ptr->next;
	free(current_phoneDescription_ptr);
	current_phoneDescription_ptr = temp_phoneDescription_ptr;
    }


    /*  READ # OF PHONES AND TARGETS FROM FILE  */
    fread((char *)&number_of_phones,sizeof(number_of_phones),1,fp1);
    fread((char *)&number_of_targets,sizeof(number_of_targets),1,fp1);

    /*  READ PHONE DESCRIPTION FROM FILE  */
    phoneDescriptionHead = NULL;
    for (i = 0; i < number_of_phones; i++) {
	/*  ALLOCATE NEW STRUCTURE  */
	if (i == 0) {
	    phoneDescriptionHead = current_phoneDescription_ptr = new_phoneDescription();
	}
	else {
	    current_phoneDescription_ptr->next = new_phoneDescription();
	    current_phoneDescription_ptr = current_phoneDescription_ptr->next;	    
	}

	/*  READ SYMBOL AND DURATIONS FROM FILE  */
	fread((char *)&(current_phoneDescription_ptr->symbol),SYMBOL_LENGTH_MAX+1,1,fp1);
	fread((char *)&(current_phoneDescription_ptr->duration),sizeof(int),1,fp1);
	fread((char *)&(current_phoneDescription_ptr->transition_duration.type),
	       sizeof(int),1,fp1);
	fread((char *)&(current_phoneDescription_ptr->transition_duration.fixed),
	       sizeof(int),1,fp1);
	fread((char *)&(current_phoneDescription_ptr->transition_duration.prop),
	       sizeof(float),1,fp1);

	/*  READ TARGETS IN FROM FILE  */
	current_phoneDescription_ptr->targetHead = NULL;
	for (j = 0; j < number_of_targets; j++) {
	    /*  ALLOCATE NEW STRUCTURE  */
	    if (j == 0) {
		current_phoneDescription_ptr->targetHead = current_target_ptr = 
		    new_target();
	    }
	    else {
		current_target_ptr->next = new_target();
		current_target_ptr = current_target_ptr->next;	    
	    }
	    /*  READ IN DATA FROM FILE  */
	    fread((char *)&(current_target_ptr->is_default),sizeof(int),1,fp1);
	    fread((char *)&(current_target_ptr->value),sizeof(float),1,fp1);
	    /*  SET POINTER TO NEXT ITEM TO NULL  */
	    current_target_ptr->next = NULL;
	}

	/*  READ IN CATEGORIES FROM FILE  */
	current_phoneDescription_ptr->categoryHead = NULL;
	fread((char *)&(current_phoneDescription_ptr->number_of_categories),sizeof(int),1,fp1);
	for (j = 0; j < (current_phoneDescription_ptr->number_of_categories); j++) {
	    /*  ALLOCATE NEW STRUCTURE  */
	    if (j == 0) {
		current_phoneDescription_ptr->categoryHead = current_category_ptr = 
		    new_category();
	    }
	    else {
		current_category_ptr->next = new_category();
		current_category_ptr = current_category_ptr->next;	    
	    }
	    /*  READ IN DATA FROM FILE  */
	    fread((char *)&(current_category_ptr->symbol),SYMBOL_LENGTH_MAX+1,1,fp1);
	    /*  SET POINTER TO NEXT ITEM TO NULL  */
	    current_category_ptr->next = NULL;
	}

	/*  SET POINTER TO NEXT ITEM TO NULL  */
	current_phoneDescription_ptr->next = NULL;
    }


    /*  RESET DISPLAY  */
    /*  RELOAD LIST INTO BROWSER  */
    [phoneList loadColumnZero];

    /*  SCROLL TO FIRST ITEM, SO IT CAN BE SEEN  */
    [[phoneList matrixInColumn:0] scrollCellToVisible:0 :0];

    /*  SELECT THE FIRST ITEM  */
    [[phoneList matrixInColumn:0] selectCellAt:0 :0];
    [self phoneBrowserHit:phoneList];

    return self;
}



targetPtr new_target()
{
return ( (targetPtr) malloc(sizeof(target)) );
}

categoryPtr new_category()
{
return ( (categoryPtr) malloc(sizeof(category)) );
}

phoneDescriptionPtr new_phoneDescription()
{
return ( (phoneDescriptionPtr) malloc(sizeof(phoneDescription)) );
}


int nint(value)
        double value;
{
double remainder;
int tr_value;

tr_value = (int)value;
remainder = value - (double)tr_value;
if (remainder >= 0.5)
        return(tr_value + 1);
else if (remainder <= -0.5)
        return(tr_value - 1);
else
        return(tr_value);
}

@end
