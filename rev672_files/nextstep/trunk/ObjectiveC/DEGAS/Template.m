
/* Generated by Interface Builder */

#import "Template.h"
#import "Categories.h"
#import "PhoneDescription.h"
#import "Rule.h"
#import "FileManager.h"
#import "Generate.h"
#import "Synthesize.h"
#import "reserved_symbol.h"
#import <appkit/appkit.h>

@implementation Template

- appDidInit:sender
{
	parameterList = [[ParameterList alloc] initCount:20];

	/* INITIALIZE POINTERS TO PHONE LIST  */
	number_of_phones = 0;
	phoneHead = NULL;

	/* INITIALIZE POINTERS TO PARAMETER LIST  */
	number_of_parameters = 0;
	parameterHead = NULL;

	/* SET NUMBER OF PHONES TO ZERO  */
	[phoneTotal setIntValue:number_of_phones];

	/* SET NUMBER OF PARAMETERS TO ZERO  */
	[parameterTotal setIntValue:number_of_parameters];

	/* SET SAMPLE VALUE TO DEFAULT  */
	sampleSize = SAMPLE_SIZE_DEF;
	[setDisplay setIntValue:sampleSize];

	/* SET TARGET AND ACTION OF PHONE BROWSER  */
	[phoneBrowser setTarget:self];
	[phoneBrowser setAction:(SEL)(@selector(phoneBrowserHit:))];
	[phoneBrowser setDoubleAction:(SEL)(@selector(phoneBrowserDoubleHit:))];
	phoneCurrentRow = (-1);
	[phoneModButton setEnabled:0];

	/* SET TARGET AND ACTION OF PARAMETER BROWSER  */
	[parameterBrowser setTarget:self];
	[parameterBrowser setAction:(SEL)(@selector(parameterBrowserHit:))];
	[parameterBrowser setDoubleAction:(SEL)(@selector(parameterBrowserDoubleHit:))];
	parameterCurrentRow = (-1);
	[parameterModButton setEnabled:0];

	/* SET FONT OF PHONE AND PARAMETER BROWSERS  */
	fontObj = [Font newFont:FONTNAME size:FONTSIZE];
	[[phoneBrowser matrixInColumn:0] setFont:fontObj];
	[[parameterBrowser matrixInColumn:0] setFont:fontObj];

		/* INITIALIZE OTHER PROGRAM OBJECTS  */
	[categories appDidInit:self];
	[phoneDescriptionObj appDidInit:self];
	[ruleObj appDidInit:self];
	[generate appDidInit:self];
	[synthesizeObj appDidInit:self];
	[fileManager appDidInit:self];

	return self;
}


- setTitleBar:(char *)currentPath
{
char buffer[MAXPATHLEN + 13];

	/* ADD FILENAME TO TITLE OF EACH WINDOW  */
	strcpy(buffer, "Template:   ");
	strcat(buffer, currentPath);
	[templateWindow setTitle:(const char *)buffer];

	return self;
}



- phoneBrowserHit:sender
{
	/* SET VARIABLE TO INDICATE SELECTED ROW  */
	phoneCurrentRow = [[sender matrixInColumn:0] selectedRow];

	/* ENABLE MODIFY BUTTON  */
	[phoneModButton setEnabled:1];
	return self;
}



- phoneBrowserDoubleHit:sender
{
	/* SAME AS USING THE MODIFY BUTTON  */
	[self phoneModify:self];
	return self;
}


- parameterBrowserHit:sender
{
	/* SET VARIABLE TO INDICATE SELECTED ROW  */
	parameterCurrentRow = [[sender matrixInColumn:0] selectedRow];

	/* ENABLE MODIFY BUTTON  */
	[parameterModButton setEnabled:1];
	return self;
}



- parameterBrowserDoubleHit:sender
{
	/* SAME AS USING THE MODIFY BUTTON  */
	[self parameterModify:self];
	return self;
}



- (int)browser:sender fillMatrix:matrix inColumn:(int)column
{
	/* DELEGATE METHOD FOR NXBROWSER  */
	/* MERELY UPDATE THE BROWSER WITH THE NUMBER OF ITEMS  */
	if (sender == phoneBrowser)
	{
		return ([[phoneDescriptionObj phoneList] count]);
	}
	else
	if (sender == parameterBrowser)
	{
		return ([parameterList count]);
	}
	else
		return (0);
}

- browser:sender loadCell:cell atRow:(int)row inColumn:(int)column
{
/*
 * NXBROWSER DELEGATE METHOD WHICH UPDATES PARTICULAR CELLS FROM THE DATA STORED IN LINKED LISTS  
 */
int i, len;
char string[ROW_NUMBER_MAX + SYMBOL_LENGTH_MAX + (3 * FLOAT_LENGTH_MAX) + 1];
char s[2 * FLOAT_LENGTH_MAX];
Phone *tempPhone;
Parameter *tempParameter;

	if (sender == phoneBrowser)
	{
		tempPhone = [[phoneDescriptionObj phoneList] objectAt:row];
		/* PUT ROW NUMBER AND SYMBOL IN CELL  */
		/* SEARCH THROUGH LIST TILL ITEM FOUND  */
		sprintf(string, "%-d.", row + 1);
		len = strlen(string);
		for (i = 0; i < (ROW_NUMBER_MAX - len); i++)
			strcat(string, " ");
		strcat(string, [tempPhone symbol]);
		[cell setStringValue:string];
	}
	else
	if (sender == parameterBrowser)
	{
		tempParameter = [parameterList objectAt:row];

		/* PUT ROW NUMBER, SYMBOL AND VALUES IN CELL  */
		sprintf(string, "%-d.", row + 1);
		len = strlen(string);
		for (i = 0; i < (ROW_NUMBER_MAX - len); i++)
			strcat(string, " ");
		strcat(string, [tempParameter symbol]);

		len = strlen(string);
		for (i = 0; i < (COLUMN1 - len); i++)
			strcat(string, " ");
		sprintf(s, "%-.2f", [tempParameter minimum]);
		strncat(string, s, FLOAT_LENGTH_MAX);

		len = strlen(string);
		for (i = 0; i < (COLUMN2 - len); i++)
			strcat(string, " ");
		sprintf(s, "%-.2f", [tempParameter maximum] );
		strncat(string, s, FLOAT_LENGTH_MAX);

		len = strlen(string);
		for (i = 0; i < (COLUMN3 - len); i++)
			strcat(string, " ");
		sprintf(s, "%-.2f", [tempParameter defaultValue]);
		strncat(string, s, FLOAT_LENGTH_MAX);

		[cell setStringValue:string];
	}

	/* INDICATE THAT THE CELL IS A LEAF NODE  */
	[cell setLeaf:YES];
	return self;
}




- phoneAdd:sender
{
	/* PUT IN DEFAULT VALUES INTO PHONE FIELD  */
	[addPhoneField setStringValue:PHONE_SYMBOL_DEF at:PHONE_SYMBOL];

	/* PUT IN DEFAULT FOR ORDER  */
	if (phoneCurrentRow == (-1))
		[addPhoneField setIntValue:([[phoneDescriptionObj phoneList] count] + 1) at :PHONE_ORDER];
	else
		[addPhoneField setIntValue:phoneCurrentRow at:PHONE_ORDER];

	/* PUT CURSOR IN FIRST FIELD  */
	[addPhoneField selectTextAt:PHONE_SYMBOL];

	/* PUT PANEL IN PROPER RELATION TO TEMPLATE WINDOW  */
	[templateWindow getFrame:(NXRect *)&r];
	[addPhonePanel moveTo:(NXCoord)r.origin.x + PHONE_X_OFFSET
	 :(NXCoord)r.origin.y + PHONE_Y_OFFSET];

	/* MAKE PANEL VISIBLE  */
	[addPhonePanel makeKeyAndOrderFront:self];

	/* MAKE SURE PANEL IS MODAL  */
	[NXApp runModalFor:addPhonePanel];
	return self;
}

- phoneModify:sender
{
Phone *tempPhone;

	/* MAKE SURE A PHONE HAS BEEN SELECTED  */
	if (phoneCurrentRow == (-1))
	{
		NXBeep();
		return self;
	}

	/* PUT PANEL IN PROPER RELATION TO TEMPLATE WINDOW  */
	[templateWindow getFrame:(NXRect *)&r];
	[modifyPhonePanel moveTo:(NXCoord)r.origin.x + PHONE_X_OFFSET
	 :(NXCoord)r.origin.y + PHONE_Y_OFFSET];

	/* PUT IN VALUES FOR PHONE CHOSEN  */
	tempPhone = [[phoneDescriptionObj phoneList] objectAt:phoneCurrentRow];

	[modPhoneField setStringValue:[tempPhone symbol] at:PHONE_SYMBOL];
	[modPhoneField setIntValue:phoneCurrentRow + 1 at:PHONE_ORDER];

	/* PUT CURSOR AT SYMBOL FIELD  */
	[modPhoneField selectTextAt:PHONE_SYMBOL];

	/* MAKE PANEL VISIBLE  */
	[modifyPhonePanel makeKeyAndOrderFront:self];

	/* MAKE SURE PANEL IS MODAL  */
	[NXApp runModalFor:modifyPhonePanel];
	return self;
}

- parameterAdd:sender
{
	/* PUT DEFAULT VALUES INTO FIELDS  */
	[addParameterField setStringValue:PARAM_SYMBOL_DEF at:PARAM_SYMBOL];
	[addParameterField setFloatValue:PARAM_MIN_DEF at:PARAM_MIN];
	[addParameterField setFloatValue:PARAM_MAX_DEF at:PARAM_MAX];
	[addParameterField setFloatValue:PARAM_DEF_DEF at:PARAM_DEF];

	/* PUT IN DEFAULT FOR ORDER  */
	if (parameterCurrentRow == (-1))
		[addParameterField setIntValue:([parameterList count] + 1) at :PARAM_ORDER];
	else
		[addParameterField setIntValue:parameterCurrentRow at:PARAM_ORDER];

	/* PUT CURSOR ON THE SYMBOL FIELD  */
	[addParameterField selectTextAt:PARAM_SYMBOL];

	/* PUT PANEL IN PROPER RELATION TO TEMPLATE WINDOW  */
	[templateWindow getFrame:(NXRect *)&r];
	[addParameterPanel moveTo:(NXCoord)r.origin.x + PARAM_X_OFFSET
	 :(NXCoord)r.origin.y + PARAM_Y_OFFSET];

	/* MAKE PANEL VISIBLE  */
	[addParameterPanel makeKeyAndOrderFront:self];

	/* MAKE SURE PANEL IS MODAL  */
	[NXApp runModalFor:addParameterPanel];

	return self;
}

- parameterModify:sender
{
Parameter *tempParameter;

	/* MAKE SURE A PARAMETER HAS BEEN SELECTED  */
	if (parameterCurrentRow == (-1))
	{
		NXBeep();
		return self;
	}

	/* PUT IN VALUES FOR PARAMETER CHOSEN  */
	tempParameter = [parameterList objectAt:parameterCurrentRow];

	[modParameterField setStringValue:[tempParameter symbol] at:PARAM_SYMBOL];
	[modParameterField setFloatValue:[tempParameter minimum] at:PARAM_MIN];
	[modParameterField setFloatValue:[tempParameter maximum] at:PARAM_MAX];
	[modParameterField setFloatValue:[tempParameter defaultValue] at:PARAM_DEF];
	[modParameterField setIntValue:parameterCurrentRow + 1 at:PARAM_ORDER];

	/* PUT CURSOR AT SYMBOL FIELD  */
	[modParameterField selectTextAt:PARAM_SYMBOL];

	/* PUT PANEL IN PROPER RELATION TO TEMPLATE WINDOW  */
	[templateWindow getFrame:(NXRect *)&r];
	[modifyParameterPanel moveTo:(NXCoord)r.origin.x + PARAM_X_OFFSET
	 :(NXCoord)r.origin.y + PARAM_Y_OFFSET];

	/* MAKE PANEL VISIBLE  */
	[modifyParameterPanel makeKeyAndOrderFront:self];

	/* MAKE SURE PANEL IS MODAL  */
	[NXApp runModalFor:modifyParameterPanel];
	return self;
}



- setSample:sender
{
	/* PUT IN CURRENT VALUE INTO FIELD  */
	[setSampleField setIntValue:sampleSize at:0];

	/* PUT CURSOR IN FIRST FIELD  */
	[setSampleField selectTextAt:0];

	/* PUT PANEL IN PROPER RELATION TO TEMPLATE WINDOW  */
	[templateWindow getFrame:(NXRect *)&r];
	[setSamplePanel moveTo:(NXCoord)r.origin.x + SAMPLE_X_OFFSET
	 :(NXCoord)r.origin.y + SAMPLE_Y_OFFSET];

	/* MAKE PANEL VISIBLE  */
	[setSamplePanel makeKeyAndOrderFront:self];

	/* MAKE SURE PANEL IS MODAL  */
	[NXApp runModalFor:setSamplePanel];
	return self;
}



- addPhoneCancel:sender
{
	/* CLOSE THE PANEL  */
	[addPhonePanel close];
	[NXApp stopModal];
	return self;
}

- addPhoneAdd:sender
{
int order, i, len;
char string[SYMBOL_LENGTH_MAX + 1];

	/* MAKE SURE STRING CONTAINS NO BLANKS  */
	strncpy(string,[addPhoneField stringValueAt:PHONE_SYMBOL], SYMBOL_LENGTH_MAX);
	string[SYMBOL_LENGTH_MAX] = '\0';
	len = strlen(string);
	if (len == 0)
	{
		NXBeep();
		NXRunAlertPanel("Illegal", "Symbol cannot contain blanks.",
				"OK", NULL, NULL);
		/* PUT CURSOR IN FIRST FIELD  */
		[addPhoneField selectTextAt:PHONE_SYMBOL];
		return self;
	}
	for (i = 0; i < len; i++)
	{
		if (string[i] == ' ')
		{
			NXBeep();
			NXRunAlertPanel("Illegal", "Symbol cannot contain blanks.",
					"OK", NULL, NULL);
			/* PUT CURSOR IN FIRST FIELD  */
			[addPhoneField selectTextAt:PHONE_SYMBOL];
			return self;
		}
	}

	/* MAKE SURE SYMBOL IS UNIQUE  */

	if ([[phoneDescriptionObj phoneList] findPhone:string])
	{
		NXBeep();
		NXRunAlertPanel("Illegal", "Symbol \"%s\" has already\nbeen used.",
				"OK", NULL, NULL, string);
		/* PUT CURSOR IN FIRST FIELD  */
		[addPhoneField selectTextAt:PHONE_SYMBOL];
		return self;
	}

	/* MAKE SURE SYMBOL IS NOT USED AS A CATEGORY  */
	if ((i = [categories usedAsCategorySymbol:string]) != (-1))
	{
		NXBeep();
		NXRunAlertPanel("Illegal",
				"Symbol \"%s\" has already been used\nas a category symbol\nat position %-d.",
				"OK", NULL, NULL, string, i);
		/* PUT CURSOR IN FIRST FIELD  */
		[addPhoneField selectTextAt:PHONE_SYMBOL];
		return self;
	}

	/* MAKE SURE SYMBOL IS NOT RESERVED SYMBOL  */
	if (reserved_symbol(string))
	{
		NXBeep();
		NXRunAlertPanel("Illegal",
				"Symbol \"%s\" is a reserved symbol.",
				"OK", NULL, NULL, string);
		/* PUT CURSOR IN FIRST FIELD  */
		[addPhoneField selectTextAt:PHONE_SYMBOL];
		return self;
	}

	/* GET DESIRED ORDER OF PHONE  */
	order = [addPhoneField intValueAt:PHONE_ORDER];

	/* MAKE SURE ORDER IS IN RANGE  */
	if (order > [[phoneDescriptionObj phoneList] count])
		order = [[phoneDescriptionObj phoneList] count];
	else
	if (order < 0)
		order = 0;

	/* ADD NEW PHONE INTO Phone LIST  */
	[phoneDescriptionObj addPhone:string order: order];

	/* UPDATE TOTAL NUMBER OF PHONES  */
	[phoneTotal setIntValue:[[phoneDescriptionObj phoneList] count]];
	phoneCurrentRow = (-1);

	/* DISABLE MOD BUTTON  */
	[phoneModButton setEnabled:0];

	/* RELOAD LIST INTO BROWSER  */
	[phoneBrowser loadColumnZero];

	/* SCROLL TO LATEST ITEM, SO IT CAN BE SEEN  */
	[[phoneBrowser matrixInColumn:0] scrollCellToVisible:order :0];

	/* UPDATE DESIRED ORDER  */
	[addPhoneField setIntValue:[[phoneDescriptionObj phoneList] count] at :PHONE_ORDER];

	/* PUT CURSOR IN FIRST FIELD  */
	[addPhoneField selectTextAt:PHONE_SYMBOL];

	return self;
}



- modPhoneCancel:sender
{
	/* CLOSE THE PANEL  */
	[modifyPhonePanel close];
	[NXApp stopModal];
	return self;
}

- modPhoneDelete:sender
{
int i;
phoneStructPtr next_temp, current_ptr;

	/*
	 * GO TO STRUCT JUST BEFORE THE ONE TO DELETE, FREE STRUCT AND ADJUST LINKED LIST  
	 */
	if (phoneCurrentRow == 1)
	{
		next_temp = phoneHead;
		phoneHead = phoneHead->next;
		free(next_temp);
	}
	else
	{
		current_ptr = phoneHead;
		for (i = 1; i < phoneCurrentRow; i++)
		{
			if (i == phoneCurrentRow - 1)
			{
				next_temp = current_ptr->next;
				current_ptr->next = current_ptr->next->next;
				free(next_temp);
				break;
			}
			current_ptr = current_ptr->next;
		}
	}

	/* DELETE PHONE IN PHONE DESCRIPTION OBJECT  */
	[phoneDescriptionObj deletePhone:phoneCurrentRow];

	/* DECREMENT TOTAL NUMBER OF PHONES  */
	[phoneTotal setIntValue:--number_of_phones];
	i = phoneCurrentRow;
	if (i > number_of_phones)
		i--;
	phoneCurrentRow = 0;

	/* DISABLE MOD BUTTON  */
	[phoneModButton setEnabled:0];

	/* RELOAD LIST INTO BROWSER  */
	[phoneBrowser loadColumnZero];

	/* SCROLL TO ROW WHERE DELETION OCCURRED  */
	[[phoneBrowser matrixInColumn:0] scrollCellToVisible:i - 1:0];

	/* CLOSE PANEL  */
	[modifyPhonePanel close];
	[NXApp stopModal];
	return self;
}

- modPhoneOK:sender
{
int i, order, len;
phoneStructPtr next_temp, current_ptr, item_ptr;
char string[SYMBOL_LENGTH_MAX + 1];

	/* MAKE SURE STRING CONTAINS NO BLANKS  */
	strncpy(string,[modPhoneField stringValueAt:PHONE_SYMBOL], SYMBOL_LENGTH_MAX);
	string[SYMBOL_LENGTH_MAX] = '\0';
	len = strlen(string);
	if (len == 0)
	{
		NXBeep();
		NXRunAlertPanel("Illegal", "Symbol cannot contain blanks.",
				"OK", NULL, NULL);
		/* PUT CURSOR IN FIRST FIELD  */
		[modPhoneField selectTextAt:PHONE_SYMBOL];
		return self;
	}
	for (i = 0; i < len; i++)
	{
		if (string[i] == ' ')
		{
			NXBeep();
			NXRunAlertPanel("Illegal", "Symbol cannot contain blanks.",
					"OK", NULL, NULL);
			/* PUT CURSOR IN FIRST FIELD  */
			[modPhoneField selectTextAt:PHONE_SYMBOL];
			return self;
		}
	}

	/* MAKE SURE SYMBOL IS UNIQUE  */
	current_ptr = phoneHead;
	for (i = 0; i < number_of_phones; i++)
	{
		if (!strcmp(string, current_ptr->symbol) && (i != phoneCurrentRow - 1))
		{
			NXBeep();
			NXRunAlertPanel("Illegal", "Symbol \"%s\" has already\nbeen used at position %-d.",
					"OK", NULL, NULL, string, (i + 1));
			/* PUT CURSOR IN FIRST FIELD  */
			[modPhoneField selectTextAt:PHONE_SYMBOL];
			return self;
		}
		current_ptr = current_ptr->next;
	}

	/* MAKE SURE SYMBOL IS NOT USED AS A CATEGORY  */
	if ((i = [categories usedAsCategorySymbol:string]) != (-1))
	{
		NXBeep();
		NXRunAlertPanel("Illegal",
				"Symbol \"%s\" has already been used\nas a category symbol\nat position %-d.",
				"OK", NULL, NULL, string, i);
		/* PUT CURSOR IN FIRST FIELD  */
		[modPhoneField selectTextAt:PHONE_SYMBOL];
		return self;
	}

	/* MAKE SURE SYMBOL IS NOT RESERVED SYMBOL  */
	if (reserved_symbol(string))
	{
		NXBeep();
		NXRunAlertPanel("Illegal",
				"Symbol \"%s\" is a reserved symbol.",
				"OK", NULL, NULL, string);
		/* PUT CURSOR IN FIRST FIELD  */
		[modPhoneField selectTextAt:PHONE_SYMBOL];
		return self;
	}

	/* TAKE OUT ITEM FROM LIST  */
	if (phoneCurrentRow == 1)
	{
		item_ptr = phoneHead;
		phoneHead = phoneHead->next;
	}
	else
	{
		item_ptr = NULL;
		current_ptr = phoneHead;
		for (i = 1; i < phoneCurrentRow; i++)
		{
			if (i == phoneCurrentRow - 1)
			{
				item_ptr = current_ptr->next;
				current_ptr->next = current_ptr->next->next;
				break;
			}
			current_ptr = current_ptr->next;
		}
	}

	/* GET DESIRED ORDER OF PHONE  */
	order = [modPhoneField intValueAt:PHONE_ORDER];

	/* MAKE SURE ORDER IS IN RANGE  */
	if (order > number_of_phones)
		order = number_of_phones;
	else
	if (order <= 0)
		order = 1;

	/* ADD PHONE BACK INTO LINKED LIST USING NEW VALUES  */
	if (order == 1)
	{
		next_temp = phoneHead;
		phoneHead = item_ptr;
		phoneHead->next = next_temp;
		strcpy(phoneHead->symbol, string);
	}
	else
	{
		current_ptr = phoneHead;
		for (i = 1; i < order; i++)
		{
			if (i == (order - 1))
			{
				next_temp = current_ptr->next;
				current_ptr->next = item_ptr;
				current_ptr->next->next = next_temp;
				strcpy(current_ptr->next->symbol, string);
				break;
			}
			current_ptr = current_ptr->next;
		}
	}

	/* SEND MODIFICATION TO PHONE DESCRIPTION OBJECT  */
	[phoneDescriptionObj modPhone:string row:phoneCurrentRow order:order];

	phoneCurrentRow = 0;

	/* DISABLE MOD BUTTON  */
	[phoneModButton setEnabled:0];

	/* RELOAD LIST INTO BROWSER  */
	[phoneBrowser loadColumnZero];

	/* SCROLL TO CELL, SO IT CAN BE SEEN  */
	[[phoneBrowser matrixInColumn:0] scrollCellToVisible:order - 1:0];

	/* CLOSE PANEL  */
	[modifyPhonePanel close];
	[NXApp stopModal];
	return self;
}



- addParamCancel:sender
{
	[addParameterPanel close];
	[NXApp stopModal];
	return self;
}

- addParamAdd:sender
{
int order, i, len;
parameterStructPtr temp_next, current_ptr, new_parameterStruct();
char string[SYMBOL_LENGTH_MAX + 1];
float min, max, def;
Parameter *tempParameter;

	/* MAKE SURE STRING CONTAINS NO BLANKS  */
	strncpy(string,[addParameterField stringValueAt:PARAM_SYMBOL], SYMBOL_LENGTH_MAX);
	string[SYMBOL_LENGTH_MAX] = '\0';
	len = strlen(string);
	if (len == 0)
	{
		NXBeep();
		NXRunAlertPanel("Illegal", "Symbol cannot contain blanks.",
				"OK", NULL, NULL);
		/* PUT CURSOR ON THE SYMBOL FIELD  */
		[addParameterField selectTextAt:PARAM_SYMBOL];
		return self;
	}
	for (i = 0; i < len; i++)
	{
		if (string[i] == ' ')
		{
			NXBeep();
			NXRunAlertPanel("Illegal", "Symbol cannot contain blanks.",
					"OK", NULL, NULL);
			/* PUT CURSOR ON THE SYMBOL FIELD  */
			[addParameterField selectTextAt:PARAM_SYMBOL];
			return self;
		}
	}

	/* MAKE SURE SYMBOL IS UNIQUE  */
	if ([parameterList findParameter:string])
	{
		NXBeep();
		NXRunAlertPanel("Illegal", "Symbol \"%s\" has already\nbeen used.",
				"OK", NULL, NULL, string);
		/* PUT CURSOR ON THE SYMBOL FIELD  */
		[addParameterField selectTextAt:PARAM_SYMBOL];
		return self;
	}

	/* GET DESIRED ORDER OF PARAMETER  */
	order = [addParameterField intValueAt:PARAM_ORDER];

	/* MAKE SURE ORDER IS IN RANGE  */
	if (order > [parameterList count])
		order = [parameterList count];
	else
	if (order < 0)
		order = 0;

	/* MAKE SURE SUPPLIED VALUES ARE LEGAL  */
	min = [addParameterField floatValueAt:PARAM_MIN];
	max = [addParameterField floatValueAt:PARAM_MAX];
	def = [addParameterField floatValueAt:PARAM_DEF];
	if (min > max)
	{
		NXBeep();
		NXRunAlertPanel("Illegal", "Minimum is greater than maximum.",
				"OK", NULL, NULL);
		/* PUT CURSOR ON THE FIELD  */
		[addParameterField selectTextAt:PARAM_MIN];
		return self;
	}
	if ((def < min) || (def > max))
	{
		NXBeep();
		NXRunAlertPanel("Illegal", "Default value outside of range.",
				"OK", NULL, NULL);
		/* PUT CURSOR ON THE FIELD  */
		[addParameterField selectTextAt:PARAM_DEF];
		return self;
	}

	[parameterList addParameter: string min:min max:max def:def];

	/* UPDATE TOTAL NUMBER OF PARAMETERS  */
	[parameterTotal setIntValue:[parameterList count]];
	parameterCurrentRow = (-1);

	/* DISABLE MOD BUTTON  */
	[parameterModButton setEnabled:0];

	/* RELOAD LIST INTO BROWSER  */
	[parameterBrowser loadColumnZero];

	/* SCROLL TO LATEST ITEM, SO IT CAN BE SEEN  */
	[[parameterBrowser matrixInColumn:0] scrollCellToVisible:order :0 ];

	/* PUT DEFAULT VALUES INTO FIELDS  */
	[addParameterField setFloatValue:PARAM_MIN_DEF at:PARAM_MIN];
	[addParameterField setFloatValue:PARAM_MAX_DEF at:PARAM_MAX];
	[addParameterField setFloatValue:PARAM_DEF_DEF at:PARAM_DEF];

	/* UPDATE THE DESIRED PARAMETER ORDER  */
	[addParameterField setIntValue:([parameterList count] + 1) at :PARAM_ORDER];

	/* PUT CURSOR ON THE SYMBOL FIELD  */
	[addParameterField selectTextAt:PARAM_SYMBOL];

	/* PROPAGATE ADDITION OF PARAMETER INTO PHONE DESCRIPTION  */
	[phoneDescriptionObj propagateAddTarget:order];

	return self;
}



- modParamCancel:sender
{
	[NXApp stopModal];
	[modifyParameterPanel close];
	return self;
}

- modParamDelete:sender
{
int i;
parameterStructPtr next_temp, current_ptr;

	/*
	 * GO TO STRUCT JUST BEFORE THE ONE TO DELETE, FREE STRUCT AND ADJUST LINKED LIST  
	 */
	if (parameterCurrentRow == 1)
	{
		next_temp = parameterHead;
		parameterHead = parameterHead->next;
		free(next_temp);
	}
	else
	{
		current_ptr = parameterHead;
		for (i = 1; i < parameterCurrentRow; i++)
		{
			if (i == parameterCurrentRow - 1)
			{
				next_temp = current_ptr->next;
				current_ptr->next = current_ptr->next->next;
				free(next_temp);
				break;
			}
			current_ptr = current_ptr->next;
		}
	}

	/* PROPAGATE DELETION IN PHONE DESCRIPTION OBJECT  */
	[phoneDescriptionObj propagateDeleteTarget:parameterCurrentRow];

	/* DECREMENT TOTAL NUMBER OF PARAMETERS  */
	[parameterTotal setIntValue:--number_of_parameters];
	i = parameterCurrentRow;
	if (i > number_of_parameters)
		i--;
	parameterCurrentRow = 0;

	/* DISABLE MOD BUTTON  */
	[parameterModButton setEnabled:0];

	/* RELOAD LIST INTO BROWSER  */
	[parameterBrowser loadColumnZero];

	/* SCROLL TO ROW WHERE DELETION OCCURRED  */
	[[parameterBrowser matrixInColumn:0] scrollCellToVisible:i - 1:0];

	/* CLOSE PANEL  */
	[modifyParameterPanel close];
	[NXApp stopModal];

	return self;
}

- modParamOK:sender
{
int i, order, len;
parameterStructPtr next_temp, current_ptr, item_ptr;
char string[SYMBOL_LENGTH_MAX + 1];
float min, max, def;

	/* MAKE SURE STRING CONTAINS NO BLANKS  */
	strncpy(string,[modParameterField stringValueAt:PARAM_SYMBOL], SYMBOL_LENGTH_MAX);
	string[SYMBOL_LENGTH_MAX] = '\0';
	len = strlen(string);
	if (len == 0)
	{
		NXBeep();
		NXRunAlertPanel("Illegal", "Symbol cannot contain blanks.",
				"OK", NULL, NULL);
		/* PUT CURSOR ON THE SYMBOL FIELD  */
		[modParameterField selectTextAt:PARAM_SYMBOL];
		return self;
	}
	for (i = 0; i < len; i++)
	{
		if (string[i] == ' ')
		{
			NXBeep();
			NXRunAlertPanel("Illegal", "Symbol cannot contain blanks.",
					"OK", NULL, NULL);
			/* PUT CURSOR ON THE SYMBOL FIELD  */
			[modParameterField selectTextAt:PARAM_SYMBOL];
			return self;
		}
	}

	/* MAKE SURE SYMBOL IS UNIQUE  */
	current_ptr = parameterHead;
	for (i = 0; i < number_of_parameters; i++)
	{
		if (!strcmp(string, current_ptr->symbol) && (i != parameterCurrentRow - 1))
		{
			NXBeep();
			NXRunAlertPanel("Illegal", "Symbol \"%s\" has already\nbeen used at position %-d.",
					"OK", NULL, NULL, string, (i + 1));
			/* PUT CURSOR ON THE SYMBOL FIELD  */
			[modParameterField selectTextAt:PARAM_SYMBOL];
			return self;
		}
		current_ptr = current_ptr->next;
	}

	/* MAKE SURE SUPPLIED VALUES ARE LEGAL  */
	min = [modParameterField floatValueAt:PARAM_MIN];
	max = [modParameterField floatValueAt:PARAM_MAX];
	def = [modParameterField floatValueAt:PARAM_DEF];
	if (min > max)
	{
		NXBeep();
		NXRunAlertPanel("Illegal", "Minimum is greater than maximum.",
				"OK", NULL, NULL);
		/* PUT CURSOR ON THE SYMBOL FIELD  */
		[modParameterField selectTextAt:PARAM_MIN];
		return self;
	}
	if ((def < min) || (def > max))
	{
		NXBeep();
		NXRunAlertPanel("Illegal", "Default value outside of range.",
				"OK", NULL, NULL);
		/* PUT CURSOR ON THE SYMBOL FIELD  */
		[modParameterField selectTextAt:PARAM_DEF];
		return self;
	}

	/* TAKE OUT ITEM FROM LIST  */
	if (parameterCurrentRow == 1)
	{
		item_ptr = parameterHead;
		parameterHead = parameterHead->next;
	}
	else
	{
		item_ptr = NULL;
		current_ptr = parameterHead;
		for (i = 1; i < parameterCurrentRow; i++)
		{
			if (i == parameterCurrentRow - 1)
			{
				item_ptr = current_ptr->next;
				current_ptr->next = current_ptr->next->next;
				break;
			}
			current_ptr = current_ptr->next;
		}
	}

	/* GET DESIRED ORDER OF PARAMETER  */
	order = [modParameterField intValueAt:PARAM_ORDER];

	/* MAKE SURE ORDER IS IN RANGE  */
	if (order > number_of_parameters)
		order = number_of_parameters;
	else
	if (order <= 0)
		order = 1;

	/* ADD PARAMETER BACK INTO LINKED LIST USING NEW VALUES  */
	if (order == 1)
	{
		next_temp = parameterHead;
		parameterHead = item_ptr;
		parameterHead->next = next_temp;
		strcpy(parameterHead->symbol, string);
		parameterHead->minimum = min;
		parameterHead->maximum = max;
		parameterHead->Default = def;
	}
	else
	{
		current_ptr = parameterHead;
		for (i = 1; i < order; i++)
		{
			if (i == (order - 1))
			{
				next_temp = current_ptr->next;
				current_ptr->next = item_ptr;
				current_ptr->next->next = next_temp;
				strcpy(current_ptr->next->symbol, string);
				current_ptr->next->minimum = min;
				current_ptr->next->maximum = max;
				current_ptr->next->Default = def;
				break;
			}
			current_ptr = current_ptr->next;
		}
	}

	/* PROPAGATE MODIFICATIONS INTO PHONE DESCRIPTION OBJECT  */
	[phoneDescriptionObj propagateModParam:parameterCurrentRow :order];

	parameterCurrentRow = 0;

	/* DISABLE MOD BUTTON  */
	[parameterModButton setEnabled:0];

	/* RELOAD LIST INTO BROWSER  */
	[parameterBrowser loadColumnZero];

	/* SCROLL TO CELL, SO IT CAN BE SEEN  */
	[[parameterBrowser matrixInColumn:0] scrollCellToVisible:order - 1:0];

	/* CLOSE PANEL  */
	[modifyParameterPanel close];
	[NXApp stopModal];

	return self;
}



- setSampleCancel:sender
{
	/* CLOSE THE PANEL  */
	[setSamplePanel close];
	[NXApp stopModal];
	return self;
}

- setSampleSet:sender
{
	/* GET VALUE FROM FIELD  */
	sampleSize = [setSampleField intValue];

	/* MAKE SURE VALUE IS IN RANGE  */
	if (sampleSize < SAMPLE_SIZE_MIN)
		sampleSize = SAMPLE_SIZE_MIN;
	if (sampleSize > SAMPLE_SIZE_MAX)
		sampleSize = SAMPLE_SIZE_MAX;

	/* DISPLAY NEW VALUE  */
	[setDisplay setIntValue:sampleSize];

	/* PROPAGATE CHANGE OF SAMPLE SIZE IN PHONE DESCRIPTION  */
	[phoneDescriptionObj propagateSetSample:sampleSize];

	/* CLOSE PANEL  */
	[setSamplePanel close];
	[NXApp stopModal];

	return self;
}



- loadDefaultTemplate:sender
{
	return self;
}

- loadTemplateFromFile:sender
{
	return self;
}



- phoneSelect:sender
{
	return self;
}

- parameterSelect:sender
{
	return self;
}

- setSampleSize:sender
{
	return self;
}


- (int)usedAsPhoneSymbol:(char *)string
{
phoneStructPtr current_ptr;
int i;

	/* MAKE SURE SYMBOL IS UNIQUE  */
	current_ptr = phoneHead;
	for (i = 0; i < number_of_phones; i++)
	{
		if (!strcmp(string, current_ptr->symbol))
		{
			return (i + 1);
		}
		current_ptr = current_ptr->next;
	}

	return (0);
}



- (int)sampleValue;
{
	return sampleSize;
}



- (int)numberOfPhones
{
	return number_of_phones;
}

- (char *)phoneSymbol:(int)number
{
phoneStructPtr current_ptr;
int i;

	current_ptr = phoneHead;
	for (i = 1; i < ((number_of_phones < number) ? number_of_phones : number); i++)
		current_ptr = current_ptr->next;

	return (current_ptr->symbol);
}



- (int)numberOfParameters;
{
	return [parameterList count];
}



- (char *)parameterSymbol:(int)number
{
	return ([[parameterList objectAt:number] symbol]);
}

- (float)parameterMinimum:(int)number
{
	return ([[parameterList objectAt:number] minimum]);
}

- (float)parameterMaximum:(int)number
{
	return ([[parameterList objectAt:number] maximum]);
}

- (float)parameterDefault:(int)number
{
	return ([[parameterList objectAt:number] defaultValue]);
}



- (float)parameterSymMinimum:(char *)parameter
{
Parameter *tempParameter;

	tempParameter = [parameterList findParameter:parameter];

	if (tempParameter)
		return [tempParameter minimum];
	else
		return (0.0);

}

- (float)parameterSymMaximum:(char *)parameter
{
Parameter *tempParameter;

	tempParameter = [parameterList findParameter:parameter];

	if (tempParameter)
		return [tempParameter maximum];
	else
		return (0.0);

}

- (float)parameterSymDefault:(char *)parameter
{
Parameter *tempParameter;

	tempParameter = [parameterList findParameter:parameter];

	if (tempParameter)
		return [tempParameter defaultValue];
	else
		return (0.0);

}


- (int)isParameter:(char *)parameter
{
	if ([parameterList findParameter:parameter])
		return 1;
	else
		return 0;
}


- saveToFile:(FILE *) fp1
{
int i;
phoneStructPtr current_phone_ptr;
parameterStructPtr current_parameter_ptr;

	/* WRITE SAMPLE SIZE TO FILE  */
	fwrite((char *)&sampleSize, sizeof(sampleSize), 1, fp1);

	/* WRITE PHONE SYMBOLS TO FILE  */
	fwrite((char *)&number_of_phones, sizeof(number_of_phones), 1, fp1);
	current_phone_ptr = phoneHead;
	for (i = 0; i < number_of_phones; i++)
	{
		fwrite((char *)&(current_phone_ptr->symbol), SYMBOL_LENGTH_MAX + 1, 1, fp1);
		current_phone_ptr = current_phone_ptr->next;
	}

	/* WRITE PARAMETERS TO FILE  */
	fwrite((char *)&number_of_parameters, sizeof(number_of_parameters), 1, fp1);
	current_parameter_ptr = parameterHead;
	for (i = 0; i < number_of_parameters; i++)
	{
		fwrite((char *)&(current_parameter_ptr->symbol), SYMBOL_LENGTH_MAX + 1, 1, fp1);
		fwrite((char *)&(current_parameter_ptr->minimum), sizeof(float), 1, fp1);
		fwrite((char *)&(current_parameter_ptr->maximum), sizeof(float), 1, fp1);
		fwrite((char *)&(current_parameter_ptr->Default), sizeof(float), 1, fp1);
		current_parameter_ptr = current_parameter_ptr->next;
	}

	return self;
}



- ReadFromFile:(FILE *) fp1
{
int i;
float tempMin, tempMax, tempDef;
char tempSymbol[SYMBOL_LENGTH_MAX + 1];

	/* FIRST FREE ALL CURRENT MEMORY, IF NEEDED  */

	/* ADD LATER */

	/* READ SAMPLE SIZE FROM FILE  */
	fread((char *)&sampleSize, sizeof(sampleSize), 1, fp1);

	/* READ PHONE SYMBOLS FROM FILE  */
	fread((char *)&number_of_phones, sizeof(number_of_phones), 1, fp1);
	for (i = 0; i < number_of_phones; i++)
	{
		fread(tempSymbol, SYMBOL_LENGTH_MAX + 1, 1, fp1);
	}

	/* READ PARAMETERS FROM FILE  */
	fread((char *)&number_of_parameters, sizeof(number_of_parameters), 1, fp1);
	for (i = 0; i < number_of_parameters; i++)
	{
		bzero(tempSymbol, SYMBOL_LENGTH_MAX + 1);

		fread(tempSymbol, SYMBOL_LENGTH_MAX + 1, 1, fp1);
		fread(&tempMin, sizeof(float), 1, fp1);
		fread(&tempMax, sizeof(float), 1, fp1);
		fread(&tempDef, sizeof(float), 1, fp1);

		[parameterList addParameter:tempSymbol min: tempMin max: tempMax def:tempDef];

	}

	/* RESET DISPLAY  */
	[phoneTotal setIntValue:number_of_phones];
	[parameterTotal setIntValue:number_of_parameters];
	[setDisplay setIntValue:sampleSize];

	/* RELOAD LIST INTO BROWSER  */
	[phoneBrowser loadColumnZero];
	phoneCurrentRow = 0;

	/* RELOAD LIST INTO BROWSER  */
	[parameterBrowser loadColumnZero];
	parameterCurrentRow = 0;

	return self;
}



phoneStructPtr 
new_phoneStruct()
{
	return ((phoneStructPtr) malloc(sizeof(phoneStruct)));
}



parameterStructPtr 
new_parameterStruct()
{
	return ((parameterStructPtr) malloc(sizeof(parameterStruct)));
}

- updatePhoneBrowser
{
	[phoneBrowser loadColumnZero];
	return self;
}

@end
