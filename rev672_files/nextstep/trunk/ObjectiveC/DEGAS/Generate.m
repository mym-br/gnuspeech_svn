/* Generated by Interface Builder */

#import "Generate.h"
#import "Template.h"
#import "FileManager.h"
#import "Rule.h"
#import <appkit/appkit.h>
#import <time.h>

@implementation Generate

- appDidInit:sender
{
    /*  INITIALIZE POINTERS TO PARAMETER LIST  */
    number_of_parameters = 0;
    parameterHead = NULL;

    /*  SET NUMBER OF PARAMETERS TO ZERO  */
    [filterTotal setIntValue:number_of_parameters];

    /*  SET TARGET AND ACTION OF FILTER BROWSER  */
    [filterList setTarget:self];
    [filterList setAction:(SEL)(@selector(filterBrowserHit:))];
    [filterList setDoubleAction:(SEL)(@selector(filterBrowserDoubleHit:))];
    parameterCurrentRow = 0;
    [filterModButton setEnabled:0];

    /*  SET TARGET AND ACTION OF FILTERADD BROWSER  */
    [filterAddList setTarget:self];
    [filterAddList setAction:(SEL)(@selector(filterAddBrowserHit:))];
    [filterAddList setDoubleAction:(SEL)(@selector(filterAddBrowserDoubleHit:))];
    filterAddCurrentRow = 0;

    /*  SET FONT OF FILTER AND FILTERADD BROWSERS  */
    fontObj = [Font newFont:FONTNAME size:FONTSIZE];
    [[filterList matrixInColumn:0] setFont:fontObj];
    [[filterAddList matrixInColumn:0] setFont:fontObj];

    /*  GLOBAL ID FOR TEXT OBJECT FOR THE LOG  */
    log = [logText docView];

    /*  GLOBAL ID FOR COMMENT OBJECT FOR THE LOG  */
    comment = [commentText docView];

    /*  DISABLE ALL LOG BUTTONS  */
    [clearLogButton setEnabled:0];
    [saveLogButton setEnabled:0];
    [printLogButton setEnabled:0];

    return self;
}



- setTitleBar:(char *)currentPath
{
    char buffer[MAXPATHLEN+22];

    /*  ADD FILENAME TO TITLE OF EACH WINDOW  */
    strcpy(buffer,"Generate Database:   ");
    strcat(buffer,currentPath);
    [generateWindow setTitle:(const char *)buffer];

    return self;
}



- filterBrowserHit:sender
{
    /*  SET VARIABLE TO INDICATE SELECTED ROW  */
    parameterCurrentRow = [[sender matrixInColumn:0] selectedRow] + 1;

    /*  ENABLE MODIFY BUTTON  */
    [filterModButton setEnabled:1];

    return self;
}



- filterBrowserDoubleHit:sender
{
    /*  SAME AS USING THE MODIFY BUTTON  */
    [self filterModify:self];
    return self;
}



- filterAddBrowserHit:sender
{
    /*  SET VARIABLE TO INDICATE SELECTED ROW  */
    filterAddCurrentRow = [[sender matrixInColumn:0] selectedRow] + 1;

    /*  PUT SELECTED SYMBOL IN DISPLAY  */
    [filterAddParam setStringValue:[template parameterSymbol:filterAddCurrentRow]];

    /*  ENABLE ADD BUTTON  */
    [filterAddOKButton setEnabled:1];

    return self;
}



- filterAddBrowserDoubleHit:sender
{
    /*  SAME AS CLICKING OK BUTTON  */
    [self filterAddOK:self];
    return self;
}



- (int)browser:sender fillMatrix:matrix inColumn:(int)column
{
    /*  DELEGATE METHOD FOR NXBROWSER  */
    /*  MERELY UPDATE THE BROWSER WITH THE NUMBER OF ITEMS  */
    if (sender == filterList) {
      	return(number_of_parameters);
    }
    else if (sender == filterAddList) {
	return([template numberOfParameters]);
    }
    else
    	return(0);
}

- browser:sender loadCell:cell atRow:(int)row inColumn:(int)column
{
    /*  NXBROWSER DELEGATE METHOD WHICH UPDATES PARTICULAR CELLS
        FROM THE DATA STORED IN LINKED LISTS  */
    int i, len;

    if (sender == filterList) {
        filterParamPtr current_ptr;
	char string[ROW_NUMBER_MAX+SYMBOL_LENGTH_MAX+1];

	/*  SEARCH THROUGH LIST TILL ITEM FOUND  */
	current_ptr = parameterHead;
	for (i = 0; i < row; i++)
	  current_ptr = current_ptr->next;
	/*  PUT ROW NUMBER, SYMBOL IN CELL  */
	sprintf(string,"%-d.",row+1);
        len = strlen(string);
        for (i = 0; i < (ROW_NUMBER_MAX-len); i++)
	    strcat(string," ");
	strcat(string,current_ptr->symbol);

        [cell setStringValue:string];
    }
    else if (sender == filterAddList) {
	char string[ROW_NUMBER_MAX+SYMBOL_LENGTH_MAX+1];
	filterParamPtr current_param_ptr;

	/*  PUT ROW NUMBER, SYMBOL IN CELL  */
	sprintf(string,"%-d.",row+1);
        len = strlen(string);
        for (i = 0; i < (ROW_NUMBER_MAX-len); i++)
	    strcat(string," ");
	strcat(string,[template parameterSymbol:row+1]);
        [cell setStringValue:string];

	/*  DISABLE ITEM IF ALREADY SELECTED AS A FILTER PARAMETER  */
	current_param_ptr = parameterHead;
	for (i = 0; i < number_of_parameters; i++) {
	    if (!strcmp([template parameterSymbol:row+1],current_param_ptr->symbol)) {
		[cell setEnabled:0];
		break;
	    }
	    current_param_ptr = current_param_ptr->next;
	}
    }

    /*  INDICATE THAT THE CELL IS A LEAF NODE  */
    [cell setLeaf:YES];
    return self;
}



- filterAdd:sender
{
    /*  UPDATE THE FILTER-ADD PANEL BROWSER  */
    [filterAddList loadColumnZero];

    /*  DISABLE ADD BUTTON  */
    [filterAddOKButton setEnabled:0];

    /*  BLANK OUT PARAMETER FIELD  */
    [filterAddParam setStringValue:""];

    /*  SET DEFAULT ORDER  */
    [filterAddOrder setIntValue:(parameterCurrentRow != 0) ? 
                                 parameterCurrentRow :
                                 number_of_parameters+1];

    /*  SELECT ORDER FORM  */
    [filterAddOrder selectText:self];

    /*  PUT PANEL IN PROPER RELATION TO GENERATE WINDOW  */
    [generateWindow getFrame:(NXRect *)&r];
    [filterAddPanel moveTo:(NXCoord)r.origin.x+FILTER_X_OFFSET
		          :(NXCoord)r.origin.y+FILTER_Y_OFFSET];

    /*  MAKE PANEL VISIBLE  */
    [filterAddPanel makeKeyAndOrderFront:self];

    /*  MAKE SURE PANEL IS MODAL  */
    [NXApp runModalFor:filterAddPanel];

    return self;
}

- filterAddOK:sender
{
    filterParamPtr current_param_ptr, temp_param_ptr, new_filterParam();
    int order, i;

    /*  MAKE SURE AN ITEM HAS BEEN SELECTED  */
    if (!strcmp([filterAddParam stringValue], "")) {
	NXBeep();
	return self;
    }

    /*  GET ORDER FROM FIELD  */
    order = [filterAddOrder intValue];

    /*  MAKE SURE ORDER IS IN VALID RANGE  */
    if (order < 1) {
	order = 1;
	NXBeep();
	[filterAddOrder setIntValue:order];
    }
    if (order > (number_of_parameters+1)) {
	order = number_of_parameters + 1;
	NXBeep();
	[filterAddOrder setIntValue:order];
    }

    /*  ADD THE PARAMETER TO THE LIST  */
    current_param_ptr = parameterHead;
    if (order == 1) {
	temp_param_ptr = parameterHead;
	current_param_ptr = parameterHead = new_filterParam();
	strcpy(current_param_ptr->symbol,[filterAddParam stringValue]);
	current_param_ptr->next = temp_param_ptr;
    }
    else {
	/*  GET POINTER TO JUST BEFORE INSERT POINT  */
	for (i = 2; i < order; i++)
	    current_param_ptr = current_param_ptr->next;
	/*  SPLICE IN NEW PARAMETER  */
	temp_param_ptr = current_param_ptr->next;
	current_param_ptr->next = new_filterParam();
	strcpy(current_param_ptr->next->symbol,[filterAddParam stringValue]);
	current_param_ptr->next->next = temp_param_ptr;
    }

    /*  UPDATE THE NUMBER OF PARAMETERS IN FILTER  */
    number_of_parameters += 1;

    /*  UPDATE NUMBER OF PARAMETERS DISPLAY  */
    [filterTotal setIntValue:number_of_parameters];

    /*  DISABLE ADD BUTTON  */
    [filterAddOKButton setEnabled:0];

    /*  UPDATE FILTER BROWSER DISPLAY  */
    [filterList loadColumnZero];

    /*  SCROLL TO LATEST ITEM, SO IT CAN BE SEEN  */
    [[filterList matrixInColumn:0] scrollCellToVisible:order-1 :0];

    /*  UPDATE FILTER-ADD BROWSER  */
    [filterAddList loadColumnZero];

    /*  SCROLL TO LATEST ITEM, SO IT CAN BE SEEN  */
    i = (filterAddCurrentRow >= [template numberOfParameters]) ?
	 [template numberOfParameters] - 1 :
	 filterAddCurrentRow;
    [[filterAddList matrixInColumn:0] scrollCellToVisible:i :0];

    /*  BLANK THE PARAMETER DISPLAY  */
    [filterAddParam setStringValue:""];

    /*  UPDATE ORDER DISPLAY  */
    [filterAddOrder setIntValue:[filterAddOrder intValue]+1];

    /*  SELECT ORDER DISPLAY  */
    [filterAddOrder selectText:self];

    return self;
}

- filterAddCancel:sender
{
    /*  CLOSE THE PANEL  */
    [filterAddPanel close];
    [NXApp stopModal];
    return self;
}



- filterModify:sender
{
    filterParamPtr current_param_ptr;
    int i;

    /*  GET POINTER TO PARAMETER  */
    current_param_ptr = parameterHead;
    for (i = 1; i < parameterCurrentRow; i++)
	current_param_ptr = current_param_ptr->next;
    
    /*  PUT SYMBOL IN FORM  */
    [filterModParam setStringValue:current_param_ptr->symbol];

    /*  PUT ORDER IN FORM  */
    [filterModOrder setIntValue:parameterCurrentRow];

    /*  PURT CURSOR ON ORDER  */
    [filterModOrder selectText:self];

    /*  PUT PANEL IN PROPER RELATION TO GENERATE WINDOW  */
    [generateWindow getFrame:(NXRect *)&r];
    [filterModPanel moveTo:(NXCoord)r.origin.x+FILTER_X_OFFSET
		          :(NXCoord)r.origin.y+FILTER_Y_OFFSET];

    /*  MAKE PANEL VISIBLE  */
    [filterModPanel makeKeyAndOrderFront:self];

    /*  MAKE SURE PANEL IS MODAL  */
    [NXApp runModalFor:filterModPanel];

    return self;
}

- filterModifyOK:sender
{
    int new_order = [filterModOrder intValue];

    /*  MAKE SURE NEW ORDER IS IN RANGE  */
    if (new_order <= 0) {
	new_order = 1;
	NXBeep();
	[filterModOrder setIntValue:new_order];
    }
    if (new_order > number_of_parameters) {
	new_order = number_of_parameters;
	NXBeep();
	[filterModOrder setIntValue:new_order];
    }

    /*  ONLY REORDER WHEN THE ORDER HAS CHANGED  */
    if (parameterCurrentRow != new_order) {
	filterParamPtr current_param_ptr, old_param_ptr, temp_param_ptr;
	int i;

	/*  FIRST REMOVE THE PARAMETER FROM THE LIST  */
	if (parameterCurrentRow == 1) {
	    old_param_ptr = parameterHead;
	    parameterHead = parameterHead->next;
	}
	else {
	    /*  GET POINTER TO JUST BEFORE DELETE POINT  */
	    current_param_ptr = parameterHead;
	    for (i = 2; i < parameterCurrentRow; i++)
		current_param_ptr = current_param_ptr->next;
	    /*  ADJUST POINTER, AND FREE OLD PARAMETER  */
	    old_param_ptr = current_param_ptr->next;
	    current_param_ptr->next = old_param_ptr->next;
	}

	/*  PUT PARAMETER BACK IN LIST, IN NEW ORDER  */
	if (new_order == 1) {
	    temp_param_ptr = parameterHead;
	    parameterHead = old_param_ptr;
	    parameterHead->next = temp_param_ptr;
	}
	else {
	    current_param_ptr = parameterHead;
	    for (i = 2; i < new_order; i++)
		current_param_ptr = current_param_ptr->next;
	    temp_param_ptr = current_param_ptr->next;
	    current_param_ptr->next = old_param_ptr;
	    old_param_ptr->next = temp_param_ptr;
	}
	
	/*  DISABLE MODIFY BUTTON  */
	[filterModButton setEnabled:0];
	
	/*  UPDATE FILTER BROWSER DISPLAY  */
	[filterList loadColumnZero];
	
	/*  SCROLL TO LATEST ITEM, SO IT CAN BE SEEN  */
	i = (new_order > number_of_parameters) ? 
	    number_of_parameters - 1 : new_order - 1;
	[[filterList matrixInColumn:0] scrollCellToVisible:i :0];
	
	/*  RESET CURRENT ROW, SINCE ROW NO LONGER SELECTED  */
	parameterCurrentRow = 0;
    }

    /*  CLOSE THE PANEL  */
    [filterModPanel close];
    [NXApp stopModal];
    return self;
}

- filterModifyCancel:sender
{
    /*  CLOSE THE PANEL  */
    [filterModPanel close];
    [NXApp stopModal];
    return self;
}

- filterModifyDelete:sender
{
    filterParamPtr current_param_ptr, temp_param_ptr;
    int i;

    /*  DELETE THE PARAMETER FROM THE LIST  */
    current_param_ptr = parameterHead;
    if (parameterCurrentRow == 1) {
	parameterHead = parameterHead->next;
	free(current_param_ptr);
    }
    else {
	/*  GET POINTER TO JUST BEFORE DELETE POINT  */
	for (i = 2; i < parameterCurrentRow; i++)
	    current_param_ptr = current_param_ptr->next;
	/*  ADJUST POINTER, AND FREE OLD PARAMETER  */
	temp_param_ptr = current_param_ptr->next;
	current_param_ptr->next = temp_param_ptr->next;
	free(temp_param_ptr);
    }

    /*  UPDATE THE NUMBER OF PARAMETERS IN FILTER  */
    number_of_parameters -= 1;

    /*  UPDATE NUMBER OF PARAMETERS DISPLAY  */
    [filterTotal setIntValue:number_of_parameters];

    /*  DISABLE MODIFY BUTTON  */
    [filterModButton setEnabled:0];

    /*  UPDATE FILTER BROWSER DISPLAY  */
    [filterList loadColumnZero];

    /*  SCROLL TO LATEST ITEM, SO IT CAN BE SEEN  */
    i = (parameterCurrentRow > number_of_parameters) ? 
	number_of_parameters - 1 : parameterCurrentRow - 1;
    [[filterList matrixInColumn:0] scrollCellToVisible:i :0];

    /*  RESET CURRENT ROW, SINCE ROW NO LONGER SELECTED  */
    parameterCurrentRow = 0;

    /*  CLOSE THE PANEL  */
    [filterModPanel close];
    [NXApp stopModal];
    return self;
}


- clearLog:sender
{
    /*  CLEARS THE LOG  */
    [log selectAll:self];
    [log replaceSel:NULL];

    /*  DISABLE ALL LOG BUTTONS  */
    [clearLogButton setEnabled:0];
    [saveLogButton setEnabled:0];
    [printLogButton setEnabled:0];

    return self;
}

- saveLog:sender
{
    [fileManager saveLogAs:log];
    return self;
}

- printLog:sender
{
    [log printPSCode:self];
    return self;
}



- generate:sender
{
    int i, j;
    char buffer[1024];

    char *commentBuffer;
    int commentLength;

    FILE *fp;
    void pr_date_time();

    int number_of_phones;
    int number_of_diphones;
    filterParamPtr current_param_ptr;

    time_t time_val, start_time, end_time, diff_time;
    int minutes, seconds;

    /*  DATABASE HEADER VARIABLES  */
    int magic_number[2] = {0x64656761,0x735F6462};
    int index_offset, sample_size;
    char phone_symbol[SYMBOL_LENGTH_MAX+1];
    struct _paramStruct {
	char symbol[SYMBOL_LENGTH_MAX+1];
	float minimum;
	float maximum;
	float Default;
    } paramStruct;
    int comment_length;
    int diphone_offset;

    /*  INDEXING VARIABLES  */
    int index_pos, diphone_pos;


    /*  OPEN UP A DATABASE FILE  */
    if ([fileManager openDBFile:(FILE **)&fp])
	return self;

    /*  RECORD START TIME  */
    time(&time_val);
    start_time = (time_t)time_val;

    /**  WRITE HEADER TO LOG FILE  **/
    sprintf(buffer,"DEGAS DATABASE GENERATION LOG\n");
    [self logWrite:buffer];
    pr_date_time(buffer);
    [self logWrite:buffer];
    sprintf(buffer,"Database written to:  %s\n",[fileManager dbPath]);
    [self logWrite:buffer];
    sprintf(buffer,"Rulebase from:  %s\n",[fileManager currentPath]);
    [self logWrite:buffer];

    /*  WRITE COMMENTS TO LOG FILE  */
    sprintf(buffer,"\n\nCOMMENTS:  ");
    [self logWrite:buffer];

    commentLength = [comment byteLength];
    if (commentLength == 0) {
	strcpy(buffer,"none\n");
	[self logWrite:buffer];
    }
    else {
	strcpy(buffer,"\n");
	[self logWrite:buffer];
    }

    comment_length = commentLength + 1;
    commentBuffer = (char *)malloc((unsigned)comment_length);
    NXRead([comment stream], commentBuffer, commentLength);
    commentBuffer[commentLength] = '\0';
    [self logWrite:commentBuffer];


    /*  TEMPLATE SECTION  */
    sprintf(buffer,"\n\nTEMPLATE INFORMATION\n");
    [self logWrite:buffer];

    /*  WRITE SAMPLE LENGTH TO LOG FILE  */
    sample_size = [template sampleValue];
    sprintf(buffer,"Sample length in ms:  %-d\n",sample_size);
    [self logWrite:buffer];

    /*  WRITE PHONES TO LOG FILE  */
    number_of_phones = [template numberOfPhones];
    sprintf(buffer,"\nNumber of Phones:  %-d\n",number_of_phones);
    [self logWrite:buffer];
    for (i = 1; i <= number_of_phones; i++) {
	sprintf(buffer,"%-d.  %s\n",i,[template phoneSymbol:i]);
	[self logWrite:buffer];
    }

    /*  WRITE PARAMETERS (UNFILTERED) TO LOG FILE  */
    sprintf(buffer,"\nNumber of Parameters:  %-d\n",[template numberOfParameters]);
    [self logWrite:buffer];
    for (i = 1; i <= [template numberOfParameters]; i++) {
	sprintf(buffer,"%-d.  %s\n",i,[template parameterSymbol:i]);
	[self logWrite:buffer];
    }

    /*  WRITE PARAMETERS (FILTERED) TO LOG FILE  */
    sprintf(buffer,"\nNumber of Filtered Parameters:  %-d\n",number_of_parameters);
    [self logWrite:buffer];
    current_param_ptr = parameterHead;
    for (i = 1; i <= number_of_parameters; i++) {
	sprintf(buffer,"%-d.  %s\n",i,current_param_ptr->symbol);
	[self logWrite:buffer];
	current_param_ptr = current_param_ptr->next;
    }

    /**  WRITE HEADER TO DB FILE  **/
    /*  WRITE MAGIC NUMBER TO DB FILE  */
    fwrite(magic_number,sizeof(magic_number),1,fp);

    /*  CALCULATE OFFSET TO INDEX SECTION  */
    index_offset = sizeof(magic_number) + sizeof(index_offset) +
	           sizeof(sample_size) + sizeof(number_of_phones) +
		   (sizeof(phone_symbol) * number_of_phones) +
		   sizeof(number_of_parameters) +
		   (sizeof(paramStruct) * number_of_parameters) +
		   sizeof(comment_length) +
		   comment_length + sizeof(number_of_diphones);

    /*  CALCULATE NUMBER OF DIPHONES, AND DIPHONE OFFSET  */
    number_of_diphones = number_of_phones * number_of_phones;
    diphone_offset = index_offset + (number_of_diphones * sizeof(int));

    /*  WRITE OFFSET TO DB FILE  */
    fwrite((char *)&index_offset,sizeof(index_offset),1,fp);

    /*  WRITE SAMPLE SIZE TO DB FILE  */
    fwrite((char *)&sample_size,sizeof(sample_size),1,fp);

    /*  WRITE PHONES TO DB FILE  */
    fwrite((char *)&number_of_phones,sizeof(number_of_phones),1,fp);
    for (i = 1; i <= number_of_phones; i++) {
	/*  FILL phone_symbol WITH NULLS  */
	for (j = 0; j <= SYMBOL_LENGTH_MAX; j++)
	    phone_symbol[j] = '\0';
	/*  WRITE OUT PHONE SYMBOL  */
	strcpy(phone_symbol,[template phoneSymbol:i]);
	fwrite((char *)phone_symbol,sizeof(phone_symbol),1,fp);
    }

    /*  WRITE FILTERED PARAMETERS AND INFO TO DB FILE  */
    fwrite((char *)&number_of_parameters,sizeof(number_of_parameters),1,fp);
    current_param_ptr = parameterHead;
    for (i = 1; i <= number_of_parameters; i++) {
	/*  FILL paramStruct.symbol WITH NULLS  */
	for (j = 0; j <= SYMBOL_LENGTH_MAX; j++)
	    paramStruct.symbol[j] = '\0';
	/*  WRITE OUT PARAMETER TO FILE  */
	strcpy(paramStruct.symbol,current_param_ptr->symbol);
	paramStruct.minimum = [template parameterSymMinimum:current_param_ptr->symbol];
	paramStruct.maximum = [template parameterSymMaximum:current_param_ptr->symbol];
	paramStruct.Default = [template parameterSymDefault:current_param_ptr->symbol];
	fwrite((char *)&paramStruct,sizeof(paramStruct),1,fp);
	current_param_ptr = current_param_ptr->next;
    }

    /*  WRITE OUT COMMENTS TO DB FILE  */
    fwrite((char *)&comment_length,sizeof(comment_length),1,fp);
    fwrite((char *)commentBuffer,comment_length,1,fp);
    free(commentBuffer);

    /*  WRITE OUT NUMBER OF DIPHONES TO DB FILE  */
    fwrite((char *)&number_of_diphones,sizeof(number_of_diphones),1,fp);

    /*  PAD OUT INDEX SECTION WITH ZEROS  */
    j = 0;
    for (i = 0; i < number_of_diphones; i++)
	fwrite((char *)&j,sizeof(j),1,fp);


    /**  CALCULATIONS SECTION  **/
    sprintf(buffer,"\n\nCALCULATIONS\n");
    [self logWrite:buffer];

    /*  CALCULATE EACH DIPHONE  */
    sprintf(buffer,"Number of Diphones:  %-d\n",number_of_diphones);
    [self logWrite:buffer];
    diphone_pos = diphone_offset;
    for (i = 1; i <= number_of_phones; i++) {
	for (j = 1; j <= number_of_phones; j++) {
	    specifierStructPtr g_rule;
	    /*  WRITE DIPHONE SYMBOL TO LOG FILE  */
	    sprintf(buffer,"\nDiphone %-d:  %s/%s\n",((i-1)*number_of_phones)+j,
		    [template phoneSymbol:i],[template phoneSymbol:j]);
	    [self logWrite:buffer];


	    /*  FIND GOVERNING RULE FOR DIPHONE  */
	    g_rule = [rule governingRule:[template phoneSymbol:i]:[template phoneSymbol:j]];
	    sprintf(buffer,"Rule:  [%s] >> [%s]\n",g_rule->category1,g_rule->category2);
	    [self logWrite:buffer];

	    /*  PUT CALCULATIONS HERE  */
	    sprintf(buffer,"Calculating . . . ");
	    [self logWrite:buffer];

	    /*  FIND OFFSET FOR CURRENT INDEX_POS  */
	    index_pos = index_offset + (( (i-1)*number_of_phones + (j-1) ) * sizeof(diphone_pos));

	    /*  WRITE CURRENT DIPHONE_POS TO INDEX  */
	    fseek(fp,index_pos,SEEK_SET);
	    fwrite((char *)&diphone_pos,sizeof(diphone_pos),1,fp);

	    /*  REPOSITION POINTER TO END OF FILE  */
	    fseek(fp,diphone_pos,SEEK_SET);

	    /*  CALCULATE AND WRITE DIPHONE TO FILE  */
	    [rule writeDiphone:[template phoneSymbol:i]:[template phoneSymbol:j]
	                      :g_rule:parameterHead:fp:0];

	    /*  UPDATE DIPHONE_POS  */
	    diphone_pos = ftell(fp);

	    /*  DONE CALCULATING:  UPDATE LOG FILE, PROGESS CHART  */
	    sprintf(buffer,"done.\n");
	    [self logWrite:buffer];
	    [progressChart setFloatValue:
	     ((float)(((i-1)*number_of_phones)+j)/(float)number_of_diphones) * 360.0];
	}
    }

    /*  RECORD END TIME  */
    time(&time_val);
    end_time = (time_t)time_val;

    /*  FINISHED MESSAGE TO LOG FILE  */
    diff_time = end_time - start_time;
    minutes = (int)((float)diff_time/60.0);
    seconds = (int)diff_time % 60;
    sprintf(buffer,"\n\nDATABASE GENERATION DONE\nElapsed time:  %01d:%02d",
	    minutes,seconds);
    [self logWrite:buffer];

    /*  RESET PROGRESS CHART TO ZERO  */
    [progressChart setFloatValue:0.0];

    /*  ENABLE ALL LOG BUTTONS  */
    [clearLogButton setEnabled:1];
    [saveLogButton setEnabled:1];
    [printLogButton setEnabled:1];

    return self;
}



- logWrite:(char *)buffer
{
    /*  PUT CURSOR TO END OF LOG  */
    int end = [log byteLength];
    [log setSel:end:end];

    /*  APPEND BUFFER TO END OF LOG  */
    [log replaceSel:buffer];

    /*  SCROLL TO VISIBLE  */
    [log scrollSelToVisible];

    return self;
}



- saveToFile:(FILE *)fp1
{
    int i;
    filterParamPtr current_param_ptr;

    /*  WRITE FILTER PARAMETER SYMBOLS TO FILE  */
    fwrite((char *)&number_of_parameters,sizeof(number_of_parameters),1,fp1);
    current_param_ptr = parameterHead;
    for (i = 0; i < number_of_parameters; i++) {
	fwrite((char *)&(current_param_ptr->symbol),SYMBOL_LENGTH_MAX+1,1,fp1);
	current_param_ptr = current_param_ptr->next;
    }

    return self;
}



- ReadFromFile:(FILE *)fp1
{
    int i;
    filterParamPtr current_param_ptr, temp_param_ptr, new_filterParam();

    /*  FIRST FREE ALL CURRENT FILTER MEMORY, IF NEEDED  */
    current_param_ptr = parameterHead;
    for (i = 0; i < number_of_parameters; i++) {
	temp_param_ptr = current_param_ptr->next;
	free(current_param_ptr);
	current_param_ptr = temp_param_ptr;
    }

    /*  READ FILTER SYMBOLS FROM FILE  */
    fread((char *)&number_of_parameters,sizeof(number_of_parameters),1,fp1);
    parameterHead = NULL;
    for (i = 0; i < number_of_parameters; i++) {
	if (i == 0) {
	    parameterHead = current_param_ptr = new_filterParam();
	}
	else {
	    current_param_ptr->next = new_filterParam();
	    current_param_ptr = current_param_ptr->next;	    
	}
	fread((char *)&(current_param_ptr->symbol),SYMBOL_LENGTH_MAX+1,1,fp1);
	current_param_ptr->next = NULL;
    }

    /*  RESET DISPLAY  */
    [filterTotal setIntValue:number_of_parameters];

    /*  RELOAD LIST INTO BROWSER  */
    [filterList loadColumnZero];
    parameterCurrentRow = 0;

    /*  DISABLE MODIFY BUTTON  */
    [filterModButton setEnabled:0];

    return self;
}



filterParamPtr new_filterParam()
{
return ( (filterParamPtr) malloc(sizeof(filterParam)) );
}


/******************************************************************************
*
*	function:	pr_date_time
*
*	purpose:	Prints current date and time to the buffer.
*			Uses 2 lines to do so.
*
*	internal
*	functions:	None.
*
*	library
*	functions:	<time.h>	time, localtime.
*			<stdio.h>	sprintf.
*
******************************************************************************/

void pr_date_time(char *buffer)
{
    time_t time_val;
    struct tm *time_structure;
    int i = 0;
    
    static char *weekday[7] = {"Sunday","Monday","Tuesday","Wednesday",
				   "Thursday","Friday","Saturday"};
    static char *month[12] = {"January","February","March","April",
				  "May","June","July","August","September",
				  "October","November","December"};
    static char *hour[2] = {"a.m.","p.m."};
    
    /*  GET CURRENT TIME  */
    time(&time_val);
    time_structure = localtime(&time_val);
    
    /*  ADJUST FOR AM OR PM  */
    if (time_structure->tm_hour >= 12) {
	i = 1;
	if (time_structure->tm_hour > 12)
	    time_structure->tm_hour = (time_structure->tm_hour) - 12;
    }
    else if (time_structure->tm_hour == 0)
	time_structure->tm_hour = 12;

    
    /*  PRINT TO BUFFER  */
    sprintf(buffer,"Date:  %s, %s %d, 19%d.\nTime:  %d:%02d:%02d %s\n",
	    weekday[time_structure->tm_wday],
	    month[time_structure->tm_mon],
	    time_structure->tm_mday,
	    time_structure->tm_year,
	    time_structure->tm_hour,
	    time_structure->tm_min,
	    time_structure->tm_sec,
	    hour[i]);
}



@end
