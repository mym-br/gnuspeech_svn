
/* Generated by Interface Builder */

#import "PhoneDescription.h"
#import "Template.h"
#import "Categories.h"
#import "Rule.h"
#import <appkit/appkit.h>

@implementation PhoneDescription

- appDidInit:sender
{
	phoneList = [[PhoneList alloc] initCount:200];

	/* INITIALIZE HEAD OF LIST  */
	phoneDescriptionHead = currentDescriptionPtr = NULL;
	number_of_phones = 0;

	/* SET TARGET AND ACTION OF PHONE BROWSER  */
	[phoneBrowser setTarget:self];
	[phoneBrowser setAction:(SEL)(@selector(phoneBrowserHit:))];
	phoneCurrentRow = 0;

	/* SET TARGET AND ACTION OF TARGET VALUE BROWSER  */
	[targetBrowser setTarget:self];
	[targetBrowser setAction:(SEL)(@selector(targetBrowserHit:))];
	[targetBrowser setDoubleAction:(SEL)(@selector(targetBrowserDoubleHit:))];
	targetCurrentRow = 0;
	currentTargetPtr = NULL;
	[targetModButton setEnabled:0];

	/* SET TARGET AND ACTION OF CATEGORY BROWSER  */
	[categoryBrowser setTarget:self];
	[categoryBrowser setAction:(SEL)(@selector(categoryBrowserHit:))];
	categoryCurrentRow = 0;
	[categoryDeleteButton setEnabled:0];
	[categoryAddButton setEnabled:0];

	/* SET TARGET AND ACTION OF ADD CATEGORIZE BROWSER  */
	[addCategorizeList setTarget:self];
	[addCategorizeList setAction:(SEL)(@selector(addCategorizeBrowserHit:))];
	[addCategorizeList setDoubleAction:(SEL)(@selector(addCategorizeBrowserDoubleHit:))];
	addCategorizeCurrentRow = 0;
	[categorizeAddButton setEnabled:0];

	/* SET FONT OF ALL BROWSERS  */
	fontObj = [Font newFont:FONTNAME size:FONTSIZE];
	[[phoneBrowser matrixInColumn:0] setFont:fontObj];
	[[targetBrowser matrixInColumn:0] setFont:fontObj];
	[[categoryBrowser matrixInColumn:0] setFont:fontObj];
	[[addCategorizeList matrixInColumn:0] setFont:fontObj];

	/* SET TRANSITION DURATION TYPE BUTTON TO FIXED  */
	[transitionDurSwitch setTitle:"Fixed"];
	[transitionDurLabel setStringValue:"ms"];
	[transitionDurSwitch setEnabled:0];
	[transitionDurField setEnabled:0];

	/* DISABLE DURATION FIELD  */
	[displayPhoneDuration setEnabled:0];

	return self;
}



- setTitleBar:(char *)currentPath
{
char buffer[MAXPATHLEN + 22];

	/* ADD FILENAME TO TITLE OF EACH WINDOW  */
	strcpy(buffer, "Phone Description:   ");
	strcat(buffer, currentPath);
	[phoneDescriptionWindow setTitle:(const char *)buffer];

	return self;
}



- phoneBrowserHit:sender
{

	/* SET VARIABLE TO INDICATE SELECTED ROW  */
	phoneCurrentRow = [[sender matrixInColumn:0] selectedRow];
	currentPhone = [phoneList objectAt:phoneCurrentRow];

	/* UPDATE CURRENT PHONE DISPLAY  */
	[displayCurrentPhone setStringValue: [currentPhone symbol] ];

	/* UPDATE PHONE DURATION DISPLAY  */
	[displayPhoneDuration setEnabled:1];
	[displayPhoneDuration setIntValue: [currentPhone duration] ];

	/* UPDATE TRANSITION DURATION DISPLAY  */
	[transitionDurSwitch setEnabled:1];
	[transitionDurField setEnabled:1];
	if ([currentPhone type] == T_DURATION_FIXED)
	{
		/* SET LABEL  */
		[transitionDurLabel setStringValue:"ms"];
		/* SET SWITCH  */
		[transitionDurSwitch setTitle:"Fixed"];
		/* SET NUMERIC DISPLAY  */
		[transitionDurField setIntValue: [currentPhone fixed] ];
	}
	else
	{
		/* SET LABEL  */
		[transitionDurLabel setStringValue:"%"];
		/* SET SWITCH  */
		[transitionDurSwitch setTitle:"Proportional"];
		/* SET NUMERIC DISPLAY  */
		[transitionDurField setFloatValue:([currentPhone prop] * 100.0)];
	}


	/* UPDATE TARGET BROWSER  */
	targetCurrentRow = 0;
	[targetModButton setEnabled:0];
	[targetBrowser loadColumnZero];

	/* UPDATE CATEGORIZE BROWSER  */
	categoryCurrentRow = 0;
	[categoryDeleteButton setEnabled:0];
	[categoryAddButton setEnabled:1];
	[categoryBrowser loadColumnZero];
	return self;
}



- targetBrowserHit:sender
{

	/* SET VARIABLE TO INDICATE SELECTED ROW  */
	targetCurrentRow = [[sender matrixInColumn:0] selectedRow] ;

	/* SET CURRENT POINTER TO TARGET  */
	currentTarget = [[currentPhone targetList] objectAt: targetCurrentRow];

	/* ENABLE MOD BUTTON  */
	[targetModButton setEnabled:1];

	return self;
}



- targetBrowserDoubleHit:sender
{
	/* SAME AS USING THE MODIFY BUTTON  */
	[self modifyTarget:self];
	return self;
}



- categoryBrowserHit:sender
{
	/* SET VARIABLE TO INDICATE SELECTED ROW  */
	categoryCurrentRow = [[sender matrixInColumn:0] selectedRow];

	currentCategory = [[currentPhone categoryList] objectAt:categoryCurrentRow];

	/* ENABLE MOD BUTTON  */
	[categoryDeleteButton setEnabled:1];

	return self;
}



- addCategorizeBrowserHit:sender
{
	/* SET VARIABLE TO INDICATE SELECTED ROW  */
	addCategorizeCurrentRow = [[sender matrixInColumn:0] selectedRow];

	/* PUT SELECTED SYMBOL IN DISPLAY  */
	[addCategorizeForm setStringValue:[categories symbolAtRow:addCategorizeCurrentRow]];

	/* ENABLE MOD BUTTON  */
	[categorizeAddButton setEnabled:1];

	return self;
}



- addCategorizeBrowserDoubleHit:sender
{
	/* SAME AS DOING AN ADD  */
	[self addCategorizeAdd:self];
	return self;
}



- (int)browser:sender fillMatrix:matrix inColumn:(int)column
{
	/* DELEGATE METHOD FOR NXBROWSER  */
	/* MERELY UPDATE THE BROWSER WITH THE NUMBER OF ITEMS  */
	if (sender == phoneBrowser)
	{
		return ([phoneList count]);
	}
	else
	if (sender == targetBrowser)
	{
		return ([[[phoneList objectAt:phoneCurrentRow] targetList] count]);
	}
	else
	if (sender == categoryBrowser)
	{
		return ([[[phoneList objectAt:phoneCurrentRow] categoryList] count]);
	}
	else
	if (sender == addCategorizeList)
	{
		return ([categories numberOfCategories]);
	}
	else
		return (0);
}

/*
 * NXBROWSER DELEGATE METHOD WHICH UPDATES PARTICULAR CELLS FROM THE DATA STORED IN LINKED LISTS  
 */
- browser:sender loadCell:cell atRow:(int)row inColumn:(int)column
{
int i, len;
Phone *tempPhone;
Target *tempTarget;
CategoryNode *tempCategory;
char string[ROW_NUMBER_MAX + SYMBOL_LENGTH_MAX + FLOAT_LENGTH_MAX + 1];
char s[2 * FLOAT_LENGTH_MAX];

	bzero(string, ROW_NUMBER_MAX + SYMBOL_LENGTH_MAX + FLOAT_LENGTH_MAX + 1);
	if (sender == phoneBrowser)
	{
		tempPhone = [phoneList objectAt:row];

		sprintf(string, "%-d.", row);
		len = strlen(string);
		for (i = 0; i < (ROW_NUMBER_MAX - len); i++)
			strcat(string, " ");
		strcat(string, [tempPhone symbol]);
		[cell setStringValue:string];
	}
	else
	if (sender == targetBrowser)
	{


		/* FIND DESIRED TARGET  */
		tempTarget = [[[phoneList objectAt: phoneCurrentRow] targetList] objectAt:row];

		/* PUT ROW NUMBER, SYMBOL, IS_DEFAULT AND VALUE IN CELL  */
		sprintf(string, "%-d.", row);
		len = strlen(string);
		for (i = 0; i < (ROW_NUMBER_MAX - len); i++)
			strcat(string, " ");

		strcat(string,[template parameterSymbol:row ]);	

		len = strlen(string);
		for (i = 0; i < (COLUMN1 - len - 1); i++)
			strcat(string, " ");

		if ([tempTarget isDefault])
			strcat(string, "*");
		else
			strcat(string, " ");

		sprintf(s, "%-.2f", [tempTarget value]);
		strncat(string, s, FLOAT_LENGTH_MAX);

		[cell setStringValue:string];
	}
	else
	if (sender == categoryBrowser)
	{
		/* FIND DESIRED CATEGORY  */
		tempCategory = [[[phoneList objectAt:phoneCurrentRow] categoryList] objectAt:row];

		/* PUT ROW NUMBER AND SYMBOL IN CELL  */
		sprintf(string, "%-d.", row + 1);
		len = strlen(string);
		for (i = 0; i < (ROW_NUMBER_MAX - len); i++)
			strcat(string, " ");
		strcat(string, [tempCategory symbol]);
		[cell setStringValue:string];
	}
	else
	if (sender == addCategorizeList)
	{
		/* PUT ROW NUMBER AND SYMBOL IN CELL  */
		sprintf(string, "%-d.", row + 1);
		len = strlen(string);
		for (i = 0; i < (ROW_NUMBER_MAX - len); i++)
			strcat(string, " ");
		strcat(string,[categories symbolAtRow:row]);
		[cell setStringValue:string];

		/* DISABLE ITEM IF ALREADY SELECTED AS A CATEGORY  */
		for (i = 0; i < [[currentPhone categoryList] count]; i++)
		{
			if ([[currentPhone categoryList] findSymbol:[categories symbolAtRow:row]])
			{
				[cell setEnabled:0];
				break;
			}
		}
	}

	/* INDICATE THAT THE CELL IS A LEAF NODE  */
	[cell setLeaf:YES];
	return self;
}



- modifyTarget:sender
{
	/* MAKE SURE A PHONE HAS BEEN SELECTED  */
	if (currentPhone == nil)
	{
		NXBeep();
		return self;
	}

	/* MAKE SURE A TARGET HAS BEEN SELECTED  */
	if (targetCurrentRow == (-1))
	{
		NXBeep();
		return self;
	}

	/* PUT INFO IN PANEL  */
	[[modTargetMatrix cellAt:TARGET_MATRIX_PARAM :0]
	 setStringValue:[template parameterSymbol:targetCurrentRow + 1]];	/* Change when template changes */
	[[modTargetMatrix cellAt:TARGET_MATRIX_MIN :0]
	 setFloatValue:[template parameterMinimum:targetCurrentRow + 1]];
	[[modTargetMatrix cellAt:TARGET_MATRIX_MAX :0]
	 setFloatValue:[template parameterMaximum:targetCurrentRow + 1]];
	[[modTargetMatrix cellAt:TARGET_MATRIX_DEF :0]
	 setFloatValue:[template parameterDefault:targetCurrentRow + 1]];

	[modTargetSwitch selectCellAt:[currentTarget isDefault] :0];
	[modTargetForm setFloatValue:[currentTarget value]];

	/* PUT CURSOR AT SYMBOL FIELD  */
	[modTargetForm selectTextAt:0];

	/* PUT PANEL IN PROPER RELATION TO WINDOW  */
	[phoneDescriptionWindow getFrame:(NXRect *)&r];
	[modTargetPanel moveTo:(NXCoord)r.origin.x + MODTARGET_X_OFFSET
	 :(NXCoord)r.origin.y + MODTARGET_Y_OFFSET];

	/* MAKE PANEL VISIBLE  */
	[modTargetPanel makeKeyAndOrderFront:self];

	/* MAKE SURE PANEL IS MODAL  */
	[NXApp runModalFor:modTargetPanel];

	return self;
}



- addCategory:sender
{
	/* MAKE SURE A PHONE HAS BEEN SELECTED  */
	if (currentPhone == nil)
	{
		NXBeep();
		return self;
	}

	/* UPDATE THE addCategorizePanel BROWSER  */
	[addCategorizeList loadColumnZero];

	/* PUT PANEL IN PROPER RELATION TO WINDOW  */
	[phoneDescriptionWindow getFrame:(NXRect *)&r];
	[addCategorizePanel moveTo:(NXCoord)r.origin.x + CATEGORIZE_X_OFFSET
	 :(NXCoord)r.origin.y + CATEGORIZE_Y_OFFSET];

	/* MAKE PANEL VISIBLE  */
	[addCategorizePanel makeKeyAndOrderFront:self];

	/* MAKE SURE PANEL IS MODAL  */
	[NXApp runModalFor:addCategorizePanel];

	return self;
}

- deleteCategory:sender
{
int i;

	/* MAKE SURE A PHONE HAS BEEN SELECTED  */
	if (currentPhone == nil)
	{
		NXBeep();
		return self;
	}

	/* MAKE SURE A CATEGORY IS SELECTED  */
	if (categoryCurrentRow < 0)
	{
		NXBeep();
		return self;
	}

	/* MAKE SURE THE "NATIVE" AND "PHONE" CATEGORIES ARE NEVER DELETED  */
	if ([currentCategory native] == 1)
	{
		NXBeep();
		NXRunAlertPanel("Illegal",
				"You cannot remove this phone\nfrom the native \"%s\" category.",
				"OK", NULL, NULL, [currentCategory symbol]);
		return self;
	}
	else
	if (strcmp([currentCategory symbol], "phone") == 0)
	{
		NXBeep();
		NXRunAlertPanel("Illegal",
				"You cannot remove this phone\nfrom the \"phone\" category.",
				"OK", NULL, NULL);
		return self;
	}

	/*
	 * GO TO STRUCT JUST BEFORE THE ONE TO DELETE, FREE STRUCT AND ADJUST LINKED LIST  
	 */
	[[currentPhone categoryList] removeObjectAt:categoryCurrentRow];

	/* DECREMENT NUMBER OF CATEGORIES FOR PHONE  */
	i = categoryCurrentRow;
	if (i > ([[currentPhone categoryList] count]))
		i = [[currentPhone categoryList] count];
	categoryCurrentRow = 0;

	/* DISABLE MOD BUTTON  */
	[categoryDeleteButton setEnabled:0];

	/* RELOAD LIST INTO BROWSER  */
	[categoryBrowser loadColumnZero];

	/* SCROLL TO ROW WHERE DELETION OCCURRED  */
	[[categoryBrowser matrixInColumn:0] scrollCellToVisible:i :0];

	return self;
}



- modDurationOK:sender
{
int i;

	/* MAKE SURE A PHONE HAS BEEN SELECTED  */
	if (currentPhone == nil)
	{
		NXBeep();
		return self;
	}

	/* GET ASSGIGNED VALUE  */
	i = [sender intValue];

	/* MAKE SURE VALUE IS A POSITIVE MULTIPLE OF SAMPLE VALUE  */
	if (((i % [template sampleValue]) != 0) || (i <= 0))
	{
		NXBeep();
		NXRunAlertPanel("Illegal",
				"Phone duration must be a positive\nmultiple of the sample size (%-d).",
				"OK", NULL, NULL,[template sampleValue]);
		[sender selectText:self];
		return self;
	}

	/* ASSIGN VALUE TO LIST  */
	[currentPhone setDuration: i];

	/* MAKE SURE TRANSITION DURATION IS <= PHONE DURATION  */
	if ([currentPhone type] == T_DURATION_FIXED)
	{
		if ([currentPhone fixed] > i)
		{
			/* ADJUST TRANSITION DURATION TO SAME SIZE AS PHONE DURATION  */
			[currentPhone setFixed: i];
			/* DISPLAY CHANGE IN FIELD  */
			[transitionDurField setIntValue:[currentPhone fixed]];
			/* LET USER KNOW WHAT HAPPENED  */
			NXBeep();
			NXRunAlertPanel("Warning",
					"Transition Duration adjusted downwards.",
					"OK", NULL, NULL);
		}
	}

	return self;
}



- modTransitionDurOK:sender
{
	/* MAKE SURE A PHONE HAS BEEN SELECTED  */
	if (currentPhone == nil)
	{
		NXBeep();
		return self;
	}

	/* STORE VALUE, ACCORDING TO KIND  */
	if ([currentPhone type] == T_DURATION_FIXED)
	{
int value;

		/* GET ASSIGNED VALUE  */
		value = [sender intValue];
		/* MAKE SURE VALUE IS A POSITIVE MULTIPLE OF SAMPLE VALUE  */
		if (((value % [template sampleValue]) != 0) || (value < 0))
		{
			NXBeep();
			NXRunAlertPanel("Illegal",
					"Transition duration must be a positive\nmultiple of the sample size (%-d).",
					"OK", NULL, NULL,[template sampleValue]);
			[sender selectText:self];
			return self;
		}
		/* MAKE SURE VALUE NOT GREATER THAN PHONE DURATION  */
		if (value > [currentPhone duration])
		{
			NXBeep();
			NXRunAlertPanel("Illegal",
					"Transition duration cannot be\ngreater than the phone duration.",
					"OK", NULL, NULL);
			[sender selectText:self];
			return self;
		}
		/* ASSIGN VALUE TO LIST  */
		[currentPhone setFixed: value];
	}
	else
	{
float value;

		/* GET ASSIGNED VALUE  */
		value = [sender floatValue];
		/* MAKE SURE VALUE IS BETWEEN 0 AND 100 %  */
		if ((value < 0.0) || (value > 100.0))
		{
			NXBeep();
			NXRunAlertPanel("Illegal",
					"Transition duration must be between 0% and 100%.\n",
					"OK", NULL, NULL);
			[sender selectText:self];
			return self;
		}
		/* ASSIGN VALUE TO LIST  */
		[currentPhone setProp: (value / 100.0)];
	}

	return self;
}


- fixedTransitionDur:sender
{
float value;
int nint();

	/* IF STATE NOT CHANGED, THEN RETURN IMMEDIATELY  */
	if ([currentPhone type] == T_DURATION_FIXED)
		return self;

	/* STORE TRANSITION DURATION TYPE  */
	[currentPhone setType: T_DURATION_FIXED];

	/* SET LABEL TO ms  */
	[transitionDurLabel setStringValue:"ms"];

	/* CONVERT PERCENTAGE TO FIXED VALUE, ROUNDING TO SAMPLE SIZE  */
	value = [currentPhone prop] * (float) [currentPhone duration];

	[currentPhone setFixed:	nint(value / (float)[template sampleValue]) * [template sampleValue]];

	/* DISPLAY FIXED VALUE  */
	[transitionDurField setIntValue:[currentPhone fixed]];

	return self;
}


- propTransitionDur:sender
{
	/* IF STATE NOT CHANGED, THEN RETURN IMMEDIATELY  */
	if ([currentPhone type] == T_DURATION_PROP)
		return self;

	/* STORE TRANSITION DURATION TYPE  */
	[currentPhone setType: T_DURATION_PROP];

	/* SET LABEL TO %  */
	[transitionDurLabel setStringValue:"%"];

	/* CONVERT FIXED VALUE TO PERCENTAGE  */
	[currentPhone setProp:((float)[currentPhone fixed] / (float)[currentPhone duration])];

	/* DISPLAY PROPORTIONAL VALUE  */
	[transitionDurField setFloatValue:([currentPhone prop] * 100.0)];
	return self;
}



- modTargetCancel:sender
{
	/* CLOSE THE PANEL  */
	[modTargetPanel close];
	[NXApp stopModal];
	return self;
}

- modTargetDefault:sender
{
	/* IF SET TO DEFAULT, PUT IN DEFAULT VALUE  */
	if ([sender selectedRow] == YES)
	{
		[currentTarget setDefault:YES];
		[modTargetForm setFloatValue:[template parameterDefault:targetCurrentRow + 1]]; /* Change when template changes */
	}
	else
	{
		[currentTarget setDefault: NO];
	}

	return self;
}

- modTargetOK:sender
{
float new_value;

	/* GET VALUE FROM FORM  */
	new_value = [modTargetForm floatValue];

	/* IF VALUE DIFFERS FROM DEFAULT, CHANGE DEFAULT SWITCH  */
	if (new_value != [template parameterDefault:targetCurrentRow + 1])	/* Change when template changes */
	{
		[modTargetSwitch selectCellAt:NO :0];
		[currentTarget setDefault: NO];
	}

	/* MAKE SURE VALUE WITHIN RANGE  */
	if (new_value < [template parameterMinimum:targetCurrentRow + 1])	/* Change when template changes */
	{
		NXBeep();
		NXRunAlertPanel("Illegal",
				"Assigned target value is less than\nthe minimum of %.2f",
				"OK", NULL, NULL,[template parameterMinimum:targetCurrentRow + 1]);
		/* PUT CURSOR AT FIELD  */
		[modTargetForm selectTextAt:0];
		return self;
	}

	/* MAKE SURE VALUE WITHIN RANGE  */
	if (new_value > [template parameterMaximum:targetCurrentRow + 1])
	{
		NXBeep();
		NXRunAlertPanel("Illegal",
				"Assigned target value is greater than\nthe maximum of %.2f",
				"OK", NULL, NULL,[template parameterMaximum:targetCurrentRow + 1]);
		/* PUT CURSOR AT FIELD  */
		[modTargetForm selectTextAt:0];
		return self;
	}

	/* CHANGE VALUE IN DATA BASE TO THAT CONTAINED IN FORM  */
	[currentTarget setValue: [modTargetForm floatValue]];

	/* UPDATE CATEGORY BROWSER DISPLAY  */
	[targetBrowser loadColumnZero];

	/* SCROLL TO LATEST ITEM, SO IT CAN BE SEEN  */
	[[targetBrowser matrixInColumn:0] scrollCellToVisible:targetCurrentRow :0];

	/* SELECT THE LATEST ITEM  */
	[[targetBrowser matrixInColumn:0] selectCellAt:targetCurrentRow :0];
	[self targetBrowserHit:targetBrowser];

	/* CLOSE THE PANEL  */
	[modTargetPanel close];
	[NXApp stopModal];
	return self;
}



- addCategorizeCancel:sender
{
	/* BLANK OUT DISPLAY  */
	[addCategorizeForm setStringValue:""];

	/* DISABLE ADD BUTTON  */
	[categorizeAddButton setEnabled:0];

	/* CLOSE THE PANEL  */
	[addCategorizePanel close];
	[NXApp stopModal];
	return self;
}

- addCategorizeAdd:sender
{
CategoryNode *tempCategory;

	/* MAKE SURE AN ITEM HAS BEEN SELECTED  */
	if (!strcmp([addCategorizeForm stringValue], ""))
	{
		NXBeep();
		return self;
	}

	tempCategory = [[categories categoryList] findSymbol:[addCategorizeForm stringValue]];
	[[currentPhone categoryList] addObject: tempCategory];

	/* DISABLE ADD BUTTON  */
	[categorizeAddButton setEnabled:0];

	/* UPDATE CATEGORY BROWSER DISPLAY  */
	[categoryBrowser loadColumnZero];

	/* UPDATE addCategorize BROWSER  */
	[addCategorizeList loadColumnZero];

	/* BLANK THE DISPLAY  */
	[addCategorizeForm setStringValue:""];

	return self;
}



- addPhone:(char *)string order:(int)order
{
int nint();

Phone *tempPhone;
CategoryNode *tempCategory;

	tempPhone = [[Phone alloc] initWithSymbol:string];
	[tempPhone setDuration: nint((double)DURATION_DEF / [template sampleValue]) * [template sampleValue]];
	[tempPhone setType: T_DURATION_FIXED];
	[tempPhone setFixed: T_DURATION_FIXED_DEF];

	tempCategory = [[categories categoryList] findSymbol:string];
	if (!tempCategory)
		[[tempPhone categoryList] addNativeCategory: string];
	else
		[[tempPhone categoryList] addObject:tempCategory];

	tempCategory = [[categories categoryList] findSymbol:"phone"];
	[[tempPhone categoryList] addObject:tempCategory];

	[self addDefaultTargets:tempPhone];

	[phoneList addPhoneObject:tempPhone];

	/* RELOAD LIST INTO BROWSER  */
	[phoneBrowser loadColumnZero];

	/* SCROLL TO LATEST ITEM, SO IT CAN BE SEEN  */
	[[phoneBrowser matrixInColumn:0] scrollCellToVisible:order :0];

	/* SELECT THE LATEST ITEM  */
	[[phoneBrowser matrixInColumn:0] selectCellAt:order :0];
	[self phoneBrowserHit:phoneBrowser];

	return self;
}


- deletePhone:(int)row
{
int i;
phoneDescriptionPtr next_temp, current_ptr;
categoryPtr current_cat_ptr, temp_cat_ptr;
targetPtr current_target_ptr, temp_target_ptr;

	/*
	 * GO TO STRUCT JUST BEFORE THE ONE TO DELETE, FREE STRUCT AND ADJUST LINKED LIST  
	 */
	if (row == 1)
	{
		next_temp = phoneDescriptionHead;
		phoneDescriptionHead = phoneDescriptionHead->next;
		/* FREE ALL DEPENDENT CATEGORY MEMORY  */
		current_cat_ptr = next_temp->categoryHead;
		while (current_cat_ptr != NULL)
		{
			temp_cat_ptr = current_cat_ptr->next;
			free(current_cat_ptr);
			current_cat_ptr = temp_cat_ptr;
		}
		/* FREE ALL DEPENDENT TARGET MEMORY  */
		current_target_ptr = next_temp->targetHead;
		while (current_target_ptr != NULL)
		{
			temp_target_ptr = current_target_ptr->next;
			free(current_target_ptr);
			current_target_ptr = temp_target_ptr;
		}
		/* FREE PHONE NODE  */
		free(next_temp);
	}
	else
	{
		current_ptr = phoneDescriptionHead;
		for (i = 1; i < row; i++)
		{
			if (i == row - 1)
			{
				next_temp = current_ptr->next;
				current_ptr->next = current_ptr->next->next;
				/* FREE ALL DEPENDENT CATEGORY MEMORY  */
				current_cat_ptr = next_temp->categoryHead;
				while (current_cat_ptr != NULL)
				{
					temp_cat_ptr = current_cat_ptr->next;
					free(current_cat_ptr);
					current_cat_ptr = temp_cat_ptr;
				}
				/* FREE ALL DEPENDENT TARGET MEMORY  */
				current_target_ptr = next_temp->targetHead;
				while (current_target_ptr != NULL)
				{
					temp_target_ptr = current_target_ptr->next;
					free(current_target_ptr);
					current_target_ptr = temp_target_ptr;
				}
				/* FREE PHONE NODE  */
				free(next_temp);
				break;
			}
			current_ptr = current_ptr->next;
		}
	}


	/* DECREMENT TOTAL NUMBER OF PHONES  */
	--number_of_phones;
	i = row;
	if (i > number_of_phones)
		i--;

	/* RELOAD LIST INTO BROWSER  */
	[phoneBrowser loadColumnZero];

	/* SCROLL TO ROW WHERE DELETION OCCURRED  */
	[[phoneBrowser matrixInColumn:0] scrollCellToVisible:i - 1:0];

	/*
	 * SELECT THE ITEM WHERE DELETION OCCURRED, IF IT EXISTS; ELSE, BLANK EVERYTHING  
	 */
	if (i > 0)
	{
		[[phoneBrowser matrixInColumn:0] selectCellAt:i - 1:0];
		[self phoneBrowserHit:phoneBrowser];
	}
	else
	{
		/* BLANK ALL DISPLAYS  */
		currentDescriptionPtr = phoneDescriptionHead = NULL;
		phoneCurrentRow = 0;

		[displayCurrentPhone setStringValue:""];
		[displayPhoneDuration setStringValue:""];
		[transitionDurField setStringValue:""];

		/* RESET TRANSITION DURATION BUTTON AND LABEL  */
		[transitionDurLabel setStringValue:"ms"];
		[transitionDurSwitch setTitle:"Fixed"];

		/* DISABLE BUTTONS AND FIELDS  */
		[targetModButton setEnabled:0];
		[categoryDeleteButton setEnabled:0];
		[categoryAddButton setEnabled:0];

		[displayPhoneDuration setEnabled:0];
		[transitionDurField setEnabled:0];
		[transitionDurSwitch setEnabled:0];

		[categoryBrowser loadColumnZero];
	}

	return self;
}



- modPhone:(char *)string row:(int)row order:(int)order
{
int i;
phoneDescriptionPtr next_temp, current_ptr, item_ptr;

	/* TAKE OUT ITEM FROM LIST  */
	if (row == 1)
	{
		item_ptr = phoneDescriptionHead;
		phoneDescriptionHead = phoneDescriptionHead->next;
	}
	else
	{
		item_ptr = NULL;
		current_ptr = phoneDescriptionHead;
		for (i = 1; i < row; i++)
		{
			if (i == row - 1)
			{
				item_ptr = current_ptr->next;
				current_ptr->next = current_ptr->next->next;
				break;
			}
			current_ptr = current_ptr->next;
		}
	}

	/* ADD PHONE BACK INTO LINKED LIST USING NEW VALUES  */
	if (order == 1)
	{
		next_temp = phoneDescriptionHead;
		phoneDescriptionHead = item_ptr;
		phoneDescriptionHead->next = next_temp;
		strcpy(phoneDescriptionHead->symbol, string);
		/* UPDATE "NATIVE" CATEGORY SYMBOL AS WELL  */
		strcpy(phoneDescriptionHead->categoryHead->symbol, string);
	}
	else
	{
		current_ptr = phoneDescriptionHead;
		for (i = 1; i < order; i++)
		{
			if (i == (order - 1))
			{
				next_temp = current_ptr->next;
				current_ptr->next = item_ptr;
				current_ptr->next->next = next_temp;
				strcpy(current_ptr->next->symbol, string);
				/* UPDATE "NATIVE" CATEGORY SYMBOL AS WELL  */
				strcpy(current_ptr->next->categoryHead->symbol, string);
				break;
			}
			current_ptr = current_ptr->next;
		}
	}


	/* RELOAD LIST INTO BROWSER  */
	[phoneBrowser loadColumnZero];

	/* SCROLL TO CELL, SO IT CAN BE SEEN  */
	[[phoneBrowser matrixInColumn:0] scrollCellToVisible:order - 1:0];

	/* SELECT THE ITEM  */
	[[phoneBrowser matrixInColumn:0] selectCellAt:order - 1:0];
	[self phoneBrowserHit:phoneBrowser];

	return self;
}



- propagateModCategory:(char *)old_symbol :(char *)new_symbol;
{
phoneDescriptionPtr current_ptr;
categoryPtr current_cat_ptr;
int i, j;

	/* PROPAGATE ANY NAME CHANGES IN CATEGORY OBJ IN PHONE DESCRIPTION  */
	current_ptr = phoneDescriptionHead;
	for (i = 0; i < number_of_phones; i++)
	{
		current_cat_ptr = current_ptr->categoryHead;
		for (j = 0; j < current_ptr->number_of_categories; j++)
		{
			if (!strcmp(old_symbol, current_cat_ptr->symbol))
				strcpy(current_cat_ptr->symbol, new_symbol);
			current_cat_ptr = current_cat_ptr->next;
		}
		current_ptr = current_ptr->next;
	}

	/* UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
	[self phoneBrowserHit:phoneBrowser];

	return self;
}

- propagateDeleteCategory:(char *)old_symbol;
{
phoneDescriptionPtr current_ptr;
categoryPtr current_cat_ptr, temp_cat_ptr = NULL;
int i, j;

	/* PROPAGATE ANY DELETIONS IN CATEGORY OBJ IN PHONE DESCRIPTION  */
	current_ptr = phoneDescriptionHead;
	for (i = 0; i < number_of_phones; i++)
	{
		current_cat_ptr = current_ptr->categoryHead;
		if (!strcmp(current_cat_ptr->symbol, old_symbol))
		{
			temp_cat_ptr = current_cat_ptr;
			current_ptr->categoryHead = current_cat_ptr->next;
			free(temp_cat_ptr);
			current_ptr->number_of_categories -= 1;
		}
		else
		{
			current_cat_ptr = current_ptr->categoryHead;
			for (j = 0; j < (current_ptr->number_of_categories - 1); j++)
			{
				if (!strcmp(current_cat_ptr->next->symbol, old_symbol))
				{
					temp_cat_ptr = current_cat_ptr->next;
					current_cat_ptr->next = current_cat_ptr->next->next;
					free(temp_cat_ptr);
					current_ptr->number_of_categories -= 1;
					break;
				}
				current_cat_ptr = current_cat_ptr->next;
			}
		}
		current_ptr = current_ptr->next;
	}


	/* UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
	[self phoneBrowserHit:phoneBrowser];

	return self;
}



- addDefaultTargets:(Phone *) newPhone
{
int i, numTargets;
targetPtr new_target(), current_target_ptr = NULL;

Target *tempTarget;

	/* FIND HOW MANY TARGETS TO ADD  */
	numTargets = [template numberOfParameters];

	/* ADD TARGETS TO LIST FOR PARTICULAR PHONE  */
	for (i = 0; i < numTargets; i++)			/* CHANGE WHEN TEMPLATE FIXED! */
	{
		tempTarget = [[Target alloc] initWithValue: [template parameterDefault:i+1] isDefault:YES];
		[[newPhone targetList] addObject: tempTarget];
	}

	return self;
}


- propagateDeleteTarget:(int)currentRow
{
phoneDescriptionPtr current_ptr;
targetPtr current_target_ptr, temp_target_ptr = NULL;
int i, j;

	/* MAKE SURE THERE ARE PHONE TO OPERATE ON  */
	if (number_of_phones <= 0)
		return self;

	/* PROPAGATE ANY DELETIONS OF PARAMETERS IN PHONE DESCRIPTION  */
	current_ptr = phoneDescriptionHead;
	for (i = 0; i < number_of_phones; i++)
	{
		current_target_ptr = current_ptr->targetHead;
		if (currentRow == 1)
		{
			temp_target_ptr = current_target_ptr;
			current_ptr->targetHead = current_target_ptr->next;
			free(temp_target_ptr);
		}
		else
		{
			for (j = 1; j < currentRow - 1; j++)
				current_target_ptr = current_target_ptr->next;

			temp_target_ptr = current_target_ptr->next;
			current_target_ptr->next = current_target_ptr->next->next;
			free(temp_target_ptr);
		}
		current_ptr = current_ptr->next;
	}

	/* ADJUST NUMBER OF TARGETS  */
	number_of_targets -= 1;

	/* UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
	[self phoneBrowserHit:phoneBrowser];

	return self;
}



- propagateAddTarget:(int)order
{
phoneDescriptionPtr current_ptr;
targetPtr current_target_ptr, temp_target_ptr = NULL;
targetPtr new_target();
int i, j;

	/* MAKE SURE THERE ARE PHONES TO OPERATE ON  */
	if (number_of_phones <= 0)
		return self;

	/* PROPAGATE ANY ADDITIONS OF PARAMETERS IN PHONE DESCRIPTION  */
	current_ptr = phoneDescriptionHead;
	for (i = 0; i < number_of_phones; i++)
	{
		current_target_ptr = current_ptr->targetHead;
		if (order == 1)
		{
			temp_target_ptr = current_ptr->targetHead;
			current_ptr->targetHead = new_target();
			current_ptr->targetHead->next = temp_target_ptr;
			current_ptr->targetHead->is_default = YES;
			current_ptr->targetHead->value = [template parameterDefault:order];
		}
		else
		{
			for (j = 1; j < order - 1; j++)
				current_target_ptr = current_target_ptr->next;

			temp_target_ptr = current_target_ptr->next;
			current_target_ptr->next = new_target();
			current_target_ptr->next->next = temp_target_ptr;
			current_target_ptr->next->is_default = YES;
			current_target_ptr->next->value = [template parameterDefault:order];
		}
		current_ptr = current_ptr->next;
	}

	/* ADJUST NUMBER OF TARGETS  */
	number_of_targets += 1;

	/* UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
	[self phoneBrowserHit:phoneBrowser];

	return self;
}



- propagateModParam:(int)old_order :(int)new_order
{
phoneDescriptionPtr current_ptr;
targetPtr current_target_ptr, temp_target_ptr = NULL;
targetPtr new_target(), item_ptr = NULL;
int i, j, warning_on_min = YES, warning_on_max = YES;
float x;

	/* MAKE SURE THERE ARE PHONES TO OPERATE ON  */
	if (number_of_phones <= 0)
		return self;

	/* PROPAGATE ANY MODIFICATIONS OF PARAMETERS IN PHONE DESCRIPTION  */
	current_ptr = phoneDescriptionHead;
	for (i = 0; i < number_of_phones; i++)
	{
		current_target_ptr = current_ptr->targetHead;

		/* TAKE OUT ITEM FROM LIST  */
		if (old_order == 1)
		{
			item_ptr = current_ptr->targetHead;
			current_ptr->targetHead = current_ptr->targetHead->next;
		}
		else
		{
			for (j = 1; j < old_order - 1; j++)
				current_target_ptr = current_target_ptr->next;

			item_ptr = current_target_ptr->next;
			current_target_ptr->next = current_target_ptr->next->next;
		}

		/* PUT ITEM BACK IN PROPER PLACE IN LIST  */
		current_target_ptr = current_ptr->targetHead;
		if (new_order == 1)
		{
			temp_target_ptr = current_ptr->targetHead;
			current_ptr->targetHead = item_ptr;
			current_ptr->targetHead->next = temp_target_ptr;
		}
		else
		{
			for (j = 1; j < new_order - 1; j++)
				current_target_ptr = current_target_ptr->next;

			temp_target_ptr = current_target_ptr->next;
			current_target_ptr->next = item_ptr;
			current_target_ptr->next->next = temp_target_ptr;
		}

		/* put mods to item_ptr here  */
		/* IF ITEM IS SET TO DEFAULT, SET ITEM TO NEW DEFAULT  */
		if (item_ptr->is_default)
			item_ptr->value = [template parameterDefault:new_order];

		/*
		 * IF ITEM VALUE IS LESS THAN PARAMETER MINIMUM, RAISE IT TO MINIMUM, AND ISSUE WARNING  
		 */
		if (item_ptr->value < (x = [template parameterMinimum:new_order]))
		{
			if (warning_on_min)
			{
				NXBeep();
				if (NX_ALERTDEFAULT != NXRunAlertPanel("Warning",
				       "The target for \"%s\" in phone \"%s\" is\nbeing raised from %.2f to new\nminimum of %.2f",
								       "OK", "Ignore warnings", NULL,
						   [template parameterSymbol:new_order], current_ptr->symbol, item_ptr->value, x))
					warning_on_min = NO;
			}
			item_ptr->value = x;
		}


		/*
		 * IF ITEM VALUE IS GREATER THAN PARAMETER MAXIMUM, LOWER IT TO MAXIMUM, AND ISSUE WARNING  
		 */
		if (item_ptr->value > (x = [template parameterMaximum:new_order]))
		{
			if (warning_on_max)
			{
				NXBeep();
				if (NX_ALERTDEFAULT != NXRunAlertPanel("Warning",
				      "The target for \"%s\" in phone \"%s\" is\nbeing lowered from %.2f to new\nmaximum of %.2f",
								       "OK", "Ignore warnings", NULL,
						   [template parameterSymbol:new_order], current_ptr->symbol, item_ptr->value, x))
					warning_on_max = NO;
			}
			item_ptr->value = x;
		}

		current_ptr = current_ptr->next;
	}

	/* UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
	[self phoneBrowserHit:phoneBrowser];


	return self;
}



- propagateSetSample:(int)new_size
{
phoneDescriptionPtr current_ptr;
int i, warning_on = YES, phone_length, t_length, nint();

	/* MAKE SURE THERE ARE PHONES TO OPERATE ON  */
	if (number_of_phones <= 0)
		return self;

	/* PROPAGATE ANY MODIFICATIONS OF SAMPLE SIZE IN PHONE DESCRIPTION  */
	current_ptr = phoneDescriptionHead;
	for (i = 0; i < number_of_phones; i++)
	{
		phone_length = current_ptr->duration;
		/* ROUND UP CURRENT DURATION IF NEEDED  */
		if ((phone_length % new_size) != 0)
		{
			current_ptr->duration = nint((double)phone_length / (double)new_size) * new_size;
			if (warning_on)
			{
				NXBeep();
				if (NX_ALERTDEFAULT != NXRunAlertPanel("Warning",
								"The duration for phone \"%s\" is\nbeing rounded from %-d to %-d",
								       "OK", "Ignore warnings", NULL,
								       current_ptr->symbol, phone_length, current_ptr->duration))
					warning_on = NO;
			}
		}
		/* ROUND UP TRANSITION DURATION IF FIXED, AND IF NEEDED  */
		if (current_ptr->transition_duration.type == T_DURATION_FIXED)
		{
			t_length = current_ptr->transition_duration.fixed;
			if ((t_length % new_size) != 0)
			{
				current_ptr->transition_duration.fixed =
					nint((double)t_length / (double)new_size) * new_size;
				if (warning_on)
				{
					NXBeep();
					if (NX_ALERTDEFAULT != NXRunAlertPanel("Warning",
						     "The transition duration for phone \"%s\" is\nbeing rounded from %-d to %-d",
									       "OK", "Ignore warnings", NULL,
							   current_ptr->symbol, t_length, current_ptr->transition_duration.fixed))
						warning_on = NO;
				}
			}
		}
		current_ptr = current_ptr->next;
	}

	/* UPDATE EVERYTHING BY SELECTING LATEST ITEM OF PHONE LIST  */
	[self phoneBrowserHit:phoneBrowser];

	return self;
}



- (int)matchPhone:(char *)phone ToCategory:(char *)category
{
Phone *tempPhone;

	tempPhone = [phoneList findPhone: phone];
	if (tempPhone == nil)
		return (0);

	if ([[tempPhone categoryList] findSymbol: category] == nil)
		return 0;
	else
		return 1;
}



- (float)getTarget:(char *)phone :(char *)parameter
{
int j;
Phone *tempPhone;
Target *tempTarget;

	tempPhone = [phoneList findPhone: phone];
	if (tempPhone == nil)
		return (0.0);

	/* SEARCH UNTIL PARAMETER MATCHES  */
	for (j = 0; j < [[tempPhone targetList] count]; j++)
	{
		if (!strcmp([template parameterSymbol:j ], parameter))
		{
			return [[[tempPhone targetList] objectAt:j] value];
		}
	}

	/* IF WE GET HERE, THEN RETURN ERROR  */
	return (0.0);
}



- (int)getPhoneLength:(char *)phone
{
Phone *tempPhone;

	tempPhone = [phoneList findPhone: phone];
	if (tempPhone == nil)
		return 0;
	else
		return [tempPhone duration];
}



- (int)getTransitionType:(char *)phone
{
Phone *tempPhone;

	tempPhone = [phoneList findPhone: phone];
	if (tempPhone == nil)
		return (-1);
	else
		return [tempPhone type];
}



- (int)getTransitionDurationFixed:(char *)phone
{
Phone *tempPhone;

	tempPhone = [phoneList findPhone: phone];
	if (tempPhone == nil)
		return (-1);
	else
		return [tempPhone fixed];
}


- (float)getTransitionDurationProp:(char *)phone
{
Phone *tempPhone;

	tempPhone = [phoneList findPhone: phone];
	if (tempPhone == nil)
		return (-1.0);
	else
		return [tempPhone prop];
}



- saveToFile:(FILE *) fp1
{
int i, j;
int phoneCount, targetCount, categoryCount;

int tempDuration, tempType, tempFixed;
float tempProp;

int tempDefault;
float tempValue;

Phone *tempPhone;
CategoryNode *tempCategory;
Target *tempTarget;
char tempSymbol[SYMBOL_LENGTH_MAX + 1];

	/* WRITE PHONE DESCRIPTION TO FILE  */
	phoneCount = [phoneList count];
	targetCount = [[[phoneList objectAt:0] targetList] count];

	fwrite(&phoneCount, sizeof(int), 1, fp1);
	fwrite(&targetCount, sizeof(int), 1, fp1);

	for (i = 0; i < phoneCount; i++)
	{
		tempPhone = [phoneList objectAt: i];

		bzero(tempSymbol, SYMBOL_LENGTH_MAX + 1);

		strcpy(tempSymbol, [tempPhone symbol]);
		tempDuration = [tempPhone duration];
		tempType = [tempPhone type];
		tempFixed = [tempPhone fixed];
		tempProp = [tempPhone prop];

		/* WRITE OUT SYMBOL AND DURATIONS  */
		fwrite(tempSymbol, SYMBOL_LENGTH_MAX + 1, 1, fp1);
		fwrite(&tempDuration, sizeof(int), 1, fp1);
		fwrite(&tempType, sizeof(int), 1, fp1);
		fwrite(&tempFixed, sizeof(int), 1, fp1);
		fwrite(&tempProp, sizeof(float), 1, fp1);

		/* WRITE OUT TARGETS  */
		for (j = 0; j < targetCount; j++)
		{
			tempTarget = [[tempPhone targetList] objectAt:j];
			tempDefault = [tempTarget isDefault];
			tempValue = [tempTarget value];

			fwrite(&tempDefault, sizeof(int), 1, fp1);
			fwrite(&tempValue, sizeof(float), 1, fp1);

		}

		/* WRITE OUT CATEGORIES  */
		categoryCount = [[tempPhone categoryList] count];
		fwrite(&categoryCount, sizeof(int), 1, fp1);

		for (j = 0; j < categoryCount; j++)
		{
			tempCategory = [[tempPhone categoryList] objectAt:j];
			bzero(tempSymbol, SYMBOL_LENGTH_MAX + 1);

			strcpy(tempSymbol, [tempCategory symbol]);
			fwrite(tempSymbol, SYMBOL_LENGTH_MAX + 1, 1, fp1);
		}

	}

	return self;
}


- ReadFromFile:(FILE *) fp1
{
int i, j;
int phoneCount, targetCount, categoryCount;

int tempDuration, tempType, tempFixed;
float tempProp;

int tempDefault;
float tempValue;

Phone *tempPhone;
CategoryNode *tempCategory;
Target *tempTarget;
char tempSymbol[SYMBOL_LENGTH_MAX + 1];

	/* FIRST FREE ALL CURRENT MEMORY, IF NEEDED  */
	[phoneList freeObjects];

	/* READ # OF PHONES AND TARGETS FROM FILE  */
	fread(&phoneCount, sizeof(int), 1, fp1);
	fread(&targetCount, sizeof(int), 1, fp1);

	/* READ PHONE DESCRIPTION FROM FILE  */
	for (i = 0; i < phoneCount; i++)
	{
		fread(tempSymbol, SYMBOL_LENGTH_MAX + 1, 1, fp1);
		tempPhone = [[Phone alloc] initWithSymbol:tempSymbol];
		[phoneList addPhoneObject:tempPhone];

		/* READ SYMBOL AND DURATIONS FROM FILE  */
		fread(&tempDuration, sizeof(int), 1, fp1);
		fread(&tempType, sizeof(int), 1, fp1);
		fread(&tempFixed, sizeof(int), 1, fp1);
		fread(&tempProp, sizeof(float), 1, fp1);

		[tempPhone setDuration:tempDuration];
		[tempPhone setType:tempType];
		[tempPhone setFixed:tempFixed];
		[tempPhone setProp:tempProp];

		/* READ TARGETS IN FROM FILE  */
		for (j = 0; j < targetCount; j++)
		{
			tempTarget = [[Target alloc] init];

			/* READ IN DATA FROM FILE  */
			fread(&tempDefault, sizeof(int), 1, fp1);
			fread(&tempValue, sizeof(float), 1, fp1);

			[tempTarget setValue:tempValue];
			[tempTarget setDefault:tempDefault];

			[[tempPhone targetList] addObject:tempTarget];
		}

		/* READ IN CATEGORIES FROM FILE  */
		fread(&categoryCount, sizeof(int), 1, fp1);
		for (j = 0; j < categoryCount; j++)
		{
			/* READ IN DATA FROM FILE  */
			fread(tempSymbol, SYMBOL_LENGTH_MAX + 1, 1, fp1);
			tempCategory = [[categories categoryList] findSymbol:tempSymbol];
			if (!tempCategory)
			{
				[[tempPhone categoryList] addNativeCategory: tempSymbol];
			}
			else
				[[tempPhone categoryList] addObject:tempCategory];

		}
	}


	/* RESET DISPLAY  */
	/* RELOAD LIST INTO BROWSER  */
	[phoneBrowser loadColumnZero];

	/* SCROLL TO FIRST ITEM, SO IT CAN BE SEEN  */
	[[phoneBrowser matrixInColumn:0] scrollCellToVisible:0 :0];

	/* SELECT THE FIRST ITEM  */
	[[phoneBrowser matrixInColumn:0] selectCellAt:0 :0];
	[self phoneBrowserHit:phoneBrowser];
	[template updatePhoneBrowser];	

	return self;
}



targetPtr 
new_target()
{
	return ((targetPtr) malloc(sizeof(target)));
}

categoryPtr 
new_category()
{
	return ((categoryPtr) malloc(sizeof(category)));
}

phoneDescriptionPtr 
new_phoneDescription()
{
	return ((phoneDescriptionPtr) malloc(sizeof(phoneDescription)));
}


int 
nint(value)
	double value;
{
double remainder;
int tr_value;

	tr_value = (int)value;
	remainder = value - (double)tr_value;
	if (remainder >= 0.5)
		return (tr_value + 1);
	else
	if (remainder <= -0.5)
		return (tr_value - 1);
	else
		return (tr_value);
}

- (PhoneList *) phoneList
{
	return phoneList;
}

@end
