{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\ftech Symbol;\f2\fswiss Helvetica;\f3\fmodern Courier;}
\paperw15620
\paperh13060
\margl120
\margr120
\f0\b0\i0\ulnone\ql\fs24\fi0\li0\gray0\fc0\cf0\up0\dn0 Release 1.1  Copyright 
\f1 ã
\f0 1995 by Dale Brisinda.  All Rights Reserved.\
\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\pard\f2\b\fs84\li100\fc0\cf0 \

\fs16 \
\
\

\f0\b0\i\fs88\li0 TabletKit\

\fs16 \
\
\
\
\
\
\
\

\pard\tx5640\f2\b\i0\fs28\fi-3540\li5640\fc0\cf0 Library:	
\f0\b0 libtabletkit.a\

\fs16 \

\f2\b\fs28 Header File Directory:	
\f0\b0 /LocalDeveloper/Headers/tabletkit\

\fs16 \

\f2\b\fs28 Import:	
\f0\b0 tabletkit/tabletkit.h\

\fs16 \

\pard\f2\b\li100\fc0\cf0 \
\
\
\
\

\fs52 Introduction\

\fs16 \
\

\pard\tx2480\tx2860\tx3240\f0\b0\fs28\li2100\fc0\cf0 The TabletKit
\f1 Ô
\f0  defines a single class and protocol that are used to facilitate communication between applications and graphics/digitizing tablets.  The TabletKit generates application-defined events for tablets with an optional pressure and angle sensitive stylus, a 4-button cursor, or a 16-button cursor. In addition, the TabletKit provides an API for developers to create their own bundles for reading data from tablets with currently unsupported data formats. The TabletKit currently supplies two bundles for reading the MM/SummaSketch
\f1 â
\f0  and UIOF/Microgrid binary data formats.
\pard\f2\b\fs16\li2100\fc0\cf0 \
\
\
\

\fs48 TabletKit Philosophy\

\fs16 \

\pard\tx2480\tx2860\tx3240\f0\b0\fs28\li2100\fc0\cf0 The TabletKit consists of one class: 
\b TabletDriver
\b0 , a single protocol: 
\b TabletReader
\b0 , and two bundles: 
\b SummaMMBinaryReader.bundle,
\b0  and 
\b SummaUIOFBinaryReader.bundle
\b0 . The example application 
\b PenDraw.app
\b0  uses the TabletKit to draw in a window and is provided for instructional purposes only. The following subsections outline the philosophy of the TabletKit, leaving detailed descriptions of class and protocol methods to their specific documentation.
\pard\fs16\li2100\fc0\cf0 \
\
\

\f2\b\fs36 NEXTSTEP
\f1\b0 ä
\f2\b  Mouse Events and the TabletKit\

\fs16 \

\pard\tx2480\tx2860\tx3240\f0\b0\fs28\li2100\fc0\cf0 The NEXTSTEP event system currently provides partial support for tablet related events. But in order to achieve this, tablet information is disguised in the form of mouse events with some additional information such as stylus pressure if the tablet supports it. The tablet input device is therefore limited to controlling the mouse cursor, and serves merely as a mouse substitute. The TabletKit provides a model whereby the tablet input device and mouse operate independently of one another. Thus, separate events are generated for tablet activity versus mouse activity. The 
\b NXEvent
\b0  structure is still the vehicle for housing event information during transport, but application-defined events replace standard mouse events as the event type. Consequently, creation of  applications relying on tablet information for digitizing graphs, maps, and other images, in addition to free hand drawing and many other graphical activities, can proceed independent of both the mouse and a specific display area of the screen. Furthermore, the TabletKit fully supports various features common to many tablets including:\
\
	·	transmission control settings (baud rate, parity, etc.)\
	·	communication protocol settings\
	·	alternate report formats and report frequency\
	·	resolution and orientation settings\
	·	stylus pressure and angle information\
	·	4-button/16-button cursor information	·	multi-tablet support\
\
These features (and others) may be accessed by the 
\b sendCommandsToTablet:
\b0  method which assumes the tablet supports ascii command requests.\

\pard\fs16\li2100\fc0\cf0 \
\

\f2\b\fs36 Responding to Application-Defined Events\

\fs16 \

\pard\tx2480\tx2860\tx3240\f0\b0\fs28\li2100\fc0\cf0 To respond to application-defined events generated by the TabletKit, an application must implement the 
\b applicationDefined:
\b0  method in the Application's delegate. The appropriate delegate connection must be made within Interface Builder or programmatically. The application-defined events can then be handled like any other event type, performing the desired actions based on the information contained within the 
\b NXEvent
\b0  structure.\

\pard\fs16\li2100\fc0\cf0 \
\

\f2\b\fs36 The Tablet Reader API
\fs16 \
\

\f0\b0\fs28 The 
\b TabletReader
\b0  protocol describes various details associated with creating custom TabletReader bundles. This API is provided so that developers can create their own bundles for dealing with particular tablet data formats that are currently unsupported. The result is a user extensible system that can  potentially support a plethora of tablet data formats.
\f2\b\fs16 \
\
\

\fs36 Additional Notes
\fs16 \
\

\f0\b0\fs28 In order to use the TabletKit, a tablet must not be installed via the InstallTablet application. This application sets the system to a state where all tablet information is disguised as mouse events. In addition, the InstallTablet application sets serial port B to an unusable state while the tablet driver server is installed. If the tablet has been installed via the InstallTablet application, simply run it again to remove or disable the tablet driver server.\
\
Readers should note that the TabletKit is not implemented as a loadable kernel server. Instead, the driver executes at user level and thus no code is added to the NeXT
\f1 ä
\f0  Mach kernel at boot time.
\fs16 \

\pard\tx2480\tx2860\tx3240\li2100\fc0\cf0 \

}
