{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\ftech Symbol;\f2\fswiss Helvetica;\f3\fmodern Courier;}
\paperw15180
\paperh12580
\margl120
\margr0
{\colortbl;\red0\green0\blue0;}
\f0\b0\i0\ulnone\ql\fs24\fi0\li0\gray0\fc0\cf0\up0\dn0 Release 1.1  Copyright 
\f1 ã
\f0 1995 by Dale Brisinda.  All Rights Reserved.\
\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\pard\f2\b\fs56\li2100\fc1\cf1 TabletDriver\

\fs16\fc0\cf0 \
\
\
\
\

\pard\tx4880\fs28\fi-2780\li4880\fc0\cf0 Inherits From:	
\f0\b0 TabletDriver : Object\

\fs16 \

\f2\b\fs28 Declared In:	
\f0\b0 tabletKit/TabletDriver.h\

\fs16 \

\pard\f2\b\li1360\fc0\cf0 \
\
\
\

\fs36 Class Description\

\fs16 \

\pard\tx2480\tx2860\tx3240\f0\b0\fs28\li2100\fc0\cf0 The TabletDriver class facilitates communication between applications and graphics/digitizing tablets attached to serial ports. This is achieved through generation of application-defined events associated with manipulation of a stylus, 4-button cursor, or 16-button cursor . If the attached tablet has various event processing capabilities, a facility is provided to exploit such capabilities (among other features) via the 
\b sendCommandsToTablet: 
\b0 method. An event-coalescing facility is also provided, and is controllable on a per tablet basis for multi-tablet configurations. This facility is used when close tracking of the input device is required, which is normally the case.\
\
All tablet configuration codes for this class are as defined in the NEXTSTEP system header files 
\b ioctl.h
\b0 , 
\b ttydev.h
\b0 , and 
\b ttychars.h
\b0 . In addition, detailed descriptions and uses of all codes are contained in the
\b  
\b0\i tty(4)
\i0  and
\i  ioctl(2)
\i0  UNIX manual pages. Some of the more frequently used codes are listed below for convenience. The following codes apply only to the 
\b setFlags:
\b0  method, which takes a value that was generated by OR'ing various parity and I/O processing codes defined below, in addition to (potentially) other bit codes defined in the above UNIX manual pages.\
\

\f3\fs24 		#define CBREAK    0x00000002   /* half-cooked mode */\
		#define ECHO      0x00000008   /* echo input */\
		#define RAW       0x00000020   /* no I/O processing */\
		#define ODDP      0x00000040   /* get/send odd parity */\
		#define EVENP     0x00000080   /* get/send even parity */\
		#define ANYP      0x000000c0   /* get any parity/send even */\
		#define LITOUT    0x00200000   /* literal output */\
		#define FLUSHO    0x00800000   /* flush output to terminal */\
		#define PASS8OUT  0x02000000   /* 8 bit no parity for cooked output */\
		#define PASS8     0x08000000   /* 8 bit no parity for cooked input */\

\f0\fs28 \
The following line discipline codes apply only to the 
\b setLineDiscipline: 
\b0 method, which takes a single value signifying the type of communication line that will be used.
\b \

\b0 \

\f3\fs24 		#define OTTYDISC  0            /* old, v7 std tty driver */\
		#define NETLDISC  1            /* line discip for berk net */\
		#define NTTYDISC  2            /* new tty discipline */\
		#define TABLDISC  3            /* tablet discipline */\
		#define SLIPDISC  4            /* serial IP discipline */\
		#define PPPDISC   5            /* Point-to-Point Protocol */\

\f0\fs28 \
The following baud rate codes apply only to the 
\b setInBaud:
\b0  and 
\b setOutBaud:
\b0  methods, which take a single value signifying the speed at which input and output will occur respectively. Be sure to set the graphics tablet to the same baud rate.\
\

\f3\fs24 		#define B0        0            /* hang up dataphone */\
		#define B50       1\
		#define B75       2\
		#define B110      3\
		#define B134      4            /* 134.5 baud */\
		#define B150      5\
		#define B200      6\
		#define B300      7\
		#define B600      8\
		#define B1200     9\
		#define B1800     10\
		#define B2400     11\
		#define B4800     12\
		#define B9600     13\
		#define B19200    14\
		#define B38400    15\

\f0\fs28 \
In order for an application to respond to application-defined events, the application must define the method 
\b applicationDefined:
\b0  in the application's delegate. The 
\b applicationDefined:
\b0  method is automatically invoked when the application receives an application-defined (NX_APPDEFINED) event. It is 
\i extremely important
\i0  that the TabletDriver instance be allocated and initialized 
\i after
\i0  the application has completely initialized itself. Only then can the application safely receive messages from the outside world. The reason for this is that the TabletDriver instance will sometimes send 
\b applicationDefined:
\b0  messages directly to the application's delegate (instead of through the NEXTSTEP event system), as part of the event-coalescing logic, and a completely initialized application delegate is required to safely receive the message. Consequently, a good place for allocating and initializing theTabletDriver instance is within the 
\b appDidInit:
\b0  method.\
\
Application-defined events generated include values for location, tablet identifier, proximity, stylus pressure, stylus angle, button pressed, and the event timestamp. These values are placed within the 
\b NXEvent
\b0  structure defined in the NEXTSTEP header file 
\b dpsclient/event.h
\b0 . A description of  the 
\b NXEvent
\b0  record, of its various components and fields, appears in the following paragraphs. Only the contents of redefined components are listed and explained. Other component definitions are the same as those which appear in  the NEXTSTEP Concepts and General Reference documentation.
\b  
\b0 On a side note, if the attached tablet does not support various features such as providing stylus angle or stylus pressure information, then the corresponding fields in the 
\b NXEvent
\b0  structure should be ignored since they will contain no useful values.\
\

\f3\fs24 		typedef struct _NXEvent \{\
		    int           type        /* application-defined event type */\
		    NXPoint       location;   /* stylus/cursor location */\
		    long          time;       /* millisecond resolution event timestamp */\
		    int           flags;      /* app-defined event type */\
		    unsigned int  window;     /* tablet identifier */\
		    NXEventData   data;       /* additional tablet event information */\
		    DPSContext    ctxt;       /* context number */\
		\} NXEvent;\

\f0\fs28 \
The
\b  type 
\b0 field holds the event type, which is always set to NX_APPDEFINED. This allows the NEXTSTEP event system to differentiate an application-defined event from other NEXTSTEP events, and have the 
\b applicationDefined:
\b0  method automatically invoked in the appropriate class.\
\
The 
\b location
\b0  component holds the current location of the stylus or cursor. The default coordinate system 
\i normally
\i0  has the origin (0,0) set to be at the lower left corner of the tablet. Coordinate values for x and y increase as the stylus/cursor is dragged to the right and upwards respectively. This can be altered by sending the appropriate configuration codes to the tablet. The default configuration depends on the tablet model and should be documented in the user reference manual for the tablet. \
\
The 
\b time 
\b0 field holds the timestamp for the application-defined event. This field contains time measured with millisecond resolution. The time value is the number of milliseconds that have elapsed since some arbitrary point in time. The roll-over period is approximately every 24.9 days. This value differs from the timestamp values used for other NEXTSTEP events. \
\
The 
\b flags
\b0  field holds the app-defined event type. This will always be set to TK_EVENT for application-defined events generated by an instance of the TabletDriver class. Since an application can define any number of its own application-defined events, this field should be used to distinguish between application-defined events generated by your custom applications versus application-defined events generated by an instance of the TabletDriver class. A convenient way of accessing this field is to use the TK_APPSUBTYPE definition listed in the class header file. One note of warning however, make sure your custom applications do not define event subtypes which are equal to TK_EVENT as defined in the class header file.\
\
The 
\b window
\b0  field holds the tablet identifier. Since tablet events cannot meaningfully be associated with a window, we associate them with a tablet instead. This can be useful in a multi-tablet configuration to distinguish between the events generated from one tablet versus the others. A convenient way of accessing this field is to use the TK_TABLETID definition listed in the class header file.\
\
The 
\b data
\b0  component of the 
\b NXEvent
\b0  record is a C union where only the 
\b compound 
\b0 component is utilized. Likewise, the 
\b misc
\b0  component of the 
\b compound
\b0  record is a C union where only the 
\b S
\b0  component is utilized. This structure appears here in abbreviated form showing only those components which are used:\

\fs16 \

\f3\fs24 		typedef union \{\
		    
\i (...unused components deleted...)\
		    
\i0 struct \{\
		        short  reserved;   /* reserved */\
		        short  subtype;    /* event subtype */\
		        union \{\

\i 		            (...unused components deleted...)\

\i0 		            short  S[4];   /* additional tablet event information */\
		        \} misc;\
		    \} compound;\
		\} NXEventData;\

\f0\fs28 \
The 
\b subtype
\b0  field holds the TabletKit event type. This type indicates the event that was generated via manipulation of the tablet input device. All events are self-documenting and correspond to their mirror events as defined in the NEXTSTEP documentation for mouse events. The various LOWERED and RAISED events correspond to events generated when the tablet input device is raised or lowered sufficiently far from, or close to the tablet respectively. This distance is typically around three centimeters, but may vary across tablets. Please see your tablet reference manual for details. A convenient way of accessing this field is to use the TK_SUBTYPE definition listed in the class header file. The TabletKit event type definitions are listed below for easy reference:\
\

\f3\fs24 		/* TabletKit event types. */\
		#define TK_STYLUSLOWERED     0x1\
		#define TK_STYLUSRAISED      0x2\
		#define TK_STYLUSDOWN        0x4\
		#define TK_STYLUSUP          0x8\
		#define TK_STYLUSMOVED       0x10\
		#define TK_STYLUSDRAGGED     0x20\
		#define TK_CURSORLOWERED     TK_STYLUSLOWERED\
		#define TK_CURSORRAISED      TK_STYLUSRAISED\
		#define TK_CURSORDOWN        TK_STYLUSDOWN\
		#define TK_CURSORUP          TK_STYLUSUP\
		#define TK_CURSORMOVED       TK_STYLUSMOVED\
		#define TK_CURSORDRAGGED     TK_STYLUSDRAGGED\

\f0\fs28 \
The 
\b S
\b0  component is an array of 4 elements. A convenient way for accessing the required elements is to use the definitions which appear in the class header file as 
\b NXEvent
\b0  components.  These definitions are listed here for easy reference:\
\

\f3\fs24 		/* NXEvent component definitions. */\
		#define TK_BUTTON            data.compound.misc.S[0]\
		#define TK_CLICKS            data.compound.misc.S[1]\
		#define TK_PRESSURE          data.compound.misc.S[2]\
		#define TK_ANGLE             data.compound.misc.S[3]\
	
\f0\fs28 \
The definition TK_BUTTON references the element at index 0. This element contains the value of the button that was depressed/released on the stylus or cursor. \
\
The definition TK_CLICKS references the element at index 1. This element contains the current click count for a given de/pressed button. The click count can grow arbitrarily large, provided each subsequent click occurs within the current click time and click space thresholds. The click time and click space thresholds for stylus and cursor button clicks are taken from the event status driver, and are therefore the same as specified in the Preferences application for mouse clicks. The click time threshold is the maximum number of seconds that may elapse between two consecutive stylus-down (cursor-down) events and still have them be considered a double-click. The click space threshold is the maximum number of pixels apart that two stylus-down (cursor-down) events may be and still be considered a double-click. For additional event status driver information see the NEXTSTEP developer release notes.\
\
The definition TK_PRESSURE references the element at index 2. This element contains the pressure value for the stylus. The values range from 0 to 255 where 0 represents no pressure, and 255 represents full pressure. \
\
Finally, the definition TK_ANGLE references the element at index 3. This element contains the angle the stylus makes with the tablet surface. The values range from 0 to 90 degrees, where 0 degrees indicates the stylus is horizontal to the tablet surface, and 90 degrees indicates the stylus is perpendicular to the tablet surface. \
\
Possible button values appear as definitions in the class header file. These definitions are listed here for convenience:\
\

\f3\fs24 		/* Button definitions. */\
		#define TK_NOBUTTON          0\
		#define TK_BUTTON1           1   // also the primary stylus button\
		#define TK_BUTTON2           2   // also the secondary stylus button (if present)\
		#define TK_BUTTON3           3   // also the tertiary stylus button (if present)\
		#define TK_BUTTON4           4\
		#define TK_BUTTON5           5\
		#define TK_BUTTON6           6\
		#define TK_BUTTON7           7\
		#define TK_BUTTON8           8\
		#define TK_BUTTON9           9\
		#define TK_BUTTON10          10\
		#define TK_BUTTON11          11\
		#define TK_BUTTON12          12\
		#define TK_BUTTON13          13\
		#define TK_BUTTON14          14\
		#define TK_BUTTON15          15\
		#define TK_BUTTON16          16\

\f2\b\fs16\li1360 \
\
\
\

\pard\fs36\li1360\fc0\cf0 Instance Variables\

\fs16 \

\pard\tx2860\f0\b0\fs28\li2100\fc0\cf0 id 
\b readerBundle
\b0 ;\
id 
\b tabletReader
\b0 ;\
int 
\b tabletFD
\b0 ;\
int 
\b flags
\b0 ;\
int 
\b inBaud
\b0 ;\
int 
\b outBaud
\b0 ;\
int 
\b lineDiscipline
\b0 ;\
char 
\b tabletDevice[MAXPATHLEN+1]
\b0 ;\
BOOL 
\b deviceTracking
\b0 ;\
NXSize
\b  clickSpaceThresh
\b0 ;
\b \

\pard\tx6140\tx9660\tx10180\b0\fs16\fi-4040\li6140\fc0\cf0 \
\
\

\fs28 readerBundle	The currently loaded reader bundle.
\pard\f2\b\fs16\li1360\fc0\cf0 \

\f0\b0 \

\pard\tx6140\tx9660\tx10180\fs28\fi-4040\li6140\fc0\cf0 tabletReader	The principal class for the currently loaded reader bundle.
\pard\f2\b\fs16\li1360\fc0\cf0 \

\f0\b0 \

\pard\tx6140\tx9660\tx10180\fs28\fi-4040\li6140\fc0\cf0 tabletFD	The tablet file descriptor for the specified device file.\

\pard\fs16\li1360\fc0\cf0 \

\pard\tx6140\tx9660\tx10180\fs28\fi-4040\li6140\fc0\cf0 flags	Value of 
\b sg_flags
\b0  in the 
\b sgttyb
\b0  structure for the device.
\pard\f2\b\fs16\li1360\fc0\cf0 \

\f0\b0 \

\pard\tx6140\tx9660\tx10180\fs28\fi-4040\li6140\fc0\cf0 inBaud	Tablet input baud rate.\

\pard\fs16\li1360\fc0\cf0 \

\pard\tx6140\tx9660\tx10180\fs28\fi-4040\li6140\fc0\cf0 outBaud	Tablet output baud rate.
\pard\f2\b\fs16\li1360\fc0\cf0 \

\f0\b0 \

\pard\tx6140\tx9660\tx10180\fs28\fi-4040\li6140\fc0\cf0 lineDiscipline	Line discipline for controlling communication line.
\fs16 \
\

\fs28 tabletDevice	The tablet device file name.
\f2\b\fs16 \

\f0\b0 \

\fs28 deviceTracking	YES if event-coalescing is to be performed, otherwise NO.\

\fs16 \

\fs28 clickSpaceThresh	Click space threshold for multiple clicks.
\f2\b\fs16 \

\pard\li1360\fc0\cf0 \

\pard\tx6140\tx9660\tx10180\li1360\fc0\cf0 \
\
\
\

\pard\fs36\li1360\fc0\cf0 Method Types\

\fs16 \

\pard\tx6140\tx9660\tx10180\f0\b0\fs28\fi-4040\li6140\fc0\cf0 Initializing and freeing	
\f1 -
\f0  initTabletDevice:tabletReader:\

\f1 	-
\f0  
\fc1\cf1 initTabletDevice:
\fc0\cf0 \
	
\f1 -
\f0  initTabletReader:\

\f1 	-
\f0  
\fc1\cf1 init\

\f1\fc0\cf0 	-
\f0  
\fc1\cf1 free\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx6140\tx9660\tx10180\fs28\fi-4040\li6140\fc0\cf0 Bundle and device queries	
\f1 -
\f0  readerBundle\

\f1 	-
\f0  
\fc1\cf1 tabletReader\

\f1\fc0\cf0 	-
\f0  
\fc1\cf1 tabletFD
\pard\tx9660\tx10180\fi-520\li6640\fc0\cf0 \

\pard\tx6140\tx9660\tx10180\f1\fi-4040\li6140\fc0\cf0 	-
\f0  
\fc1\cf1 tabletDevice
\pard\tx9660\tx10180\fi-520\li6640\fc0\cf0 \

\pard\tx6140\tx9660\tx10180\fs16\fi-4040\li6140\fc0\cf0 \

\fs28 Tablet device configuration	
\f1 -
\f0  setFlags:\

\f1 	-
\f0  setInBaud:\

\f1 	-
\f0  setOutBaud:\

\f1 	-
\f0  setLineDiscipline:\

\f1 	-
\f0  flags\

\f1 	-
\f0  inBaud\

\f1 	-
\f0  outBaud\

\f1 	-
\f0  lineDiscipline\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx6140\tx9660\tx10180\fs28\fi-4040\li6140\fc0\cf0 Tracking the input device	
\pard\tx9660\tx10180\f1\fi-520\li6640\fc0\cf0 -
\f0  set
\pard\tx6140\tx9660\tx10180\fi-4040\li6140\fc0\cf0 DeviceTracking
\pard\tx9660\tx10180\fi-520\li6640\fc0\cf0 :\

\f1 -
\f0  deviceTracking\

\fs16 \

\pard\tx6140\tx9660\tx10180\fs28\fi-4040\li6140\fc0\cf0 Sending the tablet commands	
\f1 -
\f0  sendCommandsToTablet:\

\pard\tx9660\tx10180\fs16\fi-520\li6640\fc0\cf0 \

\pard\tx6140\tx9660\tx10180\fs28\fi-4040\li6140\fc0\cf0 Flushing device queues	
\f1 -
\f0  flushInQueues\

\f1 	-
\f0  flushOutQueues\

\f1 	-
\f0  flushAllQueues\

\pard\tx9660\tx10180\f2\b\fs16\li1360\fc0\cf0 \
\
\
\
\

\pard\fs36\li1360\fc0\cf0 Instance Methods\

\fs16 \

\pard\tx2480\tx2860\tx3240\fs28\li2100\fc0\cf0 deviceTracking\

\f1\b0 	-
\f0  (BOOL)
\b deviceTracking\

\b0\fs16 \

\fs28 Returns TRUE if device tracking is on, otherwise returns FALSE.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b setDeviceTracking:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 flags\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  (int)
\b flags
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Returns a copy of the 
\i sg_flags
\i0  field in the 
\i sgttyb
\i0  structure for the tablet device. 
\fc1\cf1 The 
\i sg_flags
\i0  field contains several bits that determine the system's treatment of the tablet device. 
\fc0\cf0 All tablet configuration codes for this class are as defined in the NEXTSTEP system header files 
\b ioctl.h
\b0 , 
\b ttydev.h
\b0 , and 
\b ttychars.h
\b0 . Detailed descriptions and uses of all codes are contained in the
\b  
\b0\i tty(4)
\i0  and
\i  ioctl(2)
\i0  UNIX manual pages.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b setFlags:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 flushAllQueues\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b flushAllQueues
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Flushes input and output queues of the tablet device and returns 
\b self
\b0 .\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b flushInQueues, 
\f1\b0 -
\f0  
\b flushOutQueues\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 flushInQueues\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b flushInQueues
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Flushes input queues of the tablet device and returns 
\b self
\b0 .\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b flushAllQueues, 
\f1\b0 -
\f0  
\b flushOutQueues\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 flushOutQueues\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b flushOutQueues
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Flushes output queues of the tablet device and returns 
\b self
\b0 .\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b flushAllQueues, 
\f1\b0 -
\f0  
\b flushInQueues\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 free\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b free
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Removes the posted file descriptor associated with the tablet device, and frees the 
\i tabletReader
\i0  and 
\i readerBundle
\i0  instances. The memory used by the class is then freed and the superclasses return value is returned. \

\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 inBaud\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  (int)
\b inBaud
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Returns the current input baud rate. This is the value of the 
\i sg_ispeed
\i0  field in the 
\i sgttyb
\i0  structure for the tablet device. The available baud rates appear in the class description, 
\b ttydev.h 
\b0 system header file, and 
\i tty(4)
\i0  UNIX manual page.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b outBaud, 
\f1\b0 -
\f0  
\b setInBaud:, 
\f1\b0 -
\f0  
\b setOutBaud:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 init\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b init
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Initializes a newly allocated TabletDriver instance by passing the default device file and reader bundle to the 
\b initTabletDevice:tabletReader: 
\b0 method. The default device file is /dev/ttyb, and the default reader bundle is SummaUIOFBinaryReader.bundle located in /LocalLibrary/TabletReaders. Returns what is returned by the 
\b initTabletDevice:tabletReader: 
\b0 method.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b initTabletDevice:, 
\f1\b0 -
\f0  
\b initTabletDevice:tabletReader:, 
\f1\b0 -
\f0  
\b initTabletReader:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 initTabletDevice:\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b initTabletDevice:
\b0 (const char *)
\i deviceName
\pard\b\i0\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Initializes a newly allocated TabletDriver instance by passing 
\i deviceName
\i0  to 
\b initTabletDevice:tabletReader: 
\b0 in addition to  the default reader bundle. The default reader bundle is SummaUIOFBinaryReader.bundle located in /LocalLibrary/TabletReaders. Returns what is returned by the 
\b initTabletDevice:tabletReader: 
\b0 method.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b init, 
\f1\b0 -
\f0  
\b initTabletDevice:tabletReader:, 
\f1\b0 -
\f0  
\b initTabletReader:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 initTabletDevice:tabletReader:\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b initTabletDevice:
\b0 (const char *)
\i deviceName
\b\i0  tabletReader:
\b0 (const char *)
\i bundleName
\pard\b\i0\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Initializes a newly allocated TabletDriver object. This method is the designated initializer for the TabletDriver class. The name of the device file pointed to by 
\i deviceName
\i0  is opened for both reading and writing. The 
\i deviceName
\i0  must be the full path name to a device file located in  /dev or /private/dev. Serial line device files typically used with graphics tablets are /dev/ttyb or /dev/ttya. The device  is set to ªexclusive useº mode so any other attempts to open the same device file will fail. Additional tablet initialization includes setting the device to 9600 baud input and output, raw I/O, no parity, a tablet line discipline, non-blocking reads, blocking writes, and flushing of all I/O device queues. If alternate device settings are required, use the tablet device configuration methods supplied. In most cases these methods should provide ample configuration options. However, in the event further configuration is required, obtain a copy of the device file descriptor via the 
\b tabletFD
\b0  method, and make the appropriate 
\b ioctl()
\b0  function calls as outlined in 
\i tty(4)
\i0  of the UNIX manual pages.\
\
The name of the bundle for reading data from the tablet is pointed to by 
\i bundleName
\i0 . Any suffix extensions for the bundle must be included in 
\i bundleName
\i0 . The bundle is loaded by searching (in order) the following directories:\
\
		·	~/Library/TabletReaders\
		·	/LocalLibrary/TabletReaders\
		·	/NextLibrary/TabletReaders\
\
where 
\b ~
\b0  represents the user's home directory. When the bundle is loaded, the principal class is also loaded and instantiated. This is the class which must conform to the TabletReader protocol and implement the required methods. If any errors occur in opening the device file or loading the bundle, nil is returned, and a message describing the error is printed to the console.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b init, 
\f1\b0 -
\f0  
\b initTabletDevice:, 
\f1\b0 -
\f0  
\b initTabletReader:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 initTabletReader:\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b initTabletReader:
\b0 (const char *)
\i bundleName
\pard\b\i0\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Initializes a newly allocated TabletDriver instance by passing the default device file and 
\i bundleName
\i0  to the 
\b initTabletDevice:tabletReader: 
\b0 method. The default device file is /dev/ttyb. Returns what is returned by the 
\b initTabletDevice:tabletReader: 
\b0 method.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b init, 
\f1\b0 -
\f0  
\b initTabletDevice:, 
\f1\b0 -
\f0  
\b initTabletDevice:tabletReader:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 lineDiscipline\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  (int)
\b lineDiscipline
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Returns the current line discipline for the tablet device. See the class description for the various types of line disciplines.
\b \

\b0\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b setLineDiscipline:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 outBaud\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  (int)
\b outBaud
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Returns the current output baud rate. This is the value of the 
\i sg_ospeed
\i0  field in the 
\i sgttyb
\i0  structure for the tablet device. The available baud rates appear in the class description, 
\b ttydev.h 
\b0 system header file, and 
\i tty(4)
\i0  UNIX manual page.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b inBaud, 
\f1\b0 -
\f0  
\b setInBaud:, 
\f1\b0 -
\f0  
\b setOutBaud:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 readerBundle\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b readerBundle
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Returns the reader bundle instance that contains the principal class. The returned object is an NXBundle instance.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b tabletReader\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 sendCommandsToTablet:\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b sendCommandsToTablet:
\b0 (const char *)
\i commandString
\pard\b\i0\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Send commands contained in the command string directly to the tablet. This method is useful if the tablet supports various features which can be invoked by sending the appropriate ascii command request. Most modern tablets do support command requests. Features typically include several types of reporting modes, resolution settings and screen mappings, coordinate system settings, and others.\

\fs16 \
\

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\

\pard\fs28\fi-380\li2480\fc0\cf0 setDeviceTracking\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b setDeviceTracking:
\b0 (BOOL)
\i flag
\pard\b\i0\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 This method turns tablet event-coalescing on or off. If 
\i flag
\i0  is FALSE coalescing is turned off, otherwise it is turned on (the default). Event-coalescing is an optimization that is useful when tracking the tablet input device. When the input device is moved, numerous events may flow into the event queue (depending on the current tablet reporting mode). To reduce the number of events awaiting removal by the application, adjacent input device-moved events are replaced by the most recent event of the semi-contiguous event group. Other application-defined events do not qualify as event group delimiters but are skipped. The same strategy is adopted for input device-dragged events (button depressed while moving), with the addition that an input device-up event replaces input device-dragged events that come before it in the queue. This method mimics the 
\b DPSSetTracking()
\b0  function for NEXTSTEP mouse events. Returns 
\b self
\b0 .\

\fs16 \

\f2\b\fs28 See also: 
\f1\b0 -
\f0  
\b deviceTracking\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 setFlags:\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b setFlags:
\b0 (int)
\i flagsCode
\pard\b\i0\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Sets the 
\i sg_flags
\i0  field in the 
\i sgttyb
\i0  structure for the tablet device. 
\fc1\cf1 The 
\i sg_flags
\i0  field contains several bits that determine the system's treatment of the tablet device. 
\fc0\cf0 All tablet configuration codes for this class are as defined in the NEXTSTEP system header files 
\b ioctl.h
\b0 , 
\b ttydev.h
\b0 , and 
\b ttychars.h
\b0 . Detailed descriptions and uses of all codes are contained in the
\b  
\b0\i tty(4)
\i0  and
\i  ioctl(2)
\i0  UNIX manual pages.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b flags\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 setInBaud:\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b setInBaud:
\b0 (int)
\i speed
\pard\b\i0\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Sets the input baud rate for the tablet device. This corresponds to the 
\i sg_ispeed
\i0  field in the 
\i sgttyb
\i0  structure for the tablet device. The available baud rates appear in the class description, 
\b ttydev.h 
\b0 system header file, and 
\i tty(4)
\i0  UNIX manual page.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b inBaud, 
\f1\b0 -
\f0  
\b outBaud, 
\f1\b0 -
\f0  
\b setOutBaud:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 setLineDiscipline:\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b setLineDiscipline:
\b0 (int)
\i lineDisciplineCode
\pard\b\i0\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Sets the current line discipline for controlling the tablet device communication line. The default line discipline is TABLDISC.  See the class description, 
\b ioctl.h
\b0  system header file, or 
\i tty(4)
\i0  UNIX manual page  for the various types of line disciplines. Returns 
\b self
\b0 .\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b lineDiscipline\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 setOutBaud:\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b setOutBaud:
\b0 (int)
\i speed
\pard\b\i0\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Sets the output baud rate for the tablet device. This corresponds to the 
\i sg_ospeed
\i0  field in the 
\i sgttyb
\i0  structure for the tablet device. The available baud rates appear in the class description, 
\b ttydev.h 
\b0 system header file, and 
\i tty(4)
\i0  UNIX manual page.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b inBaud, 
\f1\b0 -
\f0  
\b outBaud, 
\f1\b0 -
\f0  
\b setInBaud:\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 tabletDevice\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  (const char *)
\b tabletDevice
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Returns the full path name to the serial line device file located in /dev or /private/dev that is currently opened for both reading and writing. Serial line device files typically used with graphics tablets are /dev/ttyb or /dev/ttya.\

\fs16 \

\f2\b\fs28 See also:  
\f0 «method»\

\b0\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 tabletFD\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  (int)
\b tabletFD
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Returns a copy of the tablet device file descriptor. This can be useful in the event additional configuration is required that is not provided by the existing tablet configuration methods. The tablet device file descriptor can be used in conjunction with the appropriate 
\b ioctl()
\b0  function calls as outlined in 
\i tty(4)
\i0  of the UNIX manual pages.\

\fs16 \

\pard\tx7140\f2\b\fi-380\li2480\fc0\cf0 \
\
\

\pard\fs28\fi-380\li2480\fc0\cf0 tabletReader\

\pard\tx6140\tx9660\tx10180\f1\b0\fi-760\li3240\fc0\cf0 -
\f0  
\b tabletReader
\pard\fi-760\li3240\fc0\cf0 \

\pard\tx2480\tx2860\tx3240\b0\fs16\li2100\fc0\cf0 \

\fs28 Returns the principal class instance of the 
\i readerBundle
\i0 . The principal class instance reads and converts tablet data at the input queue. The returned object conforms to the TabletReader protocol.\

\fs16 \

\f2\b\fs28 See also:  
\f1\b0 -
\f0  
\b readerBundle\

\b0\fs16 \
\

}
