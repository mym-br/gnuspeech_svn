{\rtf0\ansi{\fonttbl\f0\fswiss Helvetica;\f1\fmodern Courier;\f2\fnil Times-Roman;}
\paperw11120
\paperh11940
\margl120
\margr120
{\colortbl;\red0\green0\blue0;}
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\f0\b\i0\ulnone\fs36\fc0\cf0 TIFFandEPS 
\b0\fs24 \

\pard\tx620\tx1240\tx1860\tx2480\tx3100\tx3720\tx4340\tx4980\tx5600\tx6220\fc1\cf1 by Sharon Zakhour, NeXT Developer Support Team\
\
Valid for 3.0\

\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fc0\cf0 \

\b\fs28 Overview
\b0\fs24 \
\
This example shows how to open EPS or TIFF images and save them back out as EPS or TIFF -- converting the image in the process.  The example was originally written to convert from EPS-format images to TIFF-format images.  The implementation used draws the image into an instance of ImageView.  This view is then inserted as the contentView of the window created by ImageReader to the exact size of the image.  The TIFF version is generated using the 
\f1 initData:fromRect:
\f0  method of NXBitmapImageRect.  This method allows you to create bitmap data from anywhere on the screen quickly and easily but has some inherent drawbacks:  as the bits are being read from the windowserver backing store the resulting image is limited to the window resolution and will contain any dithering artifacts generated by the windowserver.  \
\
Excerpted from the 
\f1 initData:fromRect:
\f0  description in the NXBitmapImageRep spec sheet:\
\

\pard\tx3120\tx3620\tx4120\f2\fs28\li1440\fc0\cf0 This method uses PostScript imaging operators to read the image data into the 
\i data
\i0  buffer; the object is then created from that data.  The object is initialized with information about the image obtained from the Window Server.\

\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\f0\fs24\fc0\cf0 \
The NXImage classes do not contain support for converting an image to EPS so the View method 
\f1 copyPScodeInside:to:
\f0  is used to convert in this direction.\
\

\b\fs28\fc1\cf1 Disclaimer
\pard\tx620\tx1240\tx1860\tx2480\tx3100\tx3720\tx4340\tx4980\tx5600\tx6220\b0\fs24\fc1\cf1 \
This app is best suited to converting EPS to TIFF and TIFF to EPS.  When saving an EPS file which was read in as an EPS file [or likewise when saving a TIFF read in as a TIFF] no intelligent decisions are made in the code.  That, of course, is left to the reader.  The result [in both cases] would be to create an EPS or TIFF file that contains any dithering employed by the window server and would not be identical to the original.\

\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fc0\cf0 \

\fc1\cf1 \

\b\fs28 Program Organization
\b0\fs24 \
\

\b How to build the nib files
\b0 \
There is one nib file in this example:\
\

\pard\tx2720\tx2740\tx3880\tx4800\tx5380\tx5760\tx6720\tx7680\tx8640\tx9600\fi-2740\li2740\fc1\cf1 TIFFandEPS.nib		The main nib file contains the main menu and the classes.  The file's owner for this nib file is ImageReader -- a subclass of Object and the application delegate.  The nib file also contains an instance of ImageReader and the window containing the accessory view for the SavePanel.\

\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fc1\cf1 \
\
\

\b Classes in the Application\

\b0 \

\pard\tx960\tx2020\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fi-2020\li2020\fc1\cf1 ImageReader 	Subclass of Object.   This class serves both as the application delegate and the delegate of all windows that it creates.  The 
\f1 openRequest:
\f0  method is called when the user selects "Open Image..." from the menu.  Initially the "Save Image..." menu item is disabled.  When a window is opened with an EPS or TIFF image, the "Save Image..." menu item becomes enabled.  The object is able to detect this because it has implemented the window delegate methods 
\f1 windowWillClose:
\f0   and 
\f1 windowDidBecomeMain:
\f0 .  The 
\f1 saveRequest:
\f0  method is called when the user selects "Save Image..." from the menu.  Each window is created to the exact size of the image -- ScrollViews are not used.\

\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fi-1940\li1940\fc1\cf1 \

\pard\tx960\tx2020\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fi-2020\li2020\fc1\cf1 ImageView	Subclass of View.  This class is pretty simple.  The 
\f1 initFromImage:
\f0  method initializes an instance of this class and saves the NXImage instance into an internal instance variable.  The 
\f1 drawSelf::
\f0  method composites the entire NXImage instance.  One of the advantages of using NXImage over the representation classes (like NXBitmapImageRep) is that it maintains an offscreen cache that supports compositing -- much faster than drawing the representation each time.\

\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fi-1940\li1940\fc1\cf1 \

\pard\tx960\tx2020\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fi-2020\li2020\fc1\cf1 PopAndForm	A little object that uses a Popup and a FormCell together.   This object is hooked up to a FormCell and a PopUp so that the form can be used to add options to the Popup.  As far as actions go, the "Specify" item in the popup menu needs to be hooked to "enableForm:" in the object and the Form needs to be hooked to "newValue:" as well.
\pard\tx560\tx1120\tx2060\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\fi-2060\li2060\fc1\cf1 \
\

\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\b\fs28\fc1\cf1 Topics Of Interest\

\b0\fs24 \

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\b\fc1\cf1 How to implement an accessory panel\

\b0 The accessory panel feature allows a quick and easy mechanism for customizing any of the standard panels.  In this example the accessory panel allows the user to select what format to use when saving the image:  EPS or TIFF.  And if a TIFF image the user may select the resolution and the compression type.  Because this view contained quite a number of controls I visually separated it from the rest of the save panel using a box that I placed underneath all of the controls.  I then increased its width to be wider than the view (cropping the vertical lines).  This gives the pleasing effect of two horizontal lines above and below the view.  The accessory panel is installed in the save panel with the 
\f1 setAccessoryView:
\f0  method.
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fc1\cf1 \
\

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\b\fc1\cf1 How to enable/disable menu items\

\b0 Initially the "Save Image..." menu item is disabled in IB.  This menu item becomes enabled at run time when any EPS or TIFF images are opened.  This is done using the window delegate methods 
\f1 windowWillClose:
\f0  and 
\f1 windowDidBecomeMain:
\f0 .  The 
\f1 windowWillClose:
\f0  method is called when a window is 
\i about
\i0  to close.  Examining the current window count determines whether the user is about to close the last remaining window -- and if so, the "Save Image..." menu item is again disabled.  Likewise 
\f1 windowDidBecomeMain:
\f0  is invoked when any window becomes the main window and the "Save Image..." menu item is then enabled.  This does cause the menu item to be redundantly enabled at times but is harmless and has no visual side effects.
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fc1\cf1 \

\b\fs28 \

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fs24\fc1\cf1 How to enable/disable items in the accessory view of the Save Panel\

\b0 The accessory view for the save panel contains three radio button matrices.  The TIFF vs. EPS matrix causes all other controls in the view to be invalid when the EPS item is selected.  This is backed up with the visual cue of enabling/disabling the other controls as appropriate.  The 
\f1 selectFormat:
\f0  method in ImageReader is the target action of the TIFF/EPS matrix.  It determines whether it should enable or disable the other controls in the view.  It also sets the required file type on the SavePanel to the appropriate extension -- .eps or .tiff.  \
\
Within the TIFF world, the user may select from the DPI matrix [one of the selections allows the user to specify a nonstandard DPI] and from the compression matrix -- LZW vs. JPEG.  When LZW is selected the JPEG compression factor field is invalid.  So a second level of control enabling/disabling is implemented to handle this.  The 
\f1 selectCompression:
\f0  method in ImageReader is the target action of the LZW/JPEG matrix.  In fact, when the user selects TIFF in the first matrix the 
\f1 selectFormat:
\f0  calls the 
\f1 selectCompression:
\f0  method to determine what state it should re-set the JPEG controls to.\

\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\b\fs28\fc1\cf1 \

\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\fs24\fc1\cf1 How to use an alert panel\

\b0 Most of the error conditions in this example are handled using the perror(3) utility.  However the alert panel feature is used when the user attempts to save a TIFF file using JPEG compression on an image unsuitable for JPEG.  The 
\f1 NXRunAlertPanel()
\f0  function throws the app into a modal loop.
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\fc1\cf1 \

\b\fs28 \
Bugs\

\pard\tx620\tx1240\tx1860\tx2480\tx3100\tx3720\tx4340\tx4980\tx5600\tx6220\b0\fs24\fc1\cf1 This app can tickle a bug in 2.0 when converting from EPS to TIFF   (This bug has been fixed for 3.0.):\
Bug #13606 has been described as an ugly line at the right end of images when printing and occurs if a TIFF file is 2-bit grayscale, has alpha, is not a multiple of 4 pixels wide, and has a "bad" alpha at the end of the scanline.  User workarounds:   Make sure your TIFF doesn't have alpha, or is a multiple of 4 pixels wide, or doesn't have illegal alpha.  The last item is hard to do (once the image contains the bad alpha), but the others aren't so bad...\

}
