head	1.14;
access;
symbols;
locks;
comment	@ * @;


1.14
date	94.06.29.22.39.07;	author dale;	state Exp;
branches;
next	1.13;

1.13
date	94.06.03.19.28.24;	author dale;	state Exp;
branches;
next	1.12;

1.12
date	93.08.27.03.51.06;	author dale;	state Exp;
branches;
next	1.11;

1.11
date	93.07.23.07.33.00;	author dale;	state Exp;
branches;
next	1.10;

1.10
date	93.07.14.22.11.48;	author dale;	state Exp;
branches;
next	1.9;

1.9
date	93.07.04.17.57.23;	author dale;	state Exp;
branches;
next	1.8;

1.8
date	93.06.25.23.38.25;	author dale;	state Exp;
branches;
next	1.7;

1.7
date	93.06.24.07.40.50;	author dale;	state Exp;
branches;
next	1.6;

1.6
date	93.06.18.08.45.44;	author dale;	state Exp;
branches;
next	1.5;

1.5
date	93.06.05.07.37.08;	author dale;	state Exp;
branches;
next	1.4;

1.4
date	93.06.03.00.37.58;	author dale;	state Exp;
branches;
next	1.3;

1.3
date	93.06.01.08.03.24;	author dale;	state Exp;
branches;
next	1.2;

1.2
date	93.05.30.08.24.27;	author dale;	state Exp;
branches;
next	1.1;

1.1
date	93.05.20.06.03.35;	author dale;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Overrided default -moveBy:: to automatically adjust topmost visible line and leftmost visible
column, in addition to doing the normal thing. It should no longer be necessary for set... methods
for these instance variables to be used.
@
text
@/*
 *    Filename:	Page.m 
 *    Created :	Wed May 19 14:37:16 1993 
 *    Author  :	Dale Brisinda
 *		<dale@@pegasus.cuc.ab.ca>
 *
 *    Last modified on "Wed Jun 29 15:33:42 1994"
 *
 * $Id: Page.m,v 1.13 1994/06/03 19:28:24 dale Exp $
 *
 * $Log: Page.m,v $
 * Revision 1.13  1994/06/03  19:28:24  dale
 * Changed "LastEditDate" to "Last modified on" within header.
 *
 * Revision 1.12  1993/08/27  03:51:06  dale
 * Added methods to start and stop cursor blinking.
 *
 * Revision 1.11  1993/07/23  07:33:00  dale
 * *** empty log message ***
 *
 * Revision 1.10  1993/07/14  22:11:48  dale
 * *** empty log message ***
 *
 * Revision 1.9  1993/07/04  17:57:23  dale
 * *** empty log message ***
 *
 * Revision 1.8  1993/06/25  23:38:25  dale
 * Added bookmarkNumber for dealing with default bookmark names.
 *
 * Revision 1.7  1993/06/24  07:40:50  dale
 * Added cursor drawing in -drawSelf::. Also moved some methods from TactileDisplay to here.
 *
 * Revision 1.6  1993/06/18  08:45:44  dale
 * Removed right margin.
 *
 * Revision 1.5  1993/06/05  07:37:08  dale
 * *** empty log message ***
 *
 * Revision 1.4  1993/06/03  00:37:58  dale
 * *** empty log message ***
 *
 * Revision 1.3  1993/06/01  08:03:24  dale
 * *** empty log message ***
 *
 * Revision 1.2  1993/05/30  08:24:27  dale
 * *** empty log message ***
 *
 * Revision 1.1  1993/05/20  06:03:35  dale
 * Initial revision
 *
 */

#import "TNTDefinitions.h"
#import "Document.h"
#import "Page.h"

/* System cursor and mark image names. */
#define SYSTEM_CURSOR_IMAGE "SystemCursor.tiff"
#define MARK_IMAGE "Mark.tiff"

@@implementation Page

static void blinkSystemCursor(DPSTimedEntry tag, double now, Page *self)
{
    [self setSystemCursorOnScreen:![self systemCursorOnScreen]];   // toggle on screen value
    [self lockFocus];
    PSsetinstance(YES);      // turn on instance drawing
    PSnewinstance();         // erase all previous instance drawing
    [self updateSystemCursor];
    [self updateMark];       // mark must be redrawn if we just erased it
    [self showUserCursor];   // user cursor might have to be redrawn if we just erased it
    PSsetinstance(NO);       // turn off instance drawing
    [self unlockFocus];
}

static void blinkMark(DPSTimedEntry tag, double now, Page *self)
{
    [self setMarkOnScreen:![self markOnScreen]];   // toggle on screen value
    [self lockFocus];
    PSsetinstance(YES);          // turn on instance drawing
    PSnewinstance();             // erase all previous instance drawing
    [self updateMark];
    [self updateSystemCursor];   // system cursor must be redrawn if we just erased it
    [self showUserCursor];       // user cursor might have to be redrawn if we just erased it
    PSsetinstance(NO);           // turn off instance drawing
    [self unlockFocus];
}


/* INITIALIZING AND FREEING *************************************************************************/


/* This method is the designated initializer for the class. Note, the Page object defaults to normal
 * page margins for text objects, except that the right margin is set to 0.0. Returns self.
 */
- initFrame:(const NXRect *)frameRect text:(const char *)theText alignment:(int)mode
{
    NXCoord lMgn, rMgn, tMgn, bMgn;

    [super initFrame:frameRect text:theText alignment:mode];

    // get rid of right margin
    [self getMarginLeft:&lMgn right:&rMgn top:&tMgn bottom:&bMgn];
    [self setMarginLeft:lMgn right:0.0 top:tMgn bottom:bMgn];

    // initialize page locations
    leftVisibleCol = 1;
    topVisibleLine = 1;
    pageNumber = 1;
    pageNode = nil;
    
    // initialize master document
    masterDocument = nil;

    // initialize timed-entry handles
    systemCursorTE = (DPSTimedEntry)0;
    markTE = (DPSTimedEntry)0;

    // initialize cursor screen status (pretend they are visible to avoid initial flicker)
    systemCursorOnScreen = YES;
    markOnScreen = YES;

    // get cursor images
    systemCursor = [NXImage findImageNamed:SYSTEM_CURSOR_IMAGE];
    mark = [NXImage findImageNamed:MARK_IMAGE];
    return self;
}

- initFrame:(const NXRect *)frameRect
{
    return [self initFrame:frameRect text:NULL alignment:NX_LEFTALIGNED];
}

/* Removes all cursor related timed-entries. Nothing else needs to be freed, that is, nodes are freed
 * elsewhere (when node lists are freed).
 */
- free
{
    // remove system cursor timed-entry
    if (systemCursorTE) {
	DPSRemoveTimedEntry(systemCursorTE);
	systemCursorTE = (DPSTimedEntry)0;
    }
    // remove mark timed-entry
    if (markTE) {
	DPSRemoveTimedEntry(markTE);
	markTE = (DPSTimedEntry)0;
    }
    return [super free];
}


/* ADJUSTMENT METHODS *******************************************************************************/


/* Resets our position such that we are positioned within the scroll view with the left margin and top
 * margin coincident with the left side and top side of the scroll view respectively. We convert the
 * bounds rectangle to our superview's superview's coordinate system (normally a scroll view). The top
 * visible line and left visible column are set to 1 to reflect the new position. Returns self.
 */
- resetPosition
{
    NXRect pageBounds;

    pageBounds = bounds;
    [self convertRect:&pageBounds toView:[superview superview]];
    [super moveBy: -pageBounds.origin.x + 2.0 :-pageBounds.origin.y + 2.0];
    topVisibleLine = leftVisibleCol = 1;
    return self;
}

/* Calculate the number of lines and columns in the page. We assume that the entire page is of a 
 * single constant-width font. Note that we take the ceiling function of the actual font line height 
 * and width since font heights and widths are expressend in decimals, and the NeXT displays in pixel
 * units (equivalent to integers). For example, the width of a character in Ohlfs 12.0 is 7.2, and the
 * NeXT rounds this value upward to 8.0 when actually displaying. Therefore to get 8.0, we must add 
 * 0.8 or simply take ceil(7.2). As long as the font is a constant width font, the columnsInPage 
 * variable should be accurate, assuming other parameters are changed, such as tactile display columns
 * and lines (see TNTDefinitions.h). Note, we subtract an additional 1.0 since this results in an 
 * accurate columnsInPage value (?). Returns self.
 */
- calcLinesColumns
{
    NXCoord lMgn, rMgn, tMgn, bMgn;

    // lines in page initialization
    [self getMarginLeft:&lMgn right:&rMgn top:&tMgn bottom:&bMgn];
    linesInPage = (frame.size.height - tMgn - bMgn) / [self lineHeight];

    // char width and columns in page initialization
    charWidth = (int)ceil((double)[[self font] getWidthOf:"O"]);
    columnsInPage = (frame.size.width - lMgn - rMgn - 1.0) / charWidth;
    return self;
}

/* Overrides the default -moveBy: method by setting the topVisibleLine and leftVisibleCol in addition
 * to actually moving the page. The topVisibleLine and leftVisibleColumn are then adjusted in case the
 * deltaX and deltaY are to large in either positive or negative amounts. In this way the 
 * topVisibleLine and leftVisibleCol always hold the correct values. If the amount to move the frame
 * rectangle is too large, we move it as much as possible and return nil. Otherwise returns self.
 */
- moveBy:(NXCoord)deltaX :(NXCoord)deltaY
{
    id returnValue = self;

    // move the view as usual
    [super moveBy:-deltaX :-deltaY];

    // set top visible line and adjust
    topVisibleLine += (deltaY / [self lineHeight]);

    if (linesInPage <= TNT_TACTILE_DISPLAY_LINES) {   // all lines of page are visible (special case)
	if (topVisibleLine != 1) {
	    topVisibleLine = 1;
	    returnValue = nil;
	}
    } else if (topVisibleLine > (linesInPage - TNT_TACTILE_DISPLAY_LINES + 1)) {
	topVisibleLine = linesInPage - TNT_TACTILE_DISPLAY_LINES + 1;
	returnValue = nil;
    } else if (topVisibleLine < 1) {
	topVisibleLine = 1;
	returnValue = nil;
    }

    // set left visible column and adjust
    leftVisibleCol += (deltaX / charWidth);

    if (columnsInPage <= TNT_TACTILE_DISPLAY_COLUMNS) {   // all columns of page are visible (special
	if (leftVisibleCol != 1) {                        // case)
	    leftVisibleCol = 1;
	    returnValue = nil;
	}
    } else if (leftVisibleCol > (columnsInPage - TNT_TACTILE_DISPLAY_COLUMNS + 1)) {
	leftVisibleCol = columnsInPage - TNT_TACTILE_DISPLAY_COLUMNS + 1;
	returnValue = nil;
    } else if (leftVisibleCol < 1) {
	leftVisibleCol = 1;
	returnValue = nil;
    }
    return returnValue;
}


/* CURSOR RELATED METHODS ***************************************************************************/


/* Update the system cursor. If the system cursor is on the current page, post a timed-entry to blink
 * the system cursor if one has not already been posted. We then draw the system cursor if it is not 
 * already visible. If the system cursor is not on the current page, we remove the timed-entry 
 * associated with blinking the system cursor, if it has not yet been removed. Returns self.
 */
- updateSystemCursor
{
    NXPoint systemCursorLoc;
    NXCoord lMgn, rMgn, tMgn, bMgn;

    // get margin offsets for compositing
    [self getMarginLeft:&lMgn right:&rMgn top:&tMgn bottom:&bMgn];

    if (pageNumber == [masterDocument systemCursorPage]) {
	if (!systemCursorTE) {   // time-entry not posted, so post it 
	    systemCursorTE = DPSAddTimedEntry(TNT_CURSOR_BLINK_RATE, (void *)&blinkSystemCursor, self,
					      NX_RUNMODALTHRESHOLD);
	}
	if (!systemCursorOnScreen) {   // only draw system cursor if it is not visible
	    systemCursorLoc.x = ([masterDocument systemCursorCol] - 1) * charWidth + lMgn + 
		bounds.origin.x;
	    systemCursorLoc.y = ([masterDocument systemCursorLine]) * [self lineHeight] + tMgn + 
		bounds.origin.y;
	    [systemCursor composite:NX_SOVER toPoint:&systemCursorLoc];
	}
    } else {   // cursor not on page, remove timed-entry to blink system cursor if it exists
	if (systemCursorTE) {
	    DPSRemoveTimedEntry(systemCursorTE);
	    systemCursorTE = (DPSTimedEntry)0;
	}
    }
    return self;
}

/* Update the mark. If the mark is on the current page, post a timed-entry to blink the mark if one
 * has not already been posted. We then draw the mark if it is not already visible. If the mark is not
 * on the current page, we remove the timed-entry associated with blinking the mark, if it has not yet
 * been removed. Returns self.
 */
- updateMark
{
    NXPoint markLoc;
    NXCoord lMgn, rMgn, tMgn, bMgn;

    // get margin offsets for compositing
    [self getMarginLeft:&lMgn right:&rMgn top:&tMgn bottom:&bMgn];

    if (pageNumber == [masterDocument markPage]) {
	if (!markTE) {   // time-entry not posted, so post it
	    markTE = DPSAddTimedEntry(TNT_CURSOR_BLINK_RATE, (void *)&blinkMark, self, 
				      NX_RUNMODALTHRESHOLD);
	}
	if (!markOnScreen) {   // only draw mark if it is not visible
	    markLoc.x = ([masterDocument markCol] - 1) * charWidth + lMgn + bounds.origin.x;
	    markLoc.y = ([masterDocument markLine]) * [self lineHeight] + tMgn + bounds.origin.y;
	    [mark composite:NX_SOVER toPoint:&markLoc];
	}
    } else {   // mark not on page, remove timed-entry to blink mark if it exists
	if (markTE) {
	    DPSRemoveTimedEntry(markTE);
	    markTE = (DPSTimedEntry)0;
	}
    }
    return self;
}

/* This method overrides the inherited method. It Converts a point on the page (in the page's 
 * coordinate system) to a line and column equivalent. The column and line are adjusted since the 
 * window might not be EXACTLY the correct width or height. Essentially, we only convert to the 
 * calculated column and line if they are entirely visible. Otherwise wise we assign the values of the
 * column and line one less than the calculated values. Returns self.
 */
- convertPoint:(NXPoint *)aPoint toLine:(int *)line col:(int *)col
{
    NXCoord lMgn, rMgn, tMgn, bMgn;

    [self getMarginLeft:&lMgn right:&rMgn top:&tMgn bottom:&bMgn];
    *line = (aPoint->y - bounds.origin.y - tMgn) / [self lineHeight] + 1;
    *col = (aPoint->x - bounds.origin.x - lMgn) / charWidth + 1;

    // adjust column for boundary cases
    if (*col < 1) {
	*col = 1;
    } else if (*col > columnsInPage) {
	*col = columnsInPage;
    } else if (*col >= TNT_TACTILE_DISPLAY_COLUMNS + leftVisibleCol) {
	*col = TNT_TACTILE_DISPLAY_COLUMNS + leftVisibleCol - 1;
    }

    // adjust line for boundary cases
    if (*line < 1) {
	*line = 1;
    } else if (*line > linesInPage) {
	*line = linesInPage;
    } else if (*line >= TNT_TACTILE_DISPLAY_LINES + topVisibleLine) {
	*line = TNT_TACTILE_DISPLAY_LINES + topVisibleLine - 1;
    }
    return self;
}

/* The following start/stop cursor blink methods, start cursor blinking ONLY if the cursor is not 
 * already blinking and the cursor is on the current page, and stop cursor blinking ONLY if the cursor
 * already is blinking. These methods are for external use, for when an object wishes to temporarily 
 * stop cursor blinking. All methods return self.
 */

- startSystemCursorBlink
{
    if (pageNumber == [masterDocument systemCursorPage] && !systemCursorTE) {
	// time-entry not posted, so post it 
	systemCursorTE = DPSAddTimedEntry(TNT_CURSOR_BLINK_RATE, (void *)&blinkSystemCursor, self,
					  NX_RUNMODALTHRESHOLD);
    }
    return self;
}

- stopSystemCursorBlink
{
    if (systemCursorTE) {
	DPSRemoveTimedEntry(systemCursorTE);
	systemCursorTE = (DPSTimedEntry)0;
    }
    return self;
}

- startMarkBlink
{
    if (pageNumber == [masterDocument markPage] && !markTE) {   // time-entry not posted, so post it
	markTE = DPSAddTimedEntry(TNT_CURSOR_BLINK_RATE, (void *)&blinkMark, self, 
				  NX_RUNMODALTHRESHOLD);
    }
    return self;
}

- stopMarkBlink
{
    if (markTE) {
	DPSRemoveTimedEntry(markTE);
	markTE = (DPSTimedEntry)0;
    }
    return self;
}


/* DRAWING METHODS **********************************************************************************/


/* Draws a white column one pixel wide at the leftmost and rightmost edges of the page to cover any 
 * protruding characters. We convert a point at (2.0,0.0) from our superview's superview's coordinated
 * system (normally a scroll view) to our coordinate system. This is just for aesthetics when 
 * performing horizontal scrolling. We also draw the system cursor and mark here, depending on whether
 * or not they are in the current page. We query the masterDocument for information on the location of
 * these cursors. Returns self.
 */
- drawSelf:(const NXRect *)rects :(int)rectCount
{
    NXPoint origin = {2.0, 0.0};

    [super drawSelf:rects :rectCount];
    [self convertPoint:&origin fromView:[superview superview]];
    PSsetgray(1.0);
    PSrectfill(origin.x, origin.y, 1.0, bounds.size.height);
    PSrectfill(origin.x + TNT_TACTILE_DISPLAY_WIDTH - 5.0, origin.y, 1.0, bounds.size.height);

    // We set the cursors on screen value to YES, so that the next update call (for each cursor) will
    // erase the cursor (simulating a "blink"). We want to force this since if the cursors are visible
    // when the view is being drawn, then we get flicker. This is especially evident if the view is 
    // being scrolled.

    systemCursorOnScreen = YES;
    markOnScreen = YES;
    [self updateSystemCursor];
    [self updateMark];
    return self;
}


/* SET METHODS **************************************************************************************/


/* This method sets the master document which we contain a portion of, in terms of text. This method 
 * MUST be called in order to draw the cursors on the display, since we message the master document 
 * for cursor locations. Returns self.
 */
- setMasterDocument:aDoc
{
    masterDocument = aDoc;
    return self;
}

- setLeftVisibleCol:(int)col
{
    leftVisibleCol = col;
    return self;
}

- setTopVisibleLine:(int)line
{
    topVisibleLine = line;
    return self;
}

- setPageNumber:(int)number
{
    pageNumber = number;
    return self;
}

- setPageNode:node
{
    pageNode = node;
    return self;
}

- setSystemCursorOnScreen:(BOOL)flag
{
    systemCursorOnScreen = flag;
    return self;
}

- setMarkOnScreen:(BOOL)flag
{
    markOnScreen = flag;
    return self;
}


/* QUERY METHODS ************************************************************************************/


- (int)leftVisibleCol
{
    return leftVisibleCol;
}

- (int)topVisibleLine
{
    return topVisibleLine;
}

- (int)pageNumber
{
    return pageNumber;
}

- pageNode
{
    return pageNode;
}

- (int)linesInPage
{
    return linesInPage;
}

- (int)columnsInPage
{
    return columnsInPage;
}

- (DPSTimedEntry)systemCursorTE
{
    return systemCursorTE;
}

- (DPSTimedEntry)markTE
{
    return markTE;
}

- (BOOL)systemCursorOnScreen
{
    return systemCursorOnScreen;
}

- (BOOL)markOnScreen
{
    return markOnScreen;
}

@@end
@


1.13
log
@Changed "LastEditDate" to "Last modified on" within header.
@
text
@d7 1
a7 1
 *    Last modified on "Thu Aug 26 00:32:50 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.12 1993/08/27 03:51:06 dale Exp $
d12 3
d167 1
a167 1
    [self moveBy: -pageBounds.origin.x + 2.0 :-pageBounds.origin.y + 2.0];
d194 47
@


1.12
log
@Added methods to start and stop cursor blinking.
@
text
@d7 1
a7 1
 *    LastEditDate was "Thu Aug 26 00:32:50 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.11 1993/07/23 07:33:00 dale Exp $
d12 3
@


1.11
log
@*** empty log message ***
@
text
@d7 1
a7 1
 *    LastEditDate was "Sat Jul 17 13:34:43 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.10 1993/07/14 22:11:48 dale Exp $
d12 3
d83 4
d146 8
a153 6
/* Draws a white column one pixel wide at the leftmost and rightmost edges of the page to cover any 
 * protruding characters. We convert a point at (2.0,0.0) from our superview's superview's coordinated
 * system (normally a scroll view) to our coordinate system. This is just for aesthetics when 
 * performing horizontal scrolling. We also draw the system cursor and mark here, depending on whether
 * or not they are in the current page. We query the masterDocument for information on the location of
 * these cursors. Returns self.
d155 1
a155 1
- drawSelf:(const NXRect *)rects :(int)rectCount
d157 8
a164 1
    NXPoint origin = {2.0, 0.0};
d166 13
a178 5
    [super drawSelf:rects :rectCount];
    [self convertPoint:&origin fromView:[superview superview]];
    PSsetgray(1.0);
    PSrectfill(origin.x, origin.y, 1.0, bounds.size.height);
    PSrectfill(origin.x + TNT_TACTILE_DISPLAY_WIDTH - 5.0, origin.y, 1.0, bounds.size.height);
d180 3
a182 4
    // We set the cursors on screen value to YES, so that the next update call (for each cursor) will
    // erase the cursor (simulating a "blink"). We want to force this since if the cursors are visible
    // when the view is being drawn, then we get flicker. This is especially evident if the view is 
    // being scrolled.
d184 3
a186 4
    systemCursorOnScreen = YES;
    markOnScreen = YES;
    [self updateSystemCursor];
    [self updateMark];
d191 1
a191 1
/* CURSOR RELATED METHODS */
d294 76
d371 1
a371 1
/* SET METHODS */
d421 1
a421 1
/* QUERY METHODS */
a471 40
}

/* Resets our position such that we are positioned within the scroll view with the left margin and top
 * margin coincident with the left side and top side of the scroll view respectively. We convert the
 * bounds rectangle to our superview's superview's coordinate system (normally a scroll view). The top
 * visible line and left visible column are set to 1 to reflect the new position. Returns self.
 */
- resetPosition
{
    NXRect pageBounds;

    pageBounds = bounds;
    [self convertRect:&pageBounds toView:[superview superview]];
    [self moveBy: -pageBounds.origin.x + 2.0 :-pageBounds.origin.y + 2.0];
    topVisibleLine = leftVisibleCol = 1;
    return self;
}

/* Calculate the number of lines and columns in the page. We assume that the entire page is of a 
 * single constant-width font. Note that we take the ceiling function of the actual font line height 
 * and width since font heights and widths are expressend in decimals, and the NeXT displays in pixel
 * units (equivalent to integers). For example, the width of a character in Ohlfs 12.0 is 7.2, and the
 * NeXT rounds this value upward to 8.0 when actually displaying. Therefore to get 8.0, we must add 
 * 0.8 or simply take ceil(7.2). As long as the font is a constant width font, the columnsInPage 
 * variable should be accurate, assuming other parameters are changed, such as tactile display columns
 * and lines (see TNTDefinitions.h). Note, we subtract an additional 1.0 since this results in an 
 * accurate columnsInPage value (?). Returns self.
 */
- calcLinesColumns
{
    NXCoord lMgn, rMgn, tMgn, bMgn;

    // lines in page initialization
    [self getMarginLeft:&lMgn right:&rMgn top:&tMgn bottom:&bMgn];
    linesInPage = (frame.size.height - tMgn - bMgn) / [self lineHeight];

    // char width and columns in page initialization
    charWidth = (int)ceil((double)[[self font] getWidthOf:"O"]);
    columnsInPage = (frame.size.width - lMgn - rMgn - 1.0) / charWidth;
    return self;
@


1.10
log
@*** empty log message ***
@
text
@d7 1
a7 1
 *    LastEditDate was "Tue Jul 13 16:01:36 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.9 1993/07/04 17:57:23 dale Exp $
d12 3
d156 5
a160 1
    // erase system cursor and mark when view is drawing itself
a162 2
    PSsetinstance(YES);   // turn instance drawing on
    PSnewinstance();      // erase all previous instance drawing
a164 1
    PSsetinstance(NO);   // turn instance drawing off
d187 2
a188 2
	    systemCursorTE = DPSAddTimedEntry(0.7, (void *)&blinkSystemCursor, self, 
					      NX_MODALRESPTHRESHOLD);
d221 2
a222 1
	    markTE = DPSAddTimedEntry(0.7, (void *)&blinkMark, self, NX_MODALRESPTHRESHOLD);
d239 1
a239 1
 * coordinate system) to a row and column equivalent. The column and row are adjusted since the 
d241 2
a242 2
 * calculated column and row if they are entirely visible. Otherwise wise we assign the values of the
 * column and row one less than the calculated values. Returns self.
d244 1
a244 1
- convertPoint:(NXPoint *)aPoint toRow:(int *)row col:(int *)col
d249 1
a249 1
    *row = (aPoint->y - bounds.origin.y - tMgn) / [self lineHeight] + 1;
d261 7
a267 7
    // adjust row for boundary cases
    if (*row < 1) {
	*row = 1;
    } else if (*row > linesInPage) {
	*row = linesInPage;
    } else if (*row >= TNT_TACTILE_DISPLAY_LINES + topVisibleLine) {
	*row = TNT_TACTILE_DISPLAY_LINES + topVisibleLine - 1;
@


1.9
log
@*** empty log message ***
@
text
@d7 1
a7 1
 *    LastEditDate was "Fri Jul  2 18:25:01 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.8 1993/06/25 23:38:25 dale Exp $
d12 3
d51 1
a51 1
static void blinkCursors(DPSTimedEntry tag, double now, Page *self)
d53 22
a74 17
    if (tag == [self systemCursorTE]) {   // blink systemCursor
	[self setSystemCursorOnScreen:![self systemCursorOnScreen]];   // toggle on screen value
	[self lockFocus];
	PSsetinstance(YES);
	PSnewinstance();
	[self drawSystemCursorMark];
	PSsetinstance(NO);
	[self unlockFocus];
    } else if (tag == [self markTE]) {   // blink mark
	[self setMarkOnScreen:![self markOnScreen]];   // toggle on screen value
	[self lockFocus];
	PSsetinstance(YES);
	PSnewinstance();
	[self drawSystemCursorMark];
	PSsetinstance(NO);
	[self unlockFocus];
    }
d107 1
a107 1
    // get system cursor and mark
d156 5
a160 4
    PSsetinstance(YES);
    PSnewinstance();
    [self drawSystemCursorMark];
    PSsetinstance(NO);
d164 10
a173 2
/* Draws the systemCursor and mark if they are on the current page. Returns self. */
- drawSystemCursorMark
d175 1
a175 1
    NXPoint systemCursorLoc, markLoc;
a180 4
    // Check if the systemCursor is on the current page. If so, draw the systemCursor, and post a
    // timed-entry to blink the cursor if one has not already been posted. Otherwise remove the 
    // timed-entry if it has not yet been removed.

d182 2
a183 2
	if (!systemCursorTE) {   // time-entry not posted, post it and draw cursor
	    systemCursorTE = DPSAddTimedEntry(0.7, (void *)&blinkCursors, self, 
d186 1
a186 1
	if (!systemCursorOnScreen) {   // only draw cursor if it is not visible
d193 1
a193 1
    } else {   // cursor not on page, remove timed-entry to blink cursor if it exists
d199 12
d212 2
a213 3
    // Check if the mark is on the current page. If so, draw the mark, and post a timed-entry to blink
    // the mark if one has not already been posted. Otherwise remove the timed-entry if it has not yet
    // been removed.
d216 2
a217 2
	if (!markTE) {   // time-entry not posted, post it and draw mark
	    markTE = DPSAddTimedEntry(0.7, (void *)&blinkCursors, self, NX_MODALRESPTHRESHOLD);
d233 34
a340 5
- (NXCoord)charWidth
{
    return charWidth;
}

d395 1
a395 3
 * accurate columnsInPage value (?). We subtract an additional lineHeight within the  linesInPage 
 * calculation since we made the page view one line shorter (within Document.m) for aesthetics. 
 * Returns self.
@


1.8
log
@Added bookmarkNumber for dealing with default bookmark names.
@
text
@d7 1
a7 1
 *    LastEditDate was "Thu Jun 24 16:58:57 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.7 1993/06/24 07:40:50 dale Exp $
d12 3
d110 3
a112 1
/* Nothing needs to be freed, that is, nodes are freed elsewhere (when node lists are freed). */
d115 10
@


1.7
log
@Added cursor drawing in -drawSelf::. Also moved some methods from TactileDisplay to here.
@
text
@d7 1
a7 1
 *    LastEditDate was "Thu Jun 24 00:36:24 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.6 1993/06/18 08:45:44 dale Exp $
d12 3
d45 21
d85 1
a85 1
    // initialize master document (this must be set if we are to draw the cursors)
d88 8
a122 2
    NXPoint systemCursorLoc, markLoc;
    NXCoord lMgn, rMgn, tMgn, bMgn;
d130 16
d149 21
a169 7
    // check if system cursor is on the current page
    if (pageNumber == [masterDocument systemCursorPage]) {   // draw systemCursor and post timed-entry
	systemCursorLoc.x = ([masterDocument systemCursorCol] - 1) * charWidth + lMgn + 
	    bounds.origin.x;
	systemCursorLoc.y = ([masterDocument systemCursorLine]) * [self lineHeight] + tMgn +
	    bounds.origin.y;
	[systemCursor composite:NX_SOVER toPoint:&systemCursorLoc];
d172 18
a189 5
    // check if mark is on the current page
    if (pageNumber == [masterDocument markPage]) {   // draw mark and post timed-entry
	markLoc.x = ([masterDocument markCol] - 1) * charWidth + lMgn + bounds.origin.x;
	markLoc.y = ([masterDocument markLine]) * [self lineHeight] + tMgn + bounds.origin.y;
	[mark composite:NX_SOVER toPoint:&markLoc];
d194 4
d232 16
d281 20
@


1.6
log
@Removed right margin.
@
text
@d7 1
a7 1
 *    LastEditDate was "Thu Jun 17 23:50:45 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.5 1993/06/05 07:37:08 dale Exp $
d12 3
d33 1
d36 4
d55 1
d60 7
d84 3
a86 1
 * performing horizontal scrolling. Returns self.
d91 2
d99 29
d173 57
@


1.5
log
@*** empty log message ***
@
text
@d7 1
a7 1
 *    LastEditDate was "Sat Jun  5 00:25:23 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.4 1993/06/03 00:37:58 dale Exp $
d12 3
d29 1
d34 3
a36 1
/* This method is the designated initializer for the class. Returns self. */
d39 2
d42 5
d63 17
@


1.4
log
@*** empty log message ***
@
text
@d7 1
a7 1
 *    LastEditDate was "Wed Jun  2 15:26:50 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.3 1993/06/01 08:03:24 dale Exp $
d12 3
d30 2
a31 1
- initFrame:(const NXRect *)frameRect
d33 4
a36 4
    [super initFrame:frameRect];
    leftVisibleCol = 0;
    topVisibleLine = 0;
    pageNumber = 0;
d39 5
@


1.3
log
@*** empty log message ***
@
text
@d7 1
a7 1
 *    LastEditDate was "Mon May 31 15:04:01 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.2 1993/05/30 08:24:27 dale Exp $
d12 3
d27 11
d55 7
a61 1
- setPageNum:(int)num
d63 1
a63 1
    pageNum = num;
d77 6
a82 1
- (int)pageNum
d84 1
a84 1
    return pageNum;
@


1.2
log
@*** empty log message ***
@
text
@d7 1
a7 1
 *    LastEditDate was "Sun May 30 00:34:59 1993"
d9 1
a9 1
 * $Id: Page.m,v 1.1 1993/05/20 06:03:35 dale Exp $
d12 3
d41 6
d55 5
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
 *    LastEditDate was "Wed May 19 16:51:29 1993"
d9 1
a9 1
 * $Id$
d11 4
a14 1
 * $Log$
a19 6

- initFrame:(const NXRect *)frameRect text:(const char *)theText alignment:(int)mode
{
    [super initFrame:frameRect text:theText alignment:mode];
    return self;
}
@
