Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 1



48                                 include 'synthesizer.asm'
61                       ;  REVISION INFORMATION ****************************************************************
62                       ;
63                       ;  $Author: rao $
64                       ;  $Date: 2002-03-21 16:49:47 $
65                       ;  $Revision: 1.1 $
66                       ;  $Source: /Users/dalmazio/cvsroot/gnuspeech/trillium/ObjectiveC/Monet/tube_module/synthesizer_white.lst,v $
67                       ;  $State: Exp $
68                       ;
69                       ;
70                       ;  $Log: not supported by cvs2svn $
83                       ;  Revision 1.7  1995/02/27  17:29:18  len
84                       ;  Added support for Intel MultiSound DSP.  Module now compiles FAT.
85                       ;
86                       ;  Revision 1.6  1994/11/02  04:46:49  len
87                       ;  Fixed a bug when loading utterance-rate parameters.
88                       ;
89                       ;  Revision 1.5  1994/10/21  01:33:36  len
90                       ;  Adjusted the output volume upwards, and made 1 channel output the same as
91                       ;  stereo output with the balance at 0.0.
92                       ;
93                       ;  Revision 1.4  1994/10/03  04:05:57  len
94                       ;  Optimized crossmix calculations, added linear interpolation to glottal
95                       ;  volume, and added (optional) linear interpolation to radii.
96                       ;
97                       ;  Revision 1.3  1994/09/19  18:50:47  len
98                       ;  Resectioned the TRM to have 10 sections in 8 regions.  Also changed
99                       ;  the frication to be continuous from sections 3 to 10.  Tube lengths
100                      ;  down to 15.8 cm are possible, with everything enabled.
101                      ;
102                      ;  Revision 1.2  1994/09/13  22:37:19  len
103                      ;  Fixed betaTable loading bug.
104                      ;
105                      ;  Revision 1.1.1.1  1994/09/06  21:45:50  len
106                      ;  Initial archive into CVS.
107                      ;
108                      ;
109                      ;***************************************************************************************
110                      ;
111                      ;  Program:     synthesizer.asm
112                      ;
113                      ;  Author:      Leonard Manzara
114                      ;
115                      ;  Date:        September 19th, 1994
116                      ;
117                      ;  Summary:     Optimized version of the 10 section Tube Resonanace Model Synthesizer.
118                      ;               This is the non-interactive version, for use in the synthesizer module
119                      ;               in the TTS_Server.  Tube lengths down to 15.8 cm are possible (with
120                      ;               everything enabled).
121                      ;
122                      ;              Copyright (C) by Trillium Sound Research Inc. 1994
123                      ;              All Rights Reserved
124                      ;
125                      ;***************************************************************************************
126    
127    
128                      ;***************************************************************************************
129                      ;  COMPILATION FLAGS
130                      ;***************************************************************************************
131    
132                      ;  THESE MUST MATCH THE FLAGS IN synthesizer_module.h
133       000001         OVERSAMPLE_OSC         set          1       ; 1 to use 2x oversampling oscillator
134       000001         VARIABLE_GP            set          1       ; 1 for variable shaped glottal pulse
135       000000         FIXED_CROSSMIX         set          0       ; 1 for fixed crossmix offset (60 dB)
136       000001         SYNC_DMA               set          1       ; 1 for synchronous dma output (instead of async)
137    
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 2



138                      ;  THESE FLAGS ARE USED FOR LOCAL EXPERIMENTATION AND DEBUGGING
139       000000         DEBUG_56               set          0       ; 1 for use with Bug56
140       000001         INTERP_RADII           set          1       ; 1 to enable sample-rate interpolation on radii
141       000000         RECALC_GP              set          0       ; 1 to enable control-rate recalc. of glottal pulse
142                                                                  ; (set to 0 if tnMin == tnMax)
143    
144    
522                      ;***************************************************************************************
523                      ;  ORIGINS FOR PROGRAM MEMORY
524                      ;***************************************************************************************
525    
526                                             IF           !DEBUG_56
527       00003A         ON_CHIP_PROGRAM_START  equ          $3A     ; moved onto hc vectors, so more p memory
528                                             ELSE
530                                             ENDIF
531    
532                                             IF           BLACK
534                                             ENDIF
535                                             IF           MSOUND
536       004000         OFF_CHIP_PROGRAM_START equ          $4000
537                                             ENDIF
538    
539    
540                      ;***************************************************************************************
541                      ;  INTERRUPT AND HOST COMMAND VECTORS
542                      ;***************************************************************************************
543    
544       000000         VEC_RESET              equ          $00     ; reset vector
545       000010         VEC_SSI_OUT            equ          $10     ; ssi transmit data vector
546       000012         VEC_SSI_OUT_EXC        equ          $12     ; ssi transmit data vector w/exception
547       000022         VEC_TRANSMIT_DATA      equ          $22     ; asynchronous dma-out vector
548       000024         VEC_DMA_OUT_DONE       equ          $24     ; host command: dma-out complete
549       000028         VEC_DMA_IN_DONE        equ          $28     ; host command: dma-in complete
550       00002C         VEC_DMA_IN_ACCEPTED    equ          $2C     ; host command: dma-in request accepted
551       00002E         VEC_START              equ          $2E     ; host command: start synthesizing
552       000030         VEC_STOP               equ          $30     ; host command: stop synthesizing
553       000032         VEC_LOAD_FIR_COEF      equ          $32     ; host command: load in FIR coefficients
554       000034         VEC_LOAD_SRC_COEF      equ          $34     ; host command: load in SRC coefs. & deltas
555       000036         VEC_LOAD_WAVETABLE     equ          $36     ; host command: load in wavetable
556       000038         VEC_LOAD_UR_DATA       equ          $38     ; host command: load in utterance-rate params.
557    
558    
559    
560                      ;***************************************************************************************
561                      ;  MACRO:       writeHost
562                      ;
563                      ;  Writes one word from the 'source' register to the host.
564                      ;
565                      ;  Parameters:  source
566                      ;***************************************************************************************
567    
568                      writeHost              macro        source
569  m                                          jclr         #m_htde,x:m_hsr,*
570  m                                          movep        source,x:m_htx
571  m                                          endm
572    
573    
574    
575                      ;***************************************************************************************
576                      ;  MACRO:       readHost
577                      ;
578                      ;  Reads one word from the host and puts it into the 'dest' register.
579                      ;
580                      ;  Parameters:  dest
581                      ;***************************************************************************************
582    
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 3



583                      readHost               macro        dest
584  m                                          jclr         #m_hrdf,x:m_hsr,*
585  m                                          movep        x:m_hrx,dest
586  m                                          endm
587    
588    
589    
590                      ;***************************************************************************************
591                      ;  MACRO:       shiftLeft
592                      ;
593                      ;  Simulates a bitwise shift left using multiplication, with the result in the lower
594                      ;  part of the accumulator.
595                      ;
596                      ;  Parameters:  s   = source register (x0,x1,y0,or y1)
597                      ;              m   = the multiplier register (x0,x1,y0,or y1)
598                      ;              n   = the number of bits to be shifted
599                      ;              acc = the destination accumulator (a or b)
600                      ;***************************************************************************************
601    
602                      shiftLeft              macro        s,m,n,acc
603  m                                          move         #>@cvi(@pow(2,n-1)),m
604  m                                          mpy          s,m,acc
605  m                                          endm
606    
607    
608    
609                      ;***************************************************************************************
610                      ;  MACRO:       dbToAmpTable
611                      ;
612                      ;  This macro creates a table of size+1 points in each of x and y memory.  X memory
613                      ;  is filled with the values to convert from dB to amplitude, for the range 0 to
614                      ;  max dB.  Y memory is filled with the delta between the x+1 value and the x value.
615                      ;  This allows efficient interpolation between x table values.  Note that the dB
616                      ;  values are actually made to range from -max to 0 dB (to permit correct calculation
617                      ;  using the power function), and that -max dB is set to 0.0, so that 0 dB actually
618                      ;  corresponds to an amplitude of 0 (and not some very small number).
619                      ;
620                      ;  Parameters:  size
621                      ;***************************************************************************************
622    
623                      dbToAmpTable           macro        size
624  m 
625  m                   ;  RECORD THE ORIGIN FROM THE CURRENT COUNTER VALUE
626  m                   origin                 set          @lcv(R)
627  m 
628  m                   ;  THE TABLE HAS max+1 ENTRIES
629  m                   max                    set          size
630  m 
631  m                   ;  CREATE THE dbToAmp CONVERSION VALUE FOR 0 TO max dB
632  m                                          org          x:origin
633  m                                          dc           0.0
634  m                   count                  set          1
635  m                                          dup          max
636  m                   value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
637  m                                          dc           value
638  m                   count                  set          count+1
639  m                                          endm
640  m 
641  m                   ;  CREATE THE DELTA VALUES BETWEEN ADJACENT X TABLE VALUES
642  m                                          org          y:origin
643  m                   value                  set          @min(@pow(10.0,@cvf(-max+1)/20.0),0.9999998)
644  m                                          dc           value
645  m                   count                  set          1
646  m                                          dup          max-1
647  m                   value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
648  m                   nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 4



649  m                   delta                  set          nvalue-value
650  m                                          dc           delta
651  m                   count                  set          count+1
652  m                                          endm
653  m                                          dc           0.0
654  m 
655  m                                          endm
656    
657    
658    
659                      ;***************************************************************************************
660                      ;  MACRO:       betaTable
661                      ;
662                      ;  This macro creates a table used to find the beta coefficient for a bandpass
663                      ;  filter.  The actual values for the function are put into Y memory.  The formula
664                      ;  for the beta function is:
665                      ;
666                      ;       beta = (0.5) * (1 - tan(bw_value)) / (2 * (1 + tan(bw_value)))
667                      ;
668                      ;  where bw_value is a number between 0 and PI (nyquist).
669                      ;
670                      ;  Parameters:  size
671                      ;***************************************************************************************
672    
673                      betaTable              macro        size
674  m 
675  m                   ;  RECORD THE ORIGIN FROM THE CURRENT COUNTER VALUE
676  m                   origin                 set          @lcv(R)
677  m 
678  m                   ;  SET PI
679  m                   PI                     set          3.141592653589793
680  m 
681  m                   ;  RECORD THE SIZE OF THE TABLE
682  m                   betaTableSize          set          size
683  m 
684  m                   ;  CALCULATE THE VALUES FOR THE TABLE FROM BEGINNING TO END
685  m                                          org          y:origin
686  m                   count                  set          0
687  m                                          dup          betaTableSize
688  m                   tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
689  m                   value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
690  m                                          dc           value
691  m                   count                  set          count+1
692  m                                          endm
693  m 
694  m                                          endm
695    
696    
697    
698                      ;***************************************************************************************
699                      ;  MISC. CONSTANTS
700                      ;***************************************************************************************
701    
702       0.789235       SEED                   equ          0.7892347 ; constants for noise generator
703       000179         FACTOR                 equ          377
704       000005         CROSSMIX_SCALE         equ          5       ; 2^5 = 32
705       000008         POSITION_SCALE         equ          8
706       0.031250       VT_SCALE               equ          @pow(2,-5.0)
707       000001         ONE                    equ          1
708       1.000000       UNITY                  equ          0.9999998
709       00FFFF         MAX                    equ          $00FFFF
710    
711    
712    
713                      ;***************************************************************************************
714                      ;  DMA MESSAGES
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 5



715                      ;***************************************************************************************
716    
717       050001         DMA_OUT_REQ            equ          $050001 ; message to host to request dma-OUT
718       040002         DMA_IN_REQ             equ          $040002 ; message to host to request dma-IN 
719    
720    
721    
722                      ;***************************************************************************************
723                      ;  STATUS FLAG BITS
724                      ;***************************************************************************************
725    
726       000000         DMA_OUT_DONE           equ          0       ; indicates dma-out is complete
727       000001         DMA_IN_DONE            equ          1       ; indicates dma-in is complete
728       000002         DMA_IN_ACCEPTED        equ          2       ; indicates dma-in accepted by host
729       000003         RUN_STATUS             equ          3       ; indicates if synth to run
730       000004         VT_BRANCH              equ          4       ; indicates which VT branch to take
731    
732    
733    
734                      ;***************************************************************************************
735                      ;  ON-CHIP LONG MEMORY
736                      ;  Long memory occupies both x and y memory, so no x or y variables
737                      ;  are allowed in this space.
738                      ;***************************************************************************************
739    
740       L:001C                                org          l:$001C
741       L:001C         l_timeReg              ds           1
742       L:001D         l_timeRegInc           ds           1
743       L:001E         l_phaseInc             ds           1
744       L:001F         l_currentPhase         ds           1
745    
746       L:0080                                org          l:$0080
747                      l_dbToAmpTable         dbToAmpTable 60      ; dB to amplitude conversion table
748   +
749   +                  ;  RECORD THE ORIGIN FROM THE CURRENT COUNTER VALUE
750   +   000080         origin                 set          @lcv(R)
751   +
752   +                  ;  THE TABLE HAS max+1 ENTRIES
753   +   00003C         max                    set          60
754   +
755   +                  ;  CREATE THE dbToAmp CONVERSION VALUE FOR 0 TO max dB
756   +   X:0080                                org          x:origin
757  d+   X:0080 000000                         dc           0.0
758   +   000001         count                  set          1
759   +                                         dup          max
760  m+                  value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
761  m+                                         dc           value
762  m+                  count                  set          count+1
763  m+                                         endm
764   +   0.001122       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
765  d+   X:0081 0024C4                         dc           value
766   +   000002         count                  set          count+1
767   +   0.001259       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
768  d+   X:0082 002941                         dc           value
769   +   000003         count                  set          count+1
770   +   0.001413       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
771  d+   X:0083 002E49                         dc           value
772   +   000004         count                  set          count+1
773   +   0.001585       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
774  d+   X:0084 0033EF                         dc           value
775   +   000005         count                  set          count+1
776   +   0.001778       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
777  d+   X:0085 003A45                         dc           value
778   +   000006         count                  set          count+1
779   +   0.001995       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
780  d+   X:0086 004161                         dc           value
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 6



781   +   000007         count                  set          count+1
782   +   0.002239       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
783  d+   X:0087 00495C                         dc           value
784   +   000008         count                  set          count+1
785   +   0.002512       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
786  d+   X:0088 00524F                         dc           value
787   +   000009         count                  set          count+1
788   +   0.002818       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
789  d+   X:0089 005C5A                         dc           value
790   +   00000A         count                  set          count+1
791   +   0.003162       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
792  d+   X:008A 00679F                         dc           value
793   +   00000B         count                  set          count+1
794   +   0.003548       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
795  d+   X:008B 007444                         dc           value
796   +   00000C         count                  set          count+1
797   +   0.003981       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
798  d+   X:008C 008274                         dc           value
799   +   00000D         count                  set          count+1
800   +   0.004467       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
801  d+   X:008D 00925F                         dc           value
802   +   00000E         count                  set          count+1
803   +   0.005012       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
804  d+   X:008E 00A43B                         dc           value
805   +   00000F         count                  set          count+1
806   +   0.005623       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
807  d+   X:008F 00B845                         dc           value
808   +   000010         count                  set          count+1
809   +   0.006310       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
810  d+   X:0090 00CEC1                         dc           value
811   +   000011         count                  set          count+1
812   +   0.007079       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
813  d+   X:0091 00E7FB                         dc           value
814   +   000012         count                  set          count+1
815   +   0.007943       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
816  d+   X:0092 010449                         dc           value
817   +   000013         count                  set          count+1
818   +   0.008913       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
819  d+   X:0093 01240C                         dc           value
820   +   000014         count                  set          count+1
821   +   0.010000       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
822  d+   X:0094 0147AE                         dc           value
823   +   000015         count                  set          count+1
824   +   0.011220       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
825  d+   X:0095 016FAA                         dc           value
826   +   000016         count                  set          count+1
827   +   0.012589       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
828  d+   X:0096 019C86                         dc           value
829   +   000017         count                  set          count+1
830   +   0.014125       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
831  d+   X:0097 01CEDC                         dc           value
832   +   000018         count                  set          count+1
833   +   0.015849       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
834  d+   X:0098 020756                         dc           value
835   +   000019         count                  set          count+1
836   +   0.017783       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
837  d+   X:0099 0246B5                         dc           value
838   +   00001A         count                  set          count+1
839   +   0.019953       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
840  d+   X:009A 028DCF                         dc           value
841   +   00001B         count                  set          count+1
842   +   0.022387       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
843  d+   X:009B 02DD96                         dc           value
844   +   00001C         count                  set          count+1
845   +   0.025119       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
846  d+   X:009C 033718                         dc           value
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 7



847   +   00001D         count                  set          count+1
848   +   0.028184       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
849  d+   X:009D 039B87                         dc           value
850   +   00001E         count                  set          count+1
851   +   0.031623       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
852  d+   X:009E 040C37                         dc           value
853   +   00001F         count                  set          count+1
854   +   0.035481       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
855  d+   X:009F 048AA7                         dc           value
856   +   000020         count                  set          count+1
857   +   0.039811       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
858  d+   X:00A0 051884                         dc           value
859   +   000021         count                  set          count+1
860   +   0.044668       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
861  d+   X:00A1 05B7B1                         dc           value
862   +   000022         count                  set          count+1
863   +   0.050119       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
864  d+   X:00A2 066A4A                         dc           value
865   +   000023         count                  set          count+1
866   +   0.056234       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
867  d+   X:00A3 0732AE                         dc           value
868   +   000024         count                  set          count+1
869   +   0.063096       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
870  d+   X:00A4 081385                         dc           value
871   +   000025         count                  set          count+1
872   +   0.070795       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
873  d+   X:00A5 090FCC                         dc           value
874   +   000026         count                  set          count+1
875   +   0.079433       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
876  d+   X:00A6 0A2ADB                         dc           value
877   +   000027         count                  set          count+1
878   +   0.089125       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
879  d+   X:00A7 0B6873                         dc           value
880   +   000028         count                  set          count+1
881   +   0.100000       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
882  d+   X:00A8 0CCCCD                         dc           value
883   +   000029         count                  set          count+1
884   +   0.112202       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
885  d+   X:00A9 0E5CA1                         dc           value
886   +   00002A         count                  set          count+1
887   +   0.125893       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
888  d+   X:00AA 101D3F                         dc           value
889   +   00002B         count                  set          count+1
890   +   0.141254       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
891  d+   X:00AB 12149A                         dc           value
892   +   00002C         count                  set          count+1
893   +   0.158489       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
894  d+   X:00AC 144961                         dc           value
895   +   00002D         count                  set          count+1
896   +   0.177828       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
897  d+   X:00AD 16C311                         dc           value
898   +   00002E         count                  set          count+1
899   +   0.199526       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
900  d+   X:00AE 198A13                         dc           value
901   +   00002F         count                  set          count+1
902   +   0.223872       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
903  d+   X:00AF 1CA7D7                         dc           value
904   +   000030         count                  set          count+1
905   +   0.251189       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
906  d+   X:00B0 2026F3                         dc           value
907   +   000031         count                  set          count+1
908   +   0.281838       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
909  d+   X:00B1 241347                         dc           value
910   +   000032         count                  set          count+1
911   +   0.316228       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
912  d+   X:00B2 287A27                         dc           value
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 8



913   +   000033         count                  set          count+1
914   +   0.354813       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
915  d+   X:00B3 2D6A86                         dc           value
916   +   000034         count                  set          count+1
917   +   0.398107       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
918  d+   X:00B4 32F52D                         dc           value
919   +   000035         count                  set          count+1
920   +   0.446684       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
921  d+   X:00B5 392CEE                         dc           value
922   +   000036         count                  set          count+1
923   +   0.501187       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
924  d+   X:00B6 4026E7                         dc           value
925   +   000037         count                  set          count+1
926   +   0.562341       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
927  d+   X:00B7 47FACD                         dc           value
928   +   000038         count                  set          count+1
929   +   0.630957       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
930  d+   X:00B8 50C336                         dc           value
931   +   000039         count                  set          count+1
932   +   0.707946       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
933  d+   X:00B9 5A9DF8                         dc           value
934   +   00003A         count                  set          count+1
935   +   0.794328       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
936  d+   X:00BA 65AC8C                         dc           value
937   +   00003B         count                  set          count+1
938   +   0.891251       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
939  d+   X:00BB 721483                         dc           value
940   +   00003C         count                  set          count+1
941   +   1.000000       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
942  d+   X:00BC 7FFFFE                         dc           value
943   +   00003D         count                  set          count+1
944   +
945   +                  ;  CREATE THE DELTA VALUES BETWEEN ADJACENT X TABLE VALUES
946   +   Y:0080                                org          y:origin
947   +   0.001122       value                  set          @min(@pow(10.0,@cvf(-max+1)/20.0),0.9999998)
948  d+   Y:0080 0024C4                         dc           value
949   +   000001         count                  set          1
950   +                                         dup          max-1
951  m+                  value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
952  m+                  nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
953  m+                  delta                  set          nvalue-value
954  m+                                         dc           delta
955  m+                  count                  set          count+1
956  m+                                         endm
957   +   0.001122       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
958   +   0.001259       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
959   +   0.000137       delta                  set          nvalue-value
960  d+   Y:0081 00047C                         dc           delta
961   +   000002         count                  set          count+1
962   +   0.001259       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
963   +   0.001413       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
964   +   0.000154       delta                  set          nvalue-value
965  d+   Y:0082 000509                         dc           delta
966   +   000003         count                  set          count+1
967   +   0.001413       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
968   +   0.001585       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
969   +   0.000172       delta                  set          nvalue-value
970  d+   Y:0083 0005A6                         dc           delta
971   +   000004         count                  set          count+1
972   +   0.001585       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
973   +   0.001778       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
974   +   0.000193       delta                  set          nvalue-value
975  d+   Y:0084 000656                         dc           delta
976   +   000005         count                  set          count+1
977   +   0.001778       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
978   +   0.001995       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 9



979   +   0.000217       delta                  set          nvalue-value
980  d+   Y:0085 00071C                         dc           delta
981   +   000006         count                  set          count+1
982   +   0.001995       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
983   +   0.002239       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
984   +   0.000243       delta                  set          nvalue-value
985  d+   Y:0086 0007FA                         dc           delta
986   +   000007         count                  set          count+1
987   +   0.002239       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
988   +   0.002512       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
989   +   0.000273       delta                  set          nvalue-value
990  d+   Y:0087 0008F3                         dc           delta
991   +   000008         count                  set          count+1
992   +   0.002512       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
993   +   0.002818       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
994   +   0.000306       delta                  set          nvalue-value
995  d+   Y:0088 000A0B                         dc           delta
996   +   000009         count                  set          count+1
997   +   0.002818       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
998   +   0.003162       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
999   +   0.000344       delta                  set          nvalue-value
1000 d+   Y:0089 000B45                         dc           delta
1001  +   00000A         count                  set          count+1
1002  +   0.003162       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1003  +   0.003548       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1004  +   0.000386       delta                  set          nvalue-value
1005 d+   Y:008A 000CA5                         dc           delta
1006  +   00000B         count                  set          count+1
1007  +   0.003548       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1008  +   0.003981       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1009  +   0.000433       delta                  set          nvalue-value
1010 d+   Y:008B 000E30                         dc           delta
1011  +   00000C         count                  set          count+1
1012  +   0.003981       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1013  +   0.004467       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1014  +   0.000486       delta                  set          nvalue-value
1015 d+   Y:008C 000FEB                         dc           delta
1016  +   00000D         count                  set          count+1
1017  +   0.004467       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1018  +   0.005012       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1019  +   0.000545       delta                  set          nvalue-value
1020 d+   Y:008D 0011DC                         dc           delta
1021  +   00000E         count                  set          count+1
1022  +   0.005012       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1023  +   0.005623       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1024  +   0.000612       delta                  set          nvalue-value
1025 d+   Y:008E 00140A                         dc           delta
1026  +   00000F         count                  set          count+1
1027  +   0.005623       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1028  +   0.006310       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1029  +   0.000686       delta                  set          nvalue-value
1030 d+   Y:008F 00167C                         dc           delta
1031  +   000010         count                  set          count+1
1032  +   0.006310       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1033  +   0.007079       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1034  +   0.000770       delta                  set          nvalue-value
1035 d+   Y:0090 00193A                         dc           delta
1036  +   000011         count                  set          count+1
1037  +   0.007079       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1038  +   0.007943       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1039  +   0.000864       delta                  set          nvalue-value
1040 d+   Y:0091 001C4E                         dc           delta
1041  +   000012         count                  set          count+1
1042  +   0.007943       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1043  +   0.008913       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1044  +   0.000969       delta                  set          nvalue-value
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 10



1045 d+   Y:0092 001FC2                         dc           delta
1046  +   000013         count                  set          count+1
1047  +   0.008913       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1048  +   0.010000       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1049  +   0.001087       delta                  set          nvalue-value
1050 d+   Y:0093 0023A3                         dc           delta
1051  +   000014         count                  set          count+1
1052  +   0.010000       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1053  +   0.011220       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1054  +   0.001220       delta                  set          nvalue-value
1055 d+   Y:0094 0027FC                         dc           delta
1056  +   000015         count                  set          count+1
1057  +   0.011220       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1058  +   0.012589       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1059  +   0.001369       delta                  set          nvalue-value
1060 d+   Y:0095 002CDD                         dc           delta
1061  +   000016         count                  set          count+1
1062  +   0.012589       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1063  +   0.014125       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1064  +   0.001536       delta                  set          nvalue-value
1065 d+   Y:0096 003256                         dc           delta
1066  +   000017         count                  set          count+1
1067  +   0.014125       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1068  +   0.015849       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1069  +   0.001724       delta                  set          nvalue-value
1070 d+   Y:0097 00387A                         dc           delta
1071  +   000018         count                  set          count+1
1072  +   0.015849       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1073  +   0.017783       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1074  +   0.001934       delta                  set          nvalue-value
1075 d+   Y:0098 003F5E                         dc           delta
1076  +   000019         count                  set          count+1
1077  +   0.017783       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1078  +   0.019953       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1079  +   0.002170       delta                  set          nvalue-value
1080 d+   Y:0099 00471A                         dc           delta
1081  +   00001A         count                  set          count+1
1082  +   0.019953       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1083  +   0.022387       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1084  +   0.002435       delta                  set          nvalue-value
1085 d+   Y:009A 004FC7                         dc           delta
1086  +   00001B         count                  set          count+1
1087  +   0.022387       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1088  +   0.025119       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1089  +   0.002732       delta                  set          nvalue-value
1090 d+   Y:009B 005983                         dc           delta
1091  +   00001C         count                  set          count+1
1092  +   0.025119       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1093  +   0.028184       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1094  +   0.003065       delta                  set          nvalue-value
1095 d+   Y:009C 00646F                         dc           delta
1096  +   00001D         count                  set          count+1
1097  +   0.028184       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1098  +   0.031623       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1099  +   0.003439       delta                  set          nvalue-value
1100 d+   Y:009D 0070B0                         dc           delta
1101  +   00001E         count                  set          count+1
1102  +   0.031623       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1103  +   0.035481       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1104  +   0.003859       delta                  set          nvalue-value
1105 d+   Y:009E 007E70                         dc           delta
1106  +   00001F         count                  set          count+1
1107  +   0.035481       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1108  +   0.039811       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1109  +   0.004329       delta                  set          nvalue-value
1110 d+   Y:009F 008DDD                         dc           delta
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 11



1111  +   000020         count                  set          count+1
1112  +   0.039811       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1113  +   0.044668       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1114  +   0.004858       delta                  set          nvalue-value
1115 d+   Y:00A0 009F2D                         dc           delta
1116  +   000021         count                  set          count+1
1117  +   0.044668       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1118  +   0.050119       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1119  +   0.005450       delta                  set          nvalue-value
1120 d+   Y:00A1 00B299                         dc           delta
1121  +   000022         count                  set          count+1
1122  +   0.050119       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1123  +   0.056234       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1124  +   0.006115       delta                  set          nvalue-value
1125 d+   Y:00A2 00C864                         dc           delta
1126  +   000023         count                  set          count+1
1127  +   0.056234       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1128  +   0.063096       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1129  +   0.006862       delta                  set          nvalue-value
1130 d+   Y:00A3 00E0D7                         dc           delta
1131  +   000024         count                  set          count+1
1132  +   0.063096       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1133  +   0.070795       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1134  +   0.007699       delta                  set          nvalue-value
1135 d+   Y:00A4 00FC47                         dc           delta
1136  +   000025         count                  set          count+1
1137  +   0.070795       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1138  +   0.079433       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1139  +   0.008638       delta                  set          nvalue-value
1140 d+   Y:00A5 011B0F                         dc           delta
1141  +   000026         count                  set          count+1
1142  +   0.079433       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1143  +   0.089125       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1144  +   0.009692       delta                  set          nvalue-value
1145 d+   Y:00A6 013D99                         dc           delta
1146  +   000027         count                  set          count+1
1147  +   0.089125       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1148  +   0.100000       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1149  +   0.010875       delta                  set          nvalue-value
1150 d+   Y:00A7 016459                         dc           delta
1151  +   000028         count                  set          count+1
1152  +   0.100000       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1153  +   0.112202       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1154  +   0.012202       delta                  set          nvalue-value
1155 d+   Y:00A8 018FD4                         dc           delta
1156  +   000029         count                  set          count+1
1157  +   0.112202       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1158  +   0.125893       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1159  +   0.013691       delta                  set          nvalue-value
1160 d+   Y:00A9 01C09E                         dc           delta
1161  +   00002A         count                  set          count+1
1162  +   0.125893       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1163  +   0.141254       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1164  +   0.015361       delta                  set          nvalue-value
1165 d+   Y:00AA 01F75B                         dc           delta
1166  +   00002B         count                  set          count+1
1167  +   0.141254       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1168  +   0.158489       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1169  +   0.017236       delta                  set          nvalue-value
1170 d+   Y:00AB 0234C6                         dc           delta
1171  +   00002C         count                  set          count+1
1172  +   0.158489       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1173  +   0.177828       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1174  +   0.019339       delta                  set          nvalue-value
1175 d+   Y:00AC 0279B0                         dc           delta
1176  +   00002D         count                  set          count+1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 12



1177  +   0.177828       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1178  +   0.199526       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1179  +   0.021698       delta                  set          nvalue-value
1180 d+   Y:00AD 02C702                         dc           delta
1181  +   00002E         count                  set          count+1
1182  +   0.199526       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1183  +   0.223872       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1184  +   0.024346       delta                  set          nvalue-value
1185 d+   Y:00AE 031DC4                         dc           delta
1186  +   00002F         count                  set          count+1
1187  +   0.223872       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1188  +   0.251189       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1189  +   0.027317       delta                  set          nvalue-value
1190 d+   Y:00AF 037F1C                         dc           delta
1191  +   000030         count                  set          count+1
1192  +   0.251189       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1193  +   0.281838       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1194  +   0.030650       delta                  set          nvalue-value
1195 d+   Y:00B0 03EC54                         dc           delta
1196  +   000031         count                  set          count+1
1197  +   0.281838       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1198  +   0.316228       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1199  +   0.034389       delta                  set          nvalue-value
1200 d+   Y:00B1 0466E0                         dc           delta
1201  +   000032         count                  set          count+1
1202  +   0.316228       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1203  +   0.354813       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1204  +   0.038586       delta                  set          nvalue-value
1205 d+   Y:00B2 04F060                         dc           delta
1206  +   000033         count                  set          count+1
1207  +   0.354813       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1208  +   0.398107       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1209  +   0.043294       delta                  set          nvalue-value
1210 d+   Y:00B3 058AA7                         dc           delta
1211  +   000034         count                  set          count+1
1212  +   0.398107       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1213  +   0.446684       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1214  +   0.048576       delta                  set          nvalue-value
1215 d+   Y:00B4 0637C1                         dc           delta
1216  +   000035         count                  set          count+1
1217  +   0.446684       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1218  +   0.501187       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1219  +   0.054504       delta                  set          nvalue-value
1220 d+   Y:00B5 06F9FA                         dc           delta
1221  +   000036         count                  set          count+1
1222  +   0.501187       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1223  +   0.562341       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1224  +   0.061154       delta                  set          nvalue-value
1225 d+   Y:00B6 07D3E6                         dc           delta
1226  +   000037         count                  set          count+1
1227  +   0.562341       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1228  +   0.630957       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1229  +   0.068616       delta                  set          nvalue-value
1230 d+   Y:00B7 08C869                         dc           delta
1231  +   000038         count                  set          count+1
1232  +   0.630957       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1233  +   0.707946       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1234  +   0.076988       delta                  set          nvalue-value
1235 d+   Y:00B8 09DAC2                         dc           delta
1236  +   000039         count                  set          count+1
1237  +   0.707946       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1238  +   0.794328       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1239  +   0.086382       delta                  set          nvalue-value
1240 d+   Y:00B9 0B0E95                         dc           delta
1241  +   00003A         count                  set          count+1
1242  +   0.794328       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 13



1243  +   0.891251       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1244  +   0.096923       delta                  set          nvalue-value
1245 d+   Y:00BA 0C67F7                         dc           delta
1246  +   00003B         count                  set          count+1
1247  +   0.891251       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1248  +   1.000000       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1249  +   0.108749       delta                  set          nvalue-value
1250 d+   Y:00BB 0DEB7C                         dc           delta
1251  +   00003C         count                  set          count+1
1252 d+   Y:00BC 000000                         dc           0.0
1253  +
1254   
1255      L:00BF                                org          l:$00BF
1256      L:00BF         l_a_save               ds           1       ;  fits at end of dbToAmpTable
1257   
1258      L:00C0                                org          l:$00C0
1259      L:00C0         l_FIR_base             dsm          64      ; memory for the oscillator FIR filter
1260      0000C0         temp_betaTable         equ          l_FIR_base ; FIR memory is used temporarily to
1261                                                                 ; store the betaTable when loading
1262   
1263   
1264                     ;***************************************************************************************
1265                     ;  ON-CHIP X MEMORY
1266                     ;***************************************************************************************
1267   
1268      X:0000                                org          x:$0000
1269      X:0000         x_STATUS_flags         ds           1       ; status flags (use $00 for use with jset)
1270      X:0001         x_ngs_signal           ds           1
1271      X:0002         x_lpn_signal           ds           1
1272      000002         x_fric_sig             equ          x_lpn_signal ; fric signal uses lpn to save space
1273   
1274      X:0003         x_FIR_mod              ds           1
1275      X:0004         FIR_x_ptr              ds           1
1276      X:0005         FIR_y_ptr              ds           1
1277      X:0006         x_tableMod             ds           1
1278   
1279      X:0007         ALPHA                  ds           1
1280      X:0008         BETA                   ds           1
1281      X:0009         GAMMA                  ds           1
1282   
1283      X:000A         fa10                   ds           1
1284      X:000B         fb11                   ds           1
1285      X:000C         fa20                   ds           1
1286      X:000D         fa21                   ds           1
1287      X:000E         fb21                   ds           1
1288   
1289      X:000F         x_temp2                ds           1
1290   
1291      X:0010         nfa10                  ds           1
1292      X:0011         nfb11                  ds           1
1293      X:0012         nfa20                  ds           1
1294      X:0013         nfa21                  ds           1
1295      X:0014         nfb21                  ds           1
1296   
1297      X:0015         dma_fill_base          ds           1
1298 d    X:0016 00003F  mask_l                 dc           L_MASK
1299 d    X:0017 000680  base_diff              dc           BASE_DIFF
1300 d    X:0018 004500  fbase_addr             dc           filter_base
1301      X:0019         vtScale                ds           1
1302 d    X:001A 000040  coeff_mem              dc           OPC_1
1303 d    X:001B 000040  tap_mem                dc           y_tap0
1304   
1305   
1306                     ;  TUBE MEMORY
1307      X:0020                                org          x:$0020
1308      X:0020         S1_TA                  ds           1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 14



1309      X:0021         S1_BA                  ds           1
1310      X:0022         S2_TA                  ds           1
1311      X:0023         S2_BA                  ds           1
1312      X:0024         S3_TA                  ds           1
1313      X:0025         S3_BA                  ds           1
1314      X:0026         S4_TA                  ds           1
1315      X:0027         S4_BA                  ds           1
1316      X:0028         S5_TA                  ds           1
1317      X:0029         S5_BA                  ds           1
1318      X:002A         S6_TA                  ds           1
1319      X:002B         S6_BA                  ds           1
1320      X:002C         S7_TA                  ds           1
1321      X:002D         S7_BA                  ds           1
1322      X:002E         S8_TA                  ds           1
1323      X:002F         S8_BA                  ds           1
1324      X:0030         S9_TA                  ds           1
1325      X:0031         S9_BA                  ds           1
1326      X:0032         S10_TA                 ds           1
1327      X:0033         S10_BA                 ds           1
1328      X:0034         N1_TA                  ds           1
1329      X:0035         N1_BA                  ds           1
1330      X:0036         N2_TA                  ds           1
1331      X:0037         N2_BA                  ds           1
1332      X:0038         N3_TA                  ds           1
1333      X:0039         N3_BA                  ds           1
1334      X:003A         N4_TA                  ds           1
1335      X:003B         N4_BA                  ds           1
1336      X:003C         N5_TA                  ds           1
1337      X:003D         N5_BA                  ds           1
1338      X:003E         N6_TA                  ds           1
1339      X:003F         N6_BA                  ds           1
1340   
1341   
1342      X:0040                                org          x:$0040
1343                     ;  SCATTERING JUNCTION COEFFICIENTS:  MUST BE CONTIGUOUS MEMORY
1344      X:0040         OPC_1                  ds           1       ; control-rate scattering coefficients
1345      X:0041         OPC_2                  ds           1
1346      X:0042         OPC_3                  ds           1
1347      X:0043         ALPHA_L                ds           1
1348      X:0044         ALPHA_R                ds           1
1349      X:0045         ALPHA_T                ds           1
1350      X:0046         OPC_4                  ds           1
1351      X:0047         OPC_5                  ds           1
1352      X:0048         OPC_6                  ds           1
1353      X:0049         OPC_7                  ds           1
1354      X:004A         OPC_REFL               ds           1
1355      X:004B         OPC_RAD                ds           1
1356      X:004C         NC_1                   ds           1
1357   
1358      X:004D         NC_2                   ds           1       ; utterance-rate scattering coefficients
1359      X:004E         NC_3                   ds           1
1360      X:004F         NC_4                   ds           1
1361      X:0050         NC_5                   ds           1
1362      X:0051         NC_REFL                ds           1
1363      X:0052         NC_RAD                 ds           1
1364   
1365   
1366                     ;  MISC VARIABLES
1367      X:0053         dma_empty_base         ds           1
1368      X:0054         x_x0_save              ds           1
1369      X:0055         x_r3_save              ds           1
1370      X:0056         x_r4_save              ds           1
1371      X:0057         x_r5_save              ds           1
1372      X:0058         x_tnDelta              ds           1
1373      X:0059         x_div1                 ds           1
1374      X:005A         x_div2                 ds           1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 15



1375      X:005B         x_newDiv2              ds           1
1376      X:005C         x_temp                 ds           1
1377      X:005D         x_tableCount           ds           1
1378      X:005E         readPtr                ds           1
1379      X:005F         x_FIR_size             ds           1
1380   
1381   
1382   
1383                     ;***************************************************************************************
1384                     ;  ON-CHIP Y MEMORY
1385                     ;***************************************************************************************
1386   
1387      Y:0000                                org          y:$0000
1388      Y:0000         DAMPING                ds           1
1389      Y:0001         PULSE_MODULATION       ds           1
1390   
1391      Y:0002         OSC_AMP                ds           1
1392      Y:0003         OSC_AMP_DELTA          ds           1
1393      Y:0004         ANTI_BREATHINESS       ds           1
1394   
1395      Y:0005         y_bp_xn1               ds           1
1396      Y:0006         y_bp_xn2               ds           1
1397      Y:0007         y_bp_yn1               ds           1
1398      Y:0008         y_bp_yn2               ds           1
1399   
1400      Y:0009         mRadiationX            ds           1
1401      Y:000A         mRadiationY            ds           1
1402      Y:000B         nRadiationX            ds           1
1403      Y:000C         nRadiationY            ds           1
1404   
1405   
1406      Y:000D         tb1                    ds           1
1407      Y:000E         throatY                ds           1
1408      Y:000F         throatGain             ds           1
1409   
1410      Y:0010         cr_count               ds           1
1411      Y:0011         left_shift             ds           1
1412   
1413 d    Y:0012 6505A5  y_seed                 dc           SEED
1414 d    Y:0013 000179  y_factor               dc           FACTOR
1415 d    Y:0014 000001  y_one                  dc           ONE
1416 d    Y:0015 7FFFFE  y_unity                dc           UNITY
1417 d    Y:0016 00FFFF  y_max                  dc           MAX
1418   
1419      Y:0017         BALANCE_R              ds           1
1420      Y:0018         BALANCE_L              ds           1
1421   
1422      Y:0019         crossmix               ds           1
1423      Y:001A         anti_crossmix          ds           1
1424   
1425 d    Y:001B 000053  delta_mem              dc           OPC_1_DELTA
1426   
1427   
1428   
1429                     ;  TUBE MEMORY
1430      Y:0020                                org          y:$0020
1431      Y:0020         S1_TB                  ds           1
1432      Y:0021         S1_BB                  ds           1
1433      Y:0022         S2_TB                  ds           1
1434      Y:0023         S2_BB                  ds           1
1435      Y:0024         S3_TB                  ds           1
1436      Y:0025         S3_BB                  ds           1
1437      Y:0026         S4_TB                  ds           1
1438      Y:0027         S4_BB                  ds           1
1439      Y:0028         S5_TB                  ds           1
1440      Y:0029         S5_BB                  ds           1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 16



1441      Y:002A         S6_TB                  ds           1
1442      Y:002B         S6_BB                  ds           1
1443      Y:002C         S7_TB                  ds           1
1444      Y:002D         S7_BB                  ds           1
1445      Y:002E         S8_TB                  ds           1
1446      Y:002F         S8_BB                  ds           1
1447      Y:0030         S9_TB                  ds           1
1448      Y:0031         S9_BB                  ds           1
1449      Y:0032         S10_TB                 ds           1
1450      Y:0033         S10_BB                 ds           1
1451      Y:0034         N1_TB                  ds           1
1452      Y:0035         N1_BB                  ds           1
1453      Y:0036         N2_TB                  ds           1
1454      Y:0037         N2_BB                  ds           1
1455      Y:0038         N3_TB                  ds           1
1456      Y:0039         N3_BB                  ds           1
1457      Y:003A         N4_TB                  ds           1
1458      Y:003B         N4_BB                  ds           1
1459      Y:003C         N5_TB                  ds           1
1460      Y:003D         N5_BB                  ds           1
1461      Y:003E         N6_TB                  ds           1
1462      Y:003F         N6_BB                  ds           1
1463   
1464   
1465                     ;  FRICATION TAP MEMORY
1466      Y:0040                                org          y:$0040
1467      Y:0040         y_tap0                 ds           1
1468      Y:0041         y_tap1                 ds           1
1469      Y:0042         y_tap2                 ds           1
1470      Y:0043         y_tap3                 ds           1
1471      Y:0044         y_tap4                 ds           1
1472      Y:0045         y_tap5                 ds           1
1473      Y:0046         y_tap6                 ds           1
1474      Y:0047         y_tap7                 ds           1
1475      Y:0048         y_tapGuard             ds           1
1476      000008         NUMBER_TAPS            equ          8
1477   
1478   
1479                     ;  MISC. VARIABLES
1480      Y:0049         BREATHINESS            ds           1
1481      Y:004A         CROSSMIX_FACTOR        ds           1
1482      Y:004B         TP                     ds           1
1483      Y:004C         TN_MIN                 ds           1
1484      Y:004D         TN_MAX                 ds           1
1485      Y:004E         endPtr                 ds           1
1486      Y:004F         CONTROL_PERIOD         ds           1
1487      Y:0050         CONTROL_FACTOR         ds           1
1488      Y:0051         ASP_AMP                ds           1
1489      Y:0052         ta0                    ds           1
1490   
1491   
1492                     ;  SAMPLING RATE INTERPOLATION DELTA VARIABLES
1493      Y:0053         OPC_1_DELTA            ds           1
1494      Y:0054         OPC_2_DELTA            ds           1
1495      Y:0055         OPC_3_DELTA            ds           1
1496      Y:0056         ALPHA_L_DELTA          ds           1
1497      Y:0057         ALPHA_R_DELTA          ds           1
1498      Y:0058         ALPHA_T_DELTA          ds           1
1499      Y:0059         OPC_4_DELTA            ds           1
1500      Y:005A         OPC_5_DELTA            ds           1
1501      Y:005B         OPC_6_DELTA            ds           1
1502      Y:005C         OPC_7_DELTA            ds           1
1503      Y:005D         OPC_REFL_DELTA         ds           1
1504      Y:005E         OPC_RAD_DELTA          ds           1
1505      Y:005F         NC_1_DELTA             ds           1
1506      00000D         NUMBER_DELTAS          equ          13
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 17



1507   
1508   
1509   
1510                     ;***************************************************************************************
1511                     ;  OFF-CHIP X, Y AND PROGRAM MEMORY (CANNOT BE OVERLAID)
1512                     ;
1513                     ;  $2000 - $3FFF        (8192)        total offchip memory
1514                     ;
1515                     ;  $2000 - $22FF        (768)         reserved program memory
1516                     ;
1517                     ;  $2300 - $237F        (128)         free memory
1518                     ;
1519                     ;  $23C0 - 23FF        (64)          beta table
1520                     ;
1521                     ;  $2400 - $24FF        (256)         gp waveform table memory
1522                     ;
1523                     ;  $2500 - $2A7F        (1664)        SRC filter coefficients
1524                     ;  $2B80 - $31FF        (1664)        SRC filter deltas
1525                     ;  $3200 - $33FF        (512)         SRC buffer
1526                     ;
1527                     ;                                  If synchronous dma out:
1528                     ;  $3400 - $37FF        (1024)        DMA output buffer
1529                     ;                                  If asynchronous dma out:
1530                     ;  $3400 - $35FF        (512)         DMA output buffer 1    
1531                     ;  $3600 - $37FF        (512)         DMA output buffer 2    
1532                     ;
1533                     ;  $3800 - $3FFF        (2048)        DMA input buffer              
1534                     ;
1535                     ;***************************************************************************************
1536   
1537                     ;  WAVETABLE MEMORY ALLOCATION (MUST AGREE WITH HOST)
1538      000100         SINE_TABLE_SIZE        equ          256
1539      000100         GP_TABLE_SIZE          equ          256
1540   
1541                     ;  SAMPLE RATE CONVERSION BUFFER MEMORY ALLOCATION (MUST AGREE WITH HOST)
1542      00001A         PADSIZE                equ          26
1543      000006         L_BITS                 equ          6
1544      000040         L_RANGE                equ          @cvi(@pow(2,L_BITS))
1545      00003F         L_MASK                 equ          @cvi(L_RANGE-1)
1546      0.015625       N_SCALE                equ          @pow(2,-L_BITS)
1547      000680         FILTER_SIZE            equ          @cvi(PADSIZE*L_RANGE)
1548      000680         BASE_DIFF              equ          FILTER_SIZE
1549      000200         SRC_BUFFER_SIZE        equ          512
1550   
1551                     ;  DMA OUTPUT BUFFERS MEMORY ALLOCATION (MUST AGREE WITH HOST, IF NOT SSI OUTPUT)
1552                                            IF           !SSI_OUTPUT
1553                                            IF           SYNC_DMA
1554      000400         DMA_OUT_SIZE           equ          1024
1555                                            ELSE
1557                                            ENDIF
1558                                            ELSE
1560                                            ENDIF
1561   
1562                     ;  DMA INPUT BUFFER MEMORY ALLOCATION (MUST AGREE WITH HOST)
1563      000800         DMA_IN_SIZE            equ          2048    ; size of input buffer
1564      000040         TABLES_PER_DMA         equ          64      ; tables per page
1565      000020         TABLE_SIZE             equ          32      ; size of each table
1566   
1567   
1568   
1569                     ;  ACTUAL MEMORY ALLOCATION
1570      Y:0100                                org          y:$0100
1571      Y:0100         sine_wave_table        dsm          SINE_TABLE_SIZE
1572   
1573                     ;  BETA TABLE IS CREATED IN LOW MEMORY, AND LATER MOVED TO OFF-CHIP MEMORY
1574      Y:00C0                                org          y:temp_betaTable
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 18



1575                                            betaTable    64
1576  +
1577  +                  ;  RECORD THE ORIGIN FROM THE CURRENT COUNTER VALUE
1578  +   0000C0         origin                 set          @lcv(R)
1579  +
1580  +                  ;  SET PI
1581  +   3.141593       PI                     set          3.141592653589793
1582  +
1583  +                  ;  RECORD THE SIZE OF THE TABLE
1584  +   000040         betaTableSize          set          64
1585  +
1586  +                  ;  CALCULATE THE VALUES FOR THE TABLE FROM BEGINNING TO END
1587  +   Y:00C0                                org          y:origin
1588  +   000000         count                  set          0
1589  +                                         dup          betaTableSize
1590 m+                  tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1591 m+                  value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1592 m+                                         dc           value
1593 m+                  count                  set          count+1
1594 m+                                         endm
1595  +   0.000000       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1596  +   0.500000       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1597 d+   Y:00C0 400000                         dc           value
1598  +   000001         count                  set          count+1
1599  +   0.024938       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1600  +   0.475668       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1601 d+   Y:00C1 3CE2B3                         dc           value
1602  +   000002         count                  set          count+1
1603  +   0.049908       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1604  +   0.452464       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1605 d+   Y:00C2 39EA5B                         dc           value
1606  +   000003         count                  set          count+1
1607  +   0.074940       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1608  +   0.430285       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1609 d+   Y:00C3 371392                         dc           value
1610  +   000004         count                  set          count+1
1611  +   0.100065       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1612  +   0.409037       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1613 d+   Y:00C4 345B54                         dc           value
1614  +   000005         count                  set          count+1
1615  +   0.125316       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1616  +   0.388639       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1617 d+   Y:00C5 31BEED                         dc           value
1618  +   000006         count                  set          count+1
1619  +   0.150726       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1620  +   0.369017       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1621 d+   Y:00C6 2F3BF1                         dc           value
1622  +   000007         count                  set          count+1
1623  +   0.176327       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1624  +   0.350104       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1625 d+   Y:00C7 2CD033                         dc           value
1626  +   000008         count                  set          count+1
1627  +   0.202154       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1628  +   0.331840       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1629 d+   Y:00C8 2A79BB                         dc           value
1630  +   000009         count                  set          count+1
1631  +   0.228243       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1632  +   0.314171       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1633 d+   Y:00C9 2836C0                         dc           value
1634  +   00000A         count                  set          count+1
1635  +   0.254631       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1636  +   0.297047       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1637 d+   Y:00CA 2605A2                         dc           value
1638  +   00000B         count                  set          count+1
1639  +   0.281356       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1640  +   0.280423       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 19



1641 d+   Y:00CB 23E4E7                         dc           value
1642  +   00000C         count                  set          count+1
1643  +   0.308459       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1644  +   0.264258       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1645 d+   Y:00CC 21D332                         dc           value
1646  +   00000D         count                  set          count+1
1647  +   0.335982       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1648  +   0.248513       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1649 d+   Y:00CD 1FCF46                         dc           value
1650  +   00000E         count                  set          count+1
1651  +   0.363970       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1652  +   0.233154       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1653 d+   Y:00CE 1DD7FC                         dc           value
1654  +   00000F         count                  set          count+1
1655  +   0.392471       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1656  +   0.218148       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1657 d+   Y:00CF 1BEC44                         dc           value
1658  +   000010         count                  set          count+1
1659  +   0.421535       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1660  +   0.203465       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1661 d+   Y:00D0 1A0B22                         dc           value
1662  +   000011         count                  set          count+1
1663  +   0.451217       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1664  +   0.189077       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1665 d+   Y:00D1 1833AB                         dc           value
1666  +   000012         count                  set          count+1
1667  +   0.481575       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1668  +   0.174958       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1669 d+   Y:00D2 166502                         dc           value
1670  +   000013         count                  set          count+1
1671  +   0.512670       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1672  +   0.161083       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1673 d+   Y:00D3 149E5B                         dc           value
1674  +   000014         count                  set          count+1
1675  +   0.544571       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1676  +   0.147429       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1677 d+   Y:00D4 12DEF4                         dc           value
1678  +   000015         count                  set          count+1
1679  +   0.577350       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1680  +   0.133975       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1681 d+   Y:00D5 112614                         dc           value
1682  +   000016         count                  set          count+1
1683  +   0.611087       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1684  +   0.120699       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1685 d+   Y:00D6 0F730F                         dc           value
1686  +   000017         count                  set          count+1
1687  +   0.645868       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1688  +   0.107582       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1689 d+   Y:00D7 0DC53F                         dc           value
1690  +   000018         count                  set          count+1
1691  +   0.681788       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1692  +   0.094605       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1693 d+   Y:00D8 0C1C05                         dc           value
1694  +   000019         count                  set          count+1
1695  +   0.718951       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1696  +   0.081750       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1697 d+   Y:00D9 0A76CA                         dc           value
1698  +   00001A         count                  set          count+1
1699  +   0.757471       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1700  +   0.069000       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1701 d+   Y:00DA 08D4FA                         dc           value
1702  +   00001B         count                  set          count+1
1703  +   0.797473       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1704  +   0.056336       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1705 d+   Y:00DB 073609                         dc           value
1706  +   00001C         count                  set          count+1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 20



1707  +   0.839100       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1708  +   0.043744       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1709 d+   Y:00DC 05996A                         dc           value
1710  +   00001D         count                  set          count+1
1711  +   0.882505       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1712  +   0.031207       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1713 d+   Y:00DD 03FE97                         dc           value
1714  +   00001E         count                  set          count+1
1715  +   0.927864       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1716  +   0.018709       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1717 d+   Y:00DE 02650C                         dc           value
1718  +   00001F         count                  set          count+1
1719  +   0.975372       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1720  +   0.006234       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1721 d+   Y:00DF 00CC44                         dc           value
1722  +   000020         count                  set          count+1
1723  +   1.025249       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1724  +   -0.006234      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1725 d+   Y:00E0 FF33BC                         dc           value
1726  +   000021         count                  set          count+1
1727  +   1.077744       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1728  +   -0.018709      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1729 d+   Y:00E1 FD9AF4                         dc           value
1730  +   000022         count                  set          count+1
1731  +   1.133138       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1732  +   -0.031207      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1733 d+   Y:00E2 FC0169                         dc           value
1734  +   000023         count                  set          count+1
1735  +   1.191754       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1736  +   -0.043744      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1737 d+   Y:00E3 FA6696                         dc           value
1738  +   000024         count                  set          count+1
1739  +   1.253960       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1740  +   -0.056336      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1741 d+   Y:00E4 F8C9F7                         dc           value
1742  +   000025         count                  set          count+1
1743  +   1.320183       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1744  +   -0.069000      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1745 d+   Y:00E5 F72B06                         dc           value
1746  +   000026         count                  set          count+1
1747  +   1.390915       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1748  +   -0.081750      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1749 d+   Y:00E6 F58936                         dc           value
1750  +   000027         count                  set          count+1
1751  +   1.466731       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1752  +   -0.094605      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1753 d+   Y:00E7 F3E3FB                         dc           value
1754  +   000028         count                  set          count+1
1755  +   1.548303       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1756  +   -0.107582      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1757 d+   Y:00E8 F23AC1                         dc           value
1758  +   000029         count                  set          count+1
1759  +   1.636427       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1760  +   -0.120699      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1761 d+   Y:00E9 F08CF1                         dc           value
1762  +   00002A         count                  set          count+1
1763  +   1.732051       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1764  +   -0.133975      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1765 d+   Y:00EA EED9EC                         dc           value
1766  +   00002B         count                  set          count+1
1767  +   1.836308       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1768  +   -0.147429      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1769 d+   Y:00EB ED210C                         dc           value
1770  +   00002C         count                  set          count+1
1771  +   1.950572       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1772  +   -0.161083      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 21



1773 d+   Y:00EC EB61A5                         dc           value
1774  +   00002D         count                  set          count+1
1775  +   2.076521       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1776  +   -0.174958      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1777 d+   Y:00ED E99AFE                         dc           value
1778  +   00002E         count                  set          count+1
1779  +   2.216228       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1780  +   -0.189077      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1781 d+   Y:00EE E7CC55                         dc           value
1782  +   00002F         count                  set          count+1
1783  +   2.372280       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1784  +   -0.203465      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1785 d+   Y:00EF E5F4DE                         dc           value
1786  +   000030         count                  set          count+1
1787  +   2.547958       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1788  +   -0.218148      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1789 d+   Y:00F0 E413BC                         dc           value
1790  +   000031         count                  set          count+1
1791  +   2.747477       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1792  +   -0.233154      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1793 d+   Y:00F1 E22804                         dc           value
1794  +   000032         count                  set          count+1
1795  +   2.976349       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1796  +   -0.248513      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1797 d+   Y:00F2 E030BA                         dc           value
1798  +   000033         count                  set          count+1
1799  +   3.241920       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1800  +   -0.264258      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1801 d+   Y:00F3 DE2CCE                         dc           value
1802  +   000034         count                  set          count+1
1803  +   3.554211       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1804  +   -0.280423      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1805 d+   Y:00F4 DC1B19                         dc           value
1806  +   000035         count                  set          count+1
1807  +   3.927247       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1808  +   -0.297047      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1809 d+   Y:00F5 D9FA5E                         dc           value
1810  +   000036         count                  set          count+1
1811  +   4.381286       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1812  +   -0.314171      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1813 d+   Y:00F6 D7C940                         dc           value
1814  +   000037         count                  set          count+1
1815  +   4.946715       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1816  +   -0.331840      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1817 d+   Y:00F7 D58645                         dc           value
1818  +   000038         count                  set          count+1
1819  +   5.671282       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1820  +   -0.350104      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1821 d+   Y:00F8 D32FCD                         dc           value
1822  +   000039         count                  set          count+1
1823  +   6.634566       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1824  +   -0.369017      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1825 d+   Y:00F9 D0C40F                         dc           value
1826  +   00003A         count                  set          count+1
1827  +   7.979811       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1828  +   -0.388639      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1829 d+   Y:00FA CE4113                         dc           value
1830  +   00003B         count                  set          count+1
1831  +   9.993495       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1832  +   -0.409037      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1833 d+   Y:00FB CBA4AC                         dc           value
1834  +   00003C         count                  set          count+1
1835  +   13.344073      tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1836  +   -0.430285      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1837 d+   Y:00FC C8EC6E                         dc           value
1838  +   00003D         count                  set          count+1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 22



1839  +   20.036898      tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1840  +   -0.452464      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1841 d+   Y:00FD C615A5                         dc           value
1842  +   00003E         count                  set          count+1
1843  +   40.098734      tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1844  +   -0.475668      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1845 d+   Y:00FE C31D4D                         dc           value
1846  +   00003F         count                  set          count+1
1847  +   16331778728383844.000000 tanVal       set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1848  +   -0.500000      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1849 d+   Y:00FF C00000                         dc           value
1850  +   000040         count                  set          count+1
1851  +
1852   
1853                                            IF           BLACK
1867                                            ENDIF
1868   
1869   
1870                                            IF           MSOUND
1871      X:43C0                                org          x:$43C0
1872      X:43C0         l_betaTable            ds           64      ; beta function table
1873      X:4400         gp_wave_table          dsm          GP_TABLE_SIZE
1874      X:4500         filter_base            ds           FILTER_SIZE
1875      X:4B80         filter_d_base          ds           FILTER_SIZE
1876      X:5200         src_buffer_base        dsm          SRC_BUFFER_SIZE
1877      X:5400         dsine_wave_table       dsm          SINE_TABLE_SIZE
1878      X:5800         dma_in_buffer          dsm          DMA_IN_SIZE
1879   
1880      Y:4000                                org          y:$4000
1881                                            IF           !SSI_OUTPUT
1882                                            IF           SYNC_DMA
1883      Y:4000         dma_out_buffer         dsm          DMA_OUT_SIZE
1884                                            ELSE
1887                                            ENDIF
1888                                            ELSE
1891                                            ENDIF
1892                                            ENDIF
1893   
1894   
1895   
1896                     ;***************************************************************************************
1897                     ;  REGISTER USE:
1898                     ;
1899                     ;       r0     m0     n0     waveform table pointers
1900                     ;       r1     m1            SRC index for dataEmpty
1901                     ;       r2     m2            DMA buffer empty pointer
1902                     ;       r3     m3     n3     general (unprotected) use; m3 left at linear ($FFFF)
1903                     ;       r4     m4     n4     general (unprotected) use; m4 left at linear ($FFFF)
1904                     ;       r5     m5     n5     SRC fillPtr for dataFill and dataEmpty 
1905                     ;       r6     m6            DMA buffer fill pointer
1906                     ;       r7     m7     n7     SRC emptyPtr for dataFill and DataEmpty
1907                     ;
1908                     ;***************************************************************************************
1909   
1915   
1916                                     ;***************************************************************************************
1917                                     ;  INTERRUPT VECTORS
1918                                     ;***************************************************************************************
1919   
1920                                               IF      !DEBUG_56
1921   
1922      P:0000                                   org     p:VEC_RESET
1923      P:0000 0AF080  [6 -        6]            jmp     reset
                 004000
1924   
1925                                               IF      SSI_OUTPUT
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 23



1932                                               ENDIF
1933   
1934   
1935                                               IF      SYNC_DMA
1936      P:0022                                   org     p:VEC_TRANSMIT_DATA                   ; synchronous DMA-out
1937      P:0022 000000  [2 -        8]            nop
1938      P:0023 000000  [2 -       10]            nop
1939   
1940      P:0024                                   org     p:VEC_DMA_OUT_DONE                    ; DMA-OUT completed.
1941      P:0024 0A0020  [4 -       14]            bset    #DMA_OUT_DONE,x:x_STATUS_flags
1942      P:0025 000000  [2 -       16]            nop
1943   
1944                                               ELSE
1952                                               ENDIF
1953   
1954      P:0028                                   org     p:VEC_DMA_IN_DONE                     ; DMA-IN completed.
1955      P:0028 0A0021  [4 -       20]            bset    #DMA_IN_DONE,x:x_STATUS_flags
1956      P:0029 000000  [2 -       22]            nop
1957   
1958      P:002C                                   org     p:VEC_DMA_IN_ACCEPTED                 ; DMA-IN accepted: start reading.
1959      P:002C 0BF080  [6 -       28]            jsr     dma_in_accepted
                 004076
1960   
1961   
1962      P:002E                                   org     p:VEC_START                           ; signal to start synthesizing
1963      P:002E 0A0023  [4 -       32]            bset    #RUN_STATUS,x:x_STATUS_flags
1964      P:002F 000000  [2 -       34]            nop
1965   
1966      P:0030                                   org     p:VEC_STOP                            ; signal to stop synthesizing
1967      P:0030 0BF080  [6 -       40]            jsr     stop_synth
                 004074
1968   
1969   
1970      P:0032                                   org     p:VEC_LOAD_FIR_COEF                   ; load in FIR coefficients from host
1971      P:0032 0BF080  [6 -       46]            jsr     load_fir_coefficients
                 00410D
1972   
1973      P:0034                                   org     p:VEC_LOAD_SRC_COEF                   ; load in SRC coefficients from host
1974      P:0034 0BF080  [6 -       52]            jsr     load_src_coefficients
                 00412D
1975   
1976      P:0036                                   org     p:VEC_LOAD_WAVETABLE                  ; load in glottal pulse wavetable
1977      P:0036 0BF080  [6 -       58]            jsr     load_wavetable
                 0040FF
1978   
1979      P:0038                                   org     p:VEC_LOAD_UR_DATA                    ; load in utterance-rate parameters
1980      P:0038 0BF080  [6 -       64]            jsr     load_ur_parameters
                 004141
1981   
1982                                               ENDIF
1983   
1984   
1985   
1986      P:003A                                   org     p:ON_CHIP_PROGRAM_START
1987   
1988                                     ;***************************************************************************************
1989                                     ;  MAIN LOOP
1990                                     ;
1991                                     ;  This is where samples are created, and where input and output are controlled.
1992                                     ;  This is the top of the loop, where the input control-rate parameters are loaded
1993                                     ;  from the host when needed, and where the control-rate count is decremented.
1994                                     ;***************************************************************************************
1995   
1996      P:003A 0A0083  [6 -       70]  main      jclr    #RUN_STATUS,x:x_STATUS_flags,main     ; loop here if not running
                 00003A
1997   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 24



1998   
1999                                               IF      SSI_OUTPUT
2004                                               ENDIF
2005   
2006   
2007                                     ;  UPDATE CONTROL RATE PARAMETERS, IF NEEDED
2008      P:003C 5F9013  [2 -       72]  _top      clr     a                       y:cr_count,b  ; 0 -> a        count -> b
2009      P:003D 4D940D  [2 -       74]            cmp     a,b                     y:y_one,x1    ;               1 -> x1
2010      P:003E 0BF0AA  [6 -       80]            jseq    update_datatable                      ; jump if count == 0
                 00407C
2011   
2012                                     ;  DECREMENT CONTROL RATE COUNT
2013      P:0040 4C926C  [2 -       82]  _cont     sub     x1,b                    y:y_seed,x0   ; count -= 1    seed -> x0
2014   
2015   
2016                                     ;***************************************************************************************
2017                                     ;  ROUTINE:     lp_noise
2018                                     ;
2019                                     ;  Generates lowpass-filtered noise, using a linear-congruence pseudo-random number
2020                                     ;  generator, and a one-zero low pass filter (zero at PI).
2021                                     ;
2022                                     ;  Input:       x0 (seed)
2023                                     ;  Output:      x:x_lpn_signal (and also in b)
2024                                     ;***************************************************************************************
2025   
2026      P:0041 4E9300  [2 -       84]            move                            y:y_factor,y0 ; y0 = factor
2027      P:0042 5F10D0  [2 -       86]            mpy     x0,y0,a                 b,y:cr_count  ; a = seed * factor    store control rate count
2028      P:0043 200022  [2 -       88]            asr     a                                     ; a0 = randomly signed fraction from -1 to +1
2029      P:0044 210F00  [2 -       90]            move              a0,b                        ; put new random number in b
2030      P:0045 581248  [2 -       92]            add     x0,b                    a0,y:y_seed   ; b = x[n] + x[n-1]    store new random number
2031      P:0046 20002A  [2 -       94]            asr     b                                     ; b /= 2
2032      P:0047 570200  [2 -       96]            move              b,x:x_lpn_signal            ; store low pass noise signal
2033   
2034   
2035   
2036                                               IF      OVERSAMPLE_OSC
2037                                     ;***************************************************************************************
2038                                     ;  ROUTINE:     oversampling_oscillator
2039                                     ;
2040                                     ;  A 2X oversampling oscillator, where decimation is performed with an FIR filter.
2041                                     ;
2042                                     ;  Input:       none
2043                                     ;  Output:      a
2044                                     ;***************************************************************************************
2045   
2046                                     ;  SET UP REGISTERS FOR FIR FILTER
2047      P:0048 058323  [2 -       98]            move              x:x_FIR_mod,m3
2048      P:0049 058324  [2 -      100]            move              x:x_FIR_mod,m4
2049   
2050                                     ;  GENERATE ONE SAMPLE USING LINEAR INTERPOLATING OSCILLATOR
2051      P:004A 489F00  [2 -      102]            move              l:l_currentPhase,a          ; current phase angle -> a
2052      P:004B 499E00  [2 -      104]            move              l:l_phaseInc,b              ; phase angle increment -> b
2053      P:004C 458610  [2 -      106]            add     b,a       x:x_tableMod,x1             ; calc new current phase angle
2054                                                                                             ; uses 48 bit addition (int.frac)
2055      P:004D 4F9466  [2 -      108]            and     x1,a                    y:y_one,y1    ; wrap integer part of current phase
2056                                                                                             ; to keep within table boundaries
2057      P:004E 21D800  [2 -      110]            move              a,n0                        ; put int part of CPA into register n0
2058      P:004F 481F70  [2 -      112]            add     y1,a      a,l:l_currentPhase          ; store new current phase angle & add 1
2059                                               IF      MSOUND
2060      P:0050 47E866  [4 -      116]            and     x1,a      x:(r0+n0),y1                ; wrap integer part of phase & get f(n)
2061                                               ELSE
2063                                               ENDIF
2064      P:0051 21D800  [2 -      118]            move              a,n0                        ; put int part of incremented CPA into n0
2065      P:0052 2C0000  [2 -      120]            move              #0,a1                       ; zero upper part of a
2066                                               IF      MSOUND
2067      P:0053 57E800  [4 -      124]            move              x:(r0+n0),b                 ; get value of f(n+1)
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 25



2068                                               ELSE
2070                                               ENDIF
2071      P:0054 63847C  [2 -      126]            sub     y1,b      x:FIR_x_ptr,r3              ; diff = f(n+1) - f(n)   set r3 for FIR filter
2072      P:0055 21E422  [2 -      128]            asr     a         b,x0                        ; shift frac right since no sign bit
2073                                                                                             ; put diff in x0 register
2074      P:0056 210571  [2 -      130]            tfr     y1,a      a0,x1                       ; put f(n) in a; put frac. of CPA into x1
2075      P:0057 499EA3  [2 -      132]            macr    x0,x1,a   l:l_phaseInc,b              ; a = f(n) + (diff * CPA(frac))  phaseInc -> b
2076   
2077                                     ;  MOVE THIS SAMPLE INTO THE INPUT OF THE FIR FILTER
2078      P:0058 565300  [2 -      134]            move              a,x:(r3)-                   ; put sample into input of FIR filter
2079   
2080                                     ;  GENERATE SECOND SAMPLE USING LINEAR INTERPOLATING OSCILLATOR
2081      P:0059 489F00  [2 -      136]            move              l:l_currentPhase,a          ; current phase angle -> a
2082      P:005A 458610  [2 -      138]            add     b,a       x:x_tableMod,x1             ; calc new current phase angle
2083                                                                                             ; uses 48 bit addition (int.frac)
2084      P:005B 4F9466  [2 -      140]            and     x1,a                    y:y_one,y1    ; wrap integer part of current phase
2085                                                                                             ; to keep within table boundaries
2086      P:005C 21D800  [2 -      142]            move              a,n0                        ; put int part of CPA into register n0
2087      P:005D 481F70  [2 -      144]            add     y1,a      a,l:l_currentPhase          ; store new current phase angle & add 1
2088                                               IF      MSOUND
2089      P:005E 47E866  [4 -      148]            and     x1,a      x:(r0+n0),y1                ; wrap integer part of phase & get f(n)
2090                                               ELSE
2092                                               ENDIF
2093      P:005F 21D800  [2 -      150]            move              a,n0                        ; put int part of incremented CPA into n0
2094      P:0060 2C0000  [2 -      152]            move              #0,a1                       ; zero upper part of a
2095                                               IF      MSOUND
2096      P:0061 57E800  [4 -      156]            move              x:(r0+n0),b                 ; get value of f(n+1)
2097                                               ELSE
2099                                               ENDIF
2100      P:0062 64857C  [2 -      158]            sub     y1,b      x:FIR_y_ptr,r4              ; diff = f(n+1) - f(n)   set r4 for FIR filter
2101      P:0063 21E422  [2 -      160]            asr     a         b,x0                        ; shift frac right since no sign bit
2102                                                                                             ; put diff in x0 register
2103      P:0064 210571  [2 -      162]            tfr     y1,a      a0,x1                       ; put f(n) in a; put frac. of CPA into x1
2104      P:0065 2000A3  [2 -      164]            macr    x0,x1,a                               ; a = f(n) + (diff * CPA(frac)),
2105   
2106                                     ;  FILTER THE TWO SAMPLES USING THE FIR FILTER
2107      P:0066 F81B13  [2 -      166]            clr     a         a,x:(r3)+     y:(r4)+,y0
2108      P:0067 060300  [6 -      172]            do      x:x_FIR_mod,_end_loop
                 000069
2109      P:0069 F09BD2  [2 -      174]            mac     x0,y0,a   x:(r3)+,x0    y:(r4)+,y0
2110                                     _end_loop
2111      P:006A 2053D3  [2 -      176]            macr    x0,y0,a   (r3)-
2112   
2113                                     ;  STORE REGISTERS FOR FIR FILTER
2114      P:006B 630400  [2 -      178]            move              r3,x:FIR_x_ptr
2115      P:006C 640500  [2 -      180]            move              r4,x:FIR_y_ptr
2116      P:006D 059663  [2 -      182]            move                            y:y_max,m3
2117      P:006E 059664  [2 -      184]            move                            y:y_max,m4    ; output in a is decimated signal
2118   
2119   
2120   
2121                                               ELSE
2158                                               ENDIF
2159   
2160   
2161   
2162                                     ;***************************************************************************************
2163                                     ;  ROUTINE:     noisy_glottal_source
2164                                     ;
2165                                     ;  Calculates the noisy glottal source by adding pulsed noise to the glottal source
2166                                     ;  according to the breathiness parameter.  Also updates the OSC_AMP variable, by
2167                                     ;  adding the delta increment to it (don't use  OSC_AMP from here to end of loop).
2168                                     ;
2169                                     ;  Input:       a (glottal source), x:x_lpn_signal (lp noise)
2170                                     ;  Output:      x:x_ngs_signal, b (x_lpn_signal), x0 (pulsed noise)
2171                                     ;***************************************************************************************
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 26



2172   
2173      P:006F 10B000  [4 -      188]            move              a,y0          x:x_lpn_signal,x0 ; pulsed noise = lp_noise * gp
                 000002
2174      P:0071 21C5D1  [2 -      190]            mpyr    x0,y0,a   a,x1                        ; glottal source -> x1
2175   
2176      P:0072 10F000  [4 -      194]            move              a,x0          y:BREATHINESS,y0 ; store pulsed noise signal in x0
                 000049
2177      P:0074 4F84D0  [2 -      196]            mpy     x0,y0,a                 y:ANTI_BREATHINESS,y1 ; a = pulsed noise * breathiness
2178   
2179      P:0075 4E82F3  [2 -      198]            macr    x1,y1,a                 y:OSC_AMP,y0  ; a += gp * (1.0 - breathiness)
2180      P:0076 21C500  [2 -      200]            move              a,x1                        ; get amplitude factor
2181   
2182      P:0077 5E83E9  [2 -      202]            mpyr    x1,y0,b                 y:OSC_AMP_DELTA,a ; a = signal * amplitude factor
2183      P:0078 570100  [2 -      204]            move              b,x:x_ngs_signal            ; save noisy glottal source signal
2184   
2185      P:0079 578250  [2 -      206]            add     y0,a      x:x_lpn_signal,b            ; lp_noise signal -> b
2186      P:007A 5E0200  [2 -      208]            move                            a,y:OSC_AMP   ; OSC_AMP += OSC_AMP_DELTA
2187   
2188   
2189   
2190                                     ;***************************************************************************************
2191                                     ;  ROUTINE:     modulation_switch
2192                                     ;
2193                                     ;  Skips the crossmix_noise routine, if not switched on.  Note that register b contains
2194                                     ;  crossmixed noise if switch on, or plain lp noise if switched off.
2195                                     ;
2196                                     ;***************************************************************************************
2197   
2198      P:007B 0A01C0  [6 -      214]            jclr    #0,y:PULSE_MODULATION,_bpfilt         ; crossmixed noise in b (preserve!)
                 000081
2199   
2200   
2201   
2202                                     ;***************************************************************************************
2203                                     ;  ROUTINE:     crossmix_noise
2204                                     ;
2205                                     ;  Crossmixes pulsed noise and low-pass noise, according to the crossmix and
2206                                     ;  anti-crossmix factors (calculated from oscillator amplitude in outer loop).
2207                                     ;
2208                                     ;  Input:       x0 (pulsed noise signal), x:x_lpn_signal
2209                                     ;  Output:      b
2210                                     ;***************************************************************************************
2211   
2212      P:007D 4E9900  [2 -      216]            move                            y:crossmix,y0 ; ax -> y0
2213      P:007E 4F9A00  [2 -      218]            move                            y:anti_crossmix,y1 ; (1.0 - ax) -> y1
2214      P:007F 4582D8  [2 -      220]            mpy     x0,y0,b   x:x_lpn_signal,x1           ; b = ax * pulsed_noise          lp_noise -> x1
2215      P:0080 2000FB  [2 -      222]            macr    x1,y1,b                               ; b += (1.0 - ax) * lp_noise
2216   
2217   
2218   
2219                                     ;***************************************************************************************
2220                                     ;  ROUTINE:     bandpass_filter
2221                                     ;
2222                                     ;  Bandpass filters the input signal, with specified center frequency and bandwidth
2223                                     ;  converted the the filter coefficients ALPHA, BETA, and GAMMA.  Note that this
2224                                     ;  implementation does not use R registers, since using them means more instructions,
2225                                     ;  and fixed locations of filter memory
2226                                     ;
2227                                     ;  Input:       b (b is preserved)
2228                                     ;  Output:      a (and also in y:y_bp_yn1)
2229                                     ;***************************************************************************************
2230   
2231      P:0081 13B000  [4 -      226]  _bpfilt   move              b,y1          x:ALPHA,x0
                 000007
2232      P:0083 4E86C0  [2 -      228]            mpy     x0,y1,a                 y:y_bp_xn2,y0 ; a = alpha * x(n)
2233      P:0084 4488D6  [2 -      230]            mac     -x0,y0,a  x:BETA,x0                   ; a -= alpha * x(n-2)
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 27



2234      P:0085 4E8800  [2 -      232]            move                            y:y_bp_yn2,y0
2235      P:0086 4489D6  [2 -      234]            mac     -x0,y0,a  x:GAMMA,x0                  ; a -= beta * y(n-2)
2236      P:0087 4E8700  [2 -      236]            move                            y:y_bp_yn1,y0
2237      P:0088 4E08D2  [2 -      238]            mac     x0,y0,a                 y0,y:y_bp_yn2 ; a += gamma * y(n-1)
2238      P:0089 4C8532  [2 -      240]            asl     a                       y:y_bp_xn1,x0 ; a *= 2
2239      P:008A 4C0611  [2 -      242]            rnd     a                       x0,y:y_bp_xn2
2240      P:008B 5E0700  [2 -      244]            move                            a,y:y_bp_yn1  ; store output
2241      P:008C 4F0500  [2 -      246]            move                            y1,y:y_bp_xn1 ; store input
2242      P:008D 560200  [2 -      248]            move              a,x:x_fric_sig              ; store frication signal
2243   
2244   
2245   
2246                                     ;***************************************************************************************
2247                                     ;  ROUTINE:     sum_asp_ngs
2248                                     ;
2249                                     ;  Scale the aspiration signal (crossmixed noise) and add it to the noisy
2250                                     ;  glottal source.
2251                                     ;
2252                                     ;  Input:       b (crossmixed noise), x:x_ngs_signal (noisy glottal source)
2253                                     ;  Output:      a (summed signal: also in y:y_bp_yn1), y1 (vtScale)
2254                                     ;***************************************************************************************
2255   
2256      P:008E 18F000  [4 -      252]            move              b,x0          y:ASP_AMP,y0  ; crossmixed noise -> x0   asp_amp -> y0
                 000051
2257      P:0090 4581D1  [2 -      254]            mpyr    x0,y0,a   x:x_ngs_signal,x1           ; a = crossmix_noise * asp_amp
2258      P:0091 479960  [2 -      256]            add     x1,a      x:vtScale,y1                ; a += noisy glottal source  vtScale->y1
2259   
2260   
2261   
2262                                     ;***************************************************************************************
2263                                     ;  ROUTINE:     vocalTract
2264                                     ;
2265                                     ;  Calculates the propagation of the input sample value (the glottis) through the vocal
2266                                     ;  tract, and sums the output from the nose and mouth.
2267                                     ;
2268                                     ;  Input:       a, x:x_fric_sig, y1 (vtScale)
2269                                     ;  Output:      a
2270                                     ;***************************************************************************************
2271   
2272                                     ;  SCALE INPUT SO THERE IS NO OVERFLOW
2273      P:0092 21C500  [2 -      258]            move              a,x1
2274      P:0093 639AF8  [2 -      260]            mpy     x1,y1,b   x:coeff_mem,r3              ; scaled input -> b    coeff ptr -> r3
2275      P:0094 649B00  [2 -      262]            move              x:tap_mem,r4                ; set up pointer to tap memory
2276   
2277                                     ;  BRANCH TEST
2278      P:0095 0B0004  [4 -      266]            bchg    #VT_BRANCH,x:x_STATUS_flags           ; flip branch bit
2279      P:0096 0A0084  [6 -      272]            jclr    #VT_BRANCH,x:x_STATUS_flags,_branch   ; branch every other time
                 000127
2280   
2281   
2282                                     ;  FIRST BRANCH
2283                                     ;  INITIALIZE TOP LEFT OF TUBE
2284      P:0098 4D8000  [2 -      274]            move                            y:DAMPING,x1  ; damping -> x1 (x1 not disturbed)
2285      P:0099 4EA100  [2 -      276]            move                            y:S1_BB,y0    ; BL_PREV -> y0
2286      P:009A 4EA0EB  [2 -      278]            macr    x1,y0,b                 y:S1_TB,y0    ; b += damping * BL_PREV
2287      P:009B 44DB00  [2 -      280]            move              x:(r3)+,x0                  ; coeff -> x0
2288   
2289                                     ;  JUNCTION S1 - S2 (R1 - R2)
2290      P:009C 4FA3D0  [2 -      282]            mpy     x0,y0,a                 y:S2_BB,y1    ; a = coeff * TL_PREV
2291      P:009D 5720C7  [2 -      284]            macr    -x0,y1,a  b,x:S1_TA                   ; a -= coeff * BR_PREV   b -> TL_CURR
2292      P:009E 21C4E0  [2 -      286]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2293      P:009F 4EA2A3  [2 -      288]            macr    x0,x1,a                 y:S2_TB,y0    ; a += damping * delta
2294      P:00A0 5622F8  [2 -      290]            mpy     y1,x1,b   a,x:S2_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2295      P:00A1 44DBAB  [2 -      292]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2296   
2297                                     ;  JUNCTION S2 - S3 (R2 - R3)
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 28



2298      P:00A2 4FA5D0  [2 -      294]            mpy     x0,y0,a                 y:S3_BB,y1    ; a = coeff * TL_PREV
2299      P:00A3 5721C7  [2 -      296]            macr    -x0,y1,a  b,x:S1_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2300      P:00A4 21C4E0  [2 -      298]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2301      P:00A5 4EA4A2  [2 -      300]            mac     x0,x1,a                 y:S3_TB,y0    ; a += damping * delta
2302      P:00A6 4FDCF8  [2 -      302]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV   fric_tap0-> y1
2303      P:00A7 4482AB  [2 -      304]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta    frication-> x0
2304      P:00A8 44DBC3  [2 -      306]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap0 * frication
2305      P:00A9 562400  [2 -      308]            move              a,x:S3_TA                   ; a -> TR_CURR
2306   
2307                                     ;  JUNCTION S3 - S4 (R3 - R4)
2308      P:00AA 4FA7D0  [2 -      310]            mpy     x0,y0,a                 y:S4_BB,y1    ; a = coeff * TL_PREV
2309      P:00AB 5723C7  [2 -      312]            macr    -x0,y1,a  b,x:S2_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2310      P:00AC 21C4E0  [2 -      314]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2311      P:00AD 4EB5A2  [2 -      316]            mac     x0,x1,a                 y:N1_BB,y0    ; a += damping * delta    n1 B prev-> y0
2312      P:00AE 4FDCF8  [2 -      318]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV   fric_tap1-> y1
2313      P:00AF 4482AB  [2 -      320]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta    frication-> x0
2314      P:00B0 4CA6C3  [2 -      322]            macr    y1,x0,a                 y:S4_TB,x0    ; a += tap1 * frication   s4 T prev-> x0
2315      P:00B1 572500  [2 -      324]            move              b,x:S3_BA                   ; b -> BL_CURR
2316      P:00B2 562600  [2 -      326]            move              a,x:S4_TA                   ; a -> TR_CURR
2317   
2318                                     ;  CALCULATE 3-WAY JUNCTION:  S4 - S5 - N1 (R4 - N1)
2319      P:00B3 4DA900  [2 -      328]            move                            y:S5_BB,x1    ; s5 B prev -> x1
2320   
2321      P:00B4 47DB69  [2 -      330]            tfr     x1,b      x:(r3)+,y1                  ; ALPHA_L -> y1
2322      P:00B5 47DBC0  [2 -      332]            mpy     x0,y1,a   x:(r3)+,y1                  ; ALPHA_R -> y1
2323      P:00B6 47DBF2  [2 -      334]            mac     x1,y1,a   x:(r3)+,y1                  ; ALPHA_T -> y1
2324   
2325      P:00B7 4F80B3  [2 -      336]            macr    y0,y1,a                 y:DAMPING,y1
2326      P:00B8 21C500  [2 -      338]            move              a,x1
2327      P:00B9 2000F0  [2 -      340]            mpy     x1,y1,a
2328      P:00BA 21E532  [2 -      342]            asl     a         b,x1
2329   
2330      P:00BB 21CFC7  [2 -      344]            macr    -x0,y1,a  a,b                         ; left output
2331      P:00BC 562701  [2 -      346]            tfr     b,a       a,x:S4_BA                   ; left output -> s4 B curr
2332   
2333      P:00BD 4682BF  [2 -      348]            macr    -y0,y1,b  x:x_fric_sig,y0             ; top output
2334   
2335      P:00BE 5734F6  [2 -      350]            mac     -x1,y1,a  b,x:N1_TA                   ; right output   TO -> s5 T curr
2336      P:00BF F19B00  [2 -      352]            move              x:(r3)+,x0    y:(r4)+,y1    ; coeff -> x0    fric_tap2 -> y1
2337      P:00C0 4EA8B3  [2 -      354]            macr    y1,y0,a                 y:S5_TB,y0    ; a += tap2 * frication
2338      P:00C1 562800  [2 -      356]            move              a,x:S5_TA                   ; right output -> s5 T curr
2339   
2340                                     ;  JUNCTION S5 - S6 (R4 - R5)
2341      P:00C2 4FABD0  [2 -      358]            mpy     x0,y0,a                 y:S6_BB,y1    ; a = coeff * TL_PREV
2342      P:00C3 4D80C7  [2 -      360]            macr    -x0,y1,a                y:DAMPING,x1  ; a -= coeff * BR_PREV
2343      P:00C4 21C4E0  [2 -      362]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2344      P:00C5 4EAAA2  [2 -      364]            mac     x0,x1,a                 y:S6_TB,y0    ; a += damping * delta
2345      P:00C6 4FDCF8  [2 -      366]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap3-> y1
2346      P:00C7 4482AB  [2 -      368]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2347      P:00C8 4FDCC3  [2 -      370]            macr    y1,x0,a                 y:(r4)+,y1    ; a += tap3 * frication
2348      P:00C9 562A00  [2 -      372]            move              a,x:S6_TA                   ; a -> TR_CURR
2349   
2350                                     ;  JUNCTION:  S6 - S7 (R5 internal)
2351      P:00CA 5729E0  [2 -      374]            mpy     y0,x1,a   b,x:S5_BA                   ; a = TL_PREV * damping
2352      P:00CB 4FADC3  [2 -      376]            macr    y1,x0,a                 y:S7_BB,y1    ; a += tap4 * frication   BR_PREV -> y1
2353      P:00CC 562CF9  [2 -      378]            mpyr    y1,x1,b   a,x:S7_TA                   ; b = BR_PREV * damping   a -> TR_CURR
2354   
2355                                     ;  JUNCTION S7 - S8 (R5 - R6)
2356      P:00CD 44DB00  [2 -      380]            move              x:(r3)+,x0
2357      P:00CE 4EAC00  [2 -      382]            move                            y:S7_TB,y0
2358      P:00CF 4FAFD0  [2 -      384]            mpy     x0,y0,a                 y:S8_BB,y1    ; a = coeff * TL_PREV
2359      P:00D0 572BC7  [2 -      386]            macr    -x0,y1,a  b,x:S6_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2360      P:00D1 21C4E0  [2 -      388]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2361      P:00D2 4EAEA2  [2 -      390]            mac     x0,x1,a                 y:S8_TB,y0    ; a += damping * delta
2362      P:00D3 4FDCF8  [2 -      392]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap5-> y1
2363      P:00D4 4482AB  [2 -      394]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 29



2364      P:00D5 44DBC3  [2 -      396]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap5 * frication
2365      P:00D6 562E00  [2 -      398]            move              a,x:S8_TA                   ; a -> TR_CURR
2366   
2367                                     ;  JUNCTION S8 - S9 (R6 - R7)
2368      P:00D7 4FB1D0  [2 -      400]            mpy     x0,y0,a                 y:S9_BB,y1    ; a = coeff * TL_PREV
2369      P:00D8 572DC7  [2 -      402]            macr    -x0,y1,a  b,x:S7_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2370      P:00D9 21C4E0  [2 -      404]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2371      P:00DA 4EB0A2  [2 -      406]            mac     x0,x1,a                 y:S9_TB,y0    ; a += damping * delta
2372      P:00DB 4FDCF8  [2 -      408]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap6-> y1
2373      P:00DC 4482AB  [2 -      410]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2374      P:00DD 44DBC3  [2 -      412]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap6 * frication
2375      P:00DE 563000  [2 -      414]            move              a,x:S9_TA                   ; a -> TR_CURR
2376   
2377                                     ;  JUNCTION S9 - S10 (R7 - R8)
2378      P:00DF 4FB3D0  [2 -      416]            mpy     x0,y0,a                 y:S10_BB,y1   ; a = coeff * TL_PREV
2379      P:00E0 572FC7  [2 -      418]            macr    -x0,y1,a  b,x:S8_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2380      P:00E1 21C4E0  [2 -      420]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2381      P:00E2 4EB2A2  [2 -      422]            mac     x0,x1,a                 y:S10_TB,y0   ; a += damping * delta
2382      P:00E3 4FDCF8  [2 -      424]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap7-> y1
2383      P:00E4 4482AB  [2 -      426]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2384      P:00E5 44DBC3  [2 -      428]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap7 * frication
2385      P:00E6 563200  [2 -      430]            move              a,x:S10_TA                  ; a -> TR_CURR
2386      P:00E7 573100  [2 -      432]            move              b,x:S9_BA                   ; b -> BL_CURR
2387   
2388                                     ;  MOUTH REFLECTION
2389      P:00E8 448AD9  [2 -      434]            mpyr    y0,x0,b   x:fa10,x0                   ; b = TL_PREV * coeff    fa10 -> x0
2390      P:00E9 17B000  [4 -      438]            move              b,y1          x:fb11,x1     ; scaled input -> y1     fb11 -> x1
                 00000B
2391      P:00EB 4FB3C0  [2 -      440]            mpy     x0,y1,a                 y:S10_BB,y1   ; a = fa10 * input       y[n-1] -> y1
2392      P:00EC 44DBF7  [2 -      442]            macr    -x1,y1,a  x:(r3)+,x0                  ; a -= fb11 * y[n-1]     radCoeff -> x0
2393      P:00ED 563300  [2 -      444]            move              a,x:S10_BA                  ; a -> BL_CURR
2394   
2395                                     ;  MOUTH RADIATION (INPUT IN y0, OUTPUT STORED IN y:mRadiationY)
2396      P:00EE 448CD1  [2 -      446]            mpyr    x0,y0,a   x:fa20,x0                   ; a = TL_PREV * coeff   fa20 -> x0
2397      P:00EF 14B000  [4 -      450]            move              a,y0          x:fa21,x1     ; scaled input -> y0    fa21 -> x1
                 00000D
2398      P:00F1 4F89D0  [2 -      452]            mpy     x0,y0,a                 y:mRadiationX,y1 ; a = fa20 * input      x[n-1] -> y1
2399      P:00F2 458EF2  [2 -      454]            mac     x1,y1,a   x:fb21,x1                   ; a += fa21 * x[n-1]    fb21 -> x1
2400      P:00F3 4F8A00  [2 -      456]            move                            y:mRadiationY,y1 ; y[n-1] -> y1
2401      P:00F4 4E09F7  [2 -      458]            macr    -x1,y1,a                y0,y:mRadiationX ; a -= fb21 * y[n-1]    store x[n]
2402      P:00F5 5E0A00  [2 -      460]            move                            a,y:mRadiationY ; store y[n]
2403   
2404   
2405                                     ;  CALCULATE NOSE SECTIONS
2406                                     ;  JUNCTION N1 - N2
2407      P:00F6 4EB400  [2 -      462]            move                            y:N1_TB,y0
2408      P:00F7 44DB00  [2 -      464]            move              x:(r3)+,x0
2409      P:00F8 4FB7D0  [2 -      466]            mpy     x0,y0,a                 y:N2_BB,y1    ; a = coeff * TL_PREV
2410      P:00F9 4D80C7  [2 -      468]            macr    -x0,y1,a                y:DAMPING,x1  ; a -= coeff * BR_PREV
2411      P:00FA 21C4E0  [2 -      470]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2412      P:00FB 4EB6A3  [2 -      472]            macr    x0,x1,a                 y:N2_TB,y0    ; a += damping * delta
2413      P:00FC 5636F8  [2 -      474]            mpy     y1,x1,b   a,x:N2_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2414      P:00FD 44DBAB  [2 -      476]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2415   
2416                                     ;  JUNCTION N2 - N3
2417      P:00FE 4FB9D0  [2 -      478]            mpy     x0,y0,a                 y:N3_BB,y1    ; a = coeff * TL_PREV
2418      P:00FF 5735C7  [2 -      480]            macr    -x0,y1,a  b,x:N1_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2419      P:0100 21C4E0  [2 -      482]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2420      P:0101 4EB8A3  [2 -      484]            macr    x0,x1,a                 y:N3_TB,y0    ; a += damping * delta
2421      P:0102 5638F8  [2 -      486]            mpy     y1,x1,b   a,x:N3_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2422      P:0103 44DBAB  [2 -      488]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2423   
2424                                     ;  JUNCTION N3 - N4
2425      P:0104 4FBBD0  [2 -      490]            mpy     x0,y0,a                 y:N4_BB,y1    ; a = coeff * TL_PREV
2426      P:0105 5737C7  [2 -      492]            macr    -x0,y1,a  b,x:N2_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2427      P:0106 21C4E0  [2 -      494]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 30



2428      P:0107 4EBAA3  [2 -      496]            macr    x0,x1,a                 y:N4_TB,y0    ; a += damping * delta
2429      P:0108 563AF8  [2 -      498]            mpy     y1,x1,b   a,x:N4_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2430      P:0109 44DBAB  [2 -      500]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2431   
2432                                     ;  JUNCTION N4 - N5
2433      P:010A 4FBDD0  [2 -      502]            mpy     x0,y0,a                 y:N5_BB,y1    ; a = coeff * TL_PREV
2434      P:010B 5739C7  [2 -      504]            macr    -x0,y1,a  b,x:N3_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2435      P:010C 21C4E0  [2 -      506]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2436      P:010D 4EBCA3  [2 -      508]            macr    x0,x1,a                 y:N5_TB,y0    ; a += damping * delta
2437      P:010E 563CF8  [2 -      510]            mpy     y1,x1,b   a,x:N5_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2438      P:010F 44DBAB  [2 -      512]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2439   
2440                                     ;  JUNCTION N5 - N6
2441      P:0110 4FBFD0  [2 -      514]            mpy     x0,y0,a                 y:N6_BB,y1    ; a = coeff * TL_PREV
2442      P:0111 573BC7  [2 -      516]            macr    -x0,y1,a  b,x:N4_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2443      P:0112 21C4E0  [2 -      518]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2444      P:0113 4EBEA3  [2 -      520]            macr    x0,x1,a                 y:N6_TB,y0    ; a += damping * delta
2445      P:0114 563EF8  [2 -      522]            mpy     y1,x1,b   a,x:N6_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2446      P:0115 44DBAB  [2 -      524]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2447      P:0116 573D00  [2 -      526]            move              b,x:N5_BA                   ; b -> BL_CURR
2448   
2449                                     ;  NOSE REFLECTION
2450      P:0117 4490D9  [2 -      528]            mpyr    y0,x0,b   x:nfa10,x0                  ; b = TL_PREV * coeff    fa10 -> x0
2451      P:0118 17B000  [4 -      532]            move              b,y1          x:nfb11,x1    ; scaled input -> y1     fb11 -> x1
                 000011
2452      P:011A 4FBFC0  [2 -      534]            mpy     x0,y1,a                 y:N6_BB,y1    ; a = fa10 * input       y[n-1] -> y1
2453      P:011B 44DBF7  [2 -      536]            macr    -x1,y1,a  x:(r3)+,x0                  ; a -= fb11 * y[n-1]     radCoeff -> x0
2454      P:011C 563F00  [2 -      538]            move              a,x:N6_BA                   ; a -> BL_CURR
2455   
2456                                     ;  NOSE RADIATION (INPUT IN y0, OUTPUT STORED IN y:nRadiationY)
2457      P:011D 4492D1  [2 -      540]            mpyr    x0,y0,a   x:nfa20,x0                  ; a = TL_PREV * coeff   fa20 -> x0
2458      P:011E 14B000  [4 -      544]            move              a,y0          x:nfa21,x1    ; scaled input -> y0    fa21 -> x1
                 000013
2459      P:0120 4F8BD0  [2 -      546]            mpy     x0,y0,a                 y:nRadiationX,y1 ; a = fa20 * input      x[n-1] -> y1
2460      P:0121 4594F2  [2 -      548]            mac     x1,y1,a   x:nfb21,x1                  ; a += fa21 * x[n-1]    fb21 -> x1
2461      P:0122 4F8C00  [2 -      550]            move                            y:nRadiationY,y1 ; y[n-1] -> y1
2462      P:0123 4E0BF7  [2 -      552]            macr    -x1,y1,a                y0,y:nRadiationX ; a -= fb21 * y[n-1]    store x[n]
2463      P:0124 5E0C00  [2 -      554]            move                            a,y:nRadiationY ; store y[n]
2464   
2465                                     ;  GO TO END OF VOCAL TRACT SUBROUTINE
2466      P:0125 0AF080  [6 -      560]            jmp     _endVT
                 0001B4
2467   
2468   
2469   
2470                                     ;  SECOND BRANCH
2471                                     ;  INITIALIZE TOP LEFT OF TUBE
2472      P:0127 4D8000  [2 -      562]  _branch   move                            y:DAMPING,x1  ; damping -> x1 (x1 not disturbed)
2473      P:0128 46A100  [2 -      564]            move              x:S1_BA,y0                  ; BL_PREV -> y0
2474      P:0129 46A0EB  [2 -      566]            macr    x1,y0,b   x:S1_TA,y0                  ; b += damping * BL_PREV
2475      P:012A 44DB00  [2 -      568]            move              x:(r3)+,x0                  ; coeff -> x0
2476   
2477                                     ;  JUNCTION S1 - S2 (R1 - R2)
2478      P:012B 47A3D0  [2 -      570]            mpy     x0,y0,a   x:S2_BA,y1                  ; a = coeff * TL_PREV
2479      P:012C 5F20C7  [2 -      572]            macr    -x0,y1,a                b,y:S1_TB     ; a -= coeff * BR_PREV   b -> TL_CURR
2480      P:012D 21C4E0  [2 -      574]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2481      P:012E 46A2A3  [2 -      576]            macr    x0,x1,a   x:S2_TA,y0                  ; a += damping * delta
2482      P:012F 5E22F8  [2 -      578]            mpy     y1,x1,b                 a,y:S2_TB     ; b = damping * BR_PREV   a -> TR_CURR
2483      P:0130 44DBAB  [2 -      580]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2484   
2485                                     ;  JUNCTION S2 - S3 (R2 - R3)
2486      P:0131 47A5D0  [2 -      582]            mpy     x0,y0,a   x:S3_BA,y1                  ; a = coeff * TL_PREV
2487      P:0132 5F21C7  [2 -      584]            macr    -x0,y1,a                b,y:S1_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2488      P:0133 21C4E0  [2 -      586]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2489      P:0134 46A4A2  [2 -      588]            mac     x0,x1,a   x:S3_TA,y0                  ; a += damping * delta
2490      P:0135 4FDCF8  [2 -      590]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV   fric_tap0-> y1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 31



2491      P:0136 4482AB  [2 -      592]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta    frication-> x0
2492      P:0137 44DBC3  [2 -      594]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap0 * frication
2493      P:0138 5E2400  [2 -      596]            move                            a,y:S3_TB     ; a -> TR_CURR
2494   
2495                                     ;  JUNCTION S3 - S4 (R3 - R4)
2496      P:0139 47A7D0  [2 -      598]            mpy     x0,y0,a   x:S4_BA,y1                  ; a = coeff * TL_PREV
2497      P:013A 5F23C7  [2 -      600]            macr    -x0,y1,a                b,y:S2_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2498      P:013B 21C4E0  [2 -      602]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2499      P:013C 46B5A2  [2 -      604]            mac     x0,x1,a   x:N1_BA,y0                  ; a += damping * delta    n1 B prev-> y0
2500      P:013D 4FDCF8  [2 -      606]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap1-> y1
2501      P:013E 4482AB  [2 -      608]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta    frication-> x0
2502      P:013F 44A6C3  [2 -      610]            macr    y1,x0,a   x:S4_TA,x0                  ; a += tap1 * frication   s4 T prev-> x0
2503      P:0140 5F2500  [2 -      612]            move                            b,y:S3_BB     ; b -> BL_CURR
2504      P:0141 5E2600  [2 -      614]            move                            a,y:S4_TB     ; a -> TR_CURR
2505   
2506                                     ;  CALCULATE 3-WAY JUNCTION:  S4 - S5 - N1 (R4 - N1)
2507      P:0142 45A900  [2 -      616]            move              x:S5_BA,x1                  ; s5 B prev -> x1
2508   
2509      P:0143 47DB69  [2 -      618]            tfr     x1,b      x:(r3)+,y1                  ; ALPHA_L -> y1
2510      P:0144 47DBC0  [2 -      620]            mpy     x0,y1,a   x:(r3)+,y1                  ; ALPHA_R -> y1
2511      P:0145 47DBF2  [2 -      622]            mac     x1,y1,a   x:(r3)+,y1                  ; ALPHA_T -> y1
2512   
2513      P:0146 4F80B3  [2 -      624]            macr    y0,y1,a                 y:DAMPING,y1
2514      P:0147 21C500  [2 -      626]            move              a,x1
2515      P:0148 2000F0  [2 -      628]            mpy     x1,y1,a
2516      P:0149 21E532  [2 -      630]            asl     a         b,x1
2517   
2518      P:014A 21CFC7  [2 -      632]            macr    -x0,y1,a  a,b                         ; left output
2519      P:014B 5E2701  [2 -      634]            tfr     b,a                     a,y:S4_BB     ; left output -> s4 B curr
2520   
2521      P:014C 4682BF  [2 -      636]            macr    -y0,y1,b  x:x_fric_sig,y0             ; top output
2522   
2523      P:014D 5F34F6  [2 -      638]            mac     -x1,y1,a                b,y:N1_TB     ; right output   TO -> s5 T curr
2524      P:014E F19B00  [2 -      640]            move              x:(r3)+,x0    y:(r4)+,y1    ; coeff -> x0    fric_tap2 -> y1
2525      P:014F 46A8B3  [2 -      642]            macr    y1,y0,a   x:S5_TA,y0                  ; a += tap2 * frication
2526      P:0150 5E2800  [2 -      644]            move                            a,y:S5_TB     ; right output -> s5 T curr
2527   
2528   
2529                                     ;  CALCULATE MOUTH SECTIONS
2530                                     ;  JUNCTION S5 - S6 (R4 - R5)
2531      P:0151 47ABD0  [2 -      646]            mpy     x0,y0,a   x:S6_BA,y1                  ; a = coeff * TL_PREV
2532      P:0152 4D80C7  [2 -      648]            macr    -x0,y1,a                y:DAMPING,x1  ; a -= coeff * BR_PREV
2533      P:0153 21C4E0  [2 -      650]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2534      P:0154 46AAA2  [2 -      652]            mac     x0,x1,a   x:S6_TA,y0                  ; a += damping * delta
2535      P:0155 4FDCF8  [2 -      654]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap3-> y1
2536      P:0156 4482AB  [2 -      656]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2537      P:0157 4FDCC3  [2 -      658]            macr    y1,x0,a                 y:(r4)+,y1    ; a += tap3 * frication
2538      P:0158 5E2A00  [2 -      660]            move                            a,y:S6_TB     ; a -> TR_CURR
2539   
2540                                     ;  JUNCTION:  S6 - S7 (R5 internal)
2541      P:0159 5F29E0  [2 -      662]            mpy     y0,x1,a                 b,y:S5_BB     ; a = TL_PREV * damping
2542      P:015A 47ADC3  [2 -      664]            macr    y1,x0,a   x:S7_BA,y1                  ; a += tap4 * frication   BR_PREV -> y1
2543      P:015B 5E2CF9  [2 -      666]            mpyr    y1,x1,b                 a,y:S7_TB     ; b = BR_PREV * damping   a -> TR_CURR
2544   
2545                                     ;  JUNCTION S7 - S8 (R5 - R6)
2546      P:015C 44DB00  [2 -      668]            move              x:(r3)+,x0
2547      P:015D 46AC00  [2 -      670]            move              x:S7_TA,y0
2548      P:015E 47AFD0  [2 -      672]            mpy     x0,y0,a   x:S8_BA,y1                  ; a = coeff * TL_PREV
2549      P:015F 5F2BC7  [2 -      674]            macr    -x0,y1,a                b,y:S6_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2550      P:0160 21C4E0  [2 -      676]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2551      P:0161 46AEA2  [2 -      678]            mac     x0,x1,a   x:S8_TA,y0                  ; a += damping * delta
2552      P:0162 4FDCF8  [2 -      680]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap5-> y1
2553      P:0163 4482AB  [2 -      682]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2554      P:0164 44DBC3  [2 -      684]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap5 * frication
2555      P:0165 5E2E00  [2 -      686]            move                            a,y:S8_TB     ; a -> TR_CURR
2556   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 32



2557                                     ;  JUNCTION S8 - S9 (R6 - R7)
2558      P:0166 47B1D0  [2 -      688]            mpy     x0,y0,a   x:S9_BA,y1                  ; a = coeff * TL_PREV
2559      P:0167 5F2DC7  [2 -      690]            macr    -x0,y1,a                b,y:S7_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2560      P:0168 21C4E0  [2 -      692]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2561      P:0169 46B0A2  [2 -      694]            mac     x0,x1,a   x:S9_TA,y0                  ; a += damping * delta
2562      P:016A 4FDCF8  [2 -      696]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap6-> y1
2563      P:016B 4482AB  [2 -      698]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2564      P:016C 44DBC3  [2 -      700]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap6 * frication
2565      P:016D 5E3000  [2 -      702]            move                            a,y:S9_TB     ; a -> TR_CURR
2566   
2567                                     ;  JUNCTION S9 - S10 (R7 - R8)
2568      P:016E 47B3D0  [2 -      704]            mpy     x0,y0,a   x:S10_BA,y1                 ; a = coeff * TL_PREV
2569      P:016F 5F2FC7  [2 -      706]            macr    -x0,y1,a                b,y:S8_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2570      P:0170 21C4E0  [2 -      708]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2571      P:0171 46B2A2  [2 -      710]            mac     x0,x1,a   x:S10_TA,y0                 ; a += damping * delta
2572      P:0172 4FDCF8  [2 -      712]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap7-> y1
2573      P:0173 4482AB  [2 -      714]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2574      P:0174 44DBC3  [2 -      716]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap7 * frication
2575      P:0175 5E3200  [2 -      718]            move                            a,y:S10_TB    ; a -> TR_CURR
2576      P:0176 5F3100  [2 -      720]            move                            b,y:S9_BB     ; b -> BL_CURR
2577   
2578                                     ;  MOUTH REFLECTION
2579      P:0177 448AD9  [2 -      722]            mpyr    y0,x0,b   x:fa10,x0                   ; b = TL_PREV * coeff    fa10 -> x0
2580      P:0178 17B000  [4 -      726]            move              b,y1          x:fb11,x1     ; scaled input -> y1     fb11 -> x1
                 00000B
2581      P:017A 47B3C0  [2 -      728]            mpy     x0,y1,a   x:S10_BA,y1                 ; a = fa10 * input       y[n-1] -> y1
2582      P:017B 44DBF7  [2 -      730]            macr    -x1,y1,a  x:(r3)+,x0                  ; a -= fb11 * y[n-1]     radCoeff -> x0
2583      P:017C 5E3300  [2 -      732]            move                            a,y:S10_BB    ; a -> BL_CURR
2584   
2585                                     ;  MOUTH RADIATION (INPUT IN y0, OUTPUT STORED IN y:mRadiationY)
2586      P:017D 448CD1  [2 -      734]            mpyr    x0,y0,a   x:fa20,x0                   ; a = TL_PREV * coeff   fa20 -> x0
2587      P:017E 14B000  [4 -      738]            move              a,y0          x:fa21,x1     ; scaled input -> y0    fa21 -> x1
                 00000D
2588      P:0180 4F89D0  [2 -      740]            mpy     x0,y0,a                 y:mRadiationX,y1 ; a = fa20 * input      x[n-1] -> y1
2589      P:0181 458EF2  [2 -      742]            mac     x1,y1,a   x:fb21,x1                   ; a += fa21 * x[n-1]    fb21 -> x1
2590      P:0182 4F8A00  [2 -      744]            move                            y:mRadiationY,y1 ; y[n-1] -> y1
2591      P:0183 4E09F7  [2 -      746]            macr    -x1,y1,a                y0,y:mRadiationX ; a -= fb21 * y[n-1]    store x[n]
2592      P:0184 5E0A00  [2 -      748]            move                            a,y:mRadiationY ; store y[n]
2593   
2594   
2595                                     ;  CALCULATE NOSE SECTIONS
2596                                     ;  JUNCTION N1 - N2
2597      P:0185 46B400  [2 -      750]            move              x:N1_TA,y0
2598      P:0186 44DB00  [2 -      752]            move              x:(r3)+,x0
2599      P:0187 47B7D0  [2 -      754]            mpy     x0,y0,a   x:N2_BA,y1                  ; a = coeff * TL_PREV
2600      P:0188 4D80C7  [2 -      756]            macr    -x0,y1,a                y:DAMPING,x1  ; a -= coeff * BR_PREV
2601      P:0189 21C4E0  [2 -      758]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2602      P:018A 46B6A3  [2 -      760]            macr    x0,x1,a   x:N2_TA,y0                  ; a += damping * delta
2603      P:018B 5E36F8  [2 -      762]            mpy     y1,x1,b                 a,y:N2_TB     ; b = damping * BR_PREV   a -> TR_CURR
2604      P:018C 44DBAB  [2 -      764]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2605   
2606                                     ;  JUNCTION N2 - N3
2607      P:018D 47B9D0  [2 -      766]            mpy     x0,y0,a   x:N3_BA,y1                  ; a = coeff * TL_PREV
2608      P:018E 5F35C7  [2 -      768]            macr    -x0,y1,a                b,y:N1_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2609      P:018F 21C4E0  [2 -      770]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2610      P:0190 46B8A3  [2 -      772]            macr    x0,x1,a   x:N3_TA,y0                  ; a += damping * delta
2611      P:0191 5E38F8  [2 -      774]            mpy     y1,x1,b                 a,y:N3_TB     ; b = damping * BR_PREV   a -> TR_CURR
2612      P:0192 44DBAB  [2 -      776]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2613   
2614                                     ;  JUNCTION N3 - N4
2615      P:0193 47BBD0  [2 -      778]            mpy     x0,y0,a   x:N4_BA,y1                  ; a = coeff * TL_PREV
2616      P:0194 5F37C7  [2 -      780]            macr    -x0,y1,a                b,y:N2_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2617      P:0195 21C4E0  [2 -      782]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2618      P:0196 46BAA3  [2 -      784]            macr    x0,x1,a   x:N4_TA,y0                  ; a += damping * delta
2619      P:0197 5E3AF8  [2 -      786]            mpy     y1,x1,b                 a,y:N4_TB     ; b = damping * BR_PREV   a -> TR_CURR
2620      P:0198 44DBAB  [2 -      788]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 33



2621   
2622                                     ;  JUNCTION N4 - N5
2623      P:0199 47BDD0  [2 -      790]            mpy     x0,y0,a   x:N5_BA,y1                  ; a = coeff * TL_PREV
2624      P:019A 5F39C7  [2 -      792]            macr    -x0,y1,a                b,y:N3_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2625      P:019B 21C4E0  [2 -      794]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2626      P:019C 46BCA3  [2 -      796]            macr    x0,x1,a   x:N5_TA,y0                  ; a += damping * delta
2627      P:019D 5E3CF8  [2 -      798]            mpy     y1,x1,b                 a,y:N5_TB     ; b = damping * BR_PREV   a -> TR_CURR
2628      P:019E 44DBAB  [2 -      800]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2629   
2630                                     ;  JUNCTION N5 - N6
2631      P:019F 47BFD0  [2 -      802]            mpy     x0,y0,a   x:N6_BA,y1                  ; a = coeff * TL_PREV
2632      P:01A0 5F3BC7  [2 -      804]            macr    -x0,y1,a                b,y:N4_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2633      P:01A1 21C4E0  [2 -      806]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2634      P:01A2 46BEA3  [2 -      808]            macr    x0,x1,a   x:N6_TA,y0                  ; a += damping * delta
2635      P:01A3 5E3EF8  [2 -      810]            mpy     y1,x1,b                 a,y:N6_TB     ; b = damping * BR_PREV   a -> TR_CURR
2636      P:01A4 44DBAB  [2 -      812]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2637      P:01A5 5F3D00  [2 -      814]            move                            b,y:N5_BB     ; b -> BL_CURR
2638   
2639                                     ;  NOSE REFLECTION
2640      P:01A6 4490D9  [2 -      816]            mpyr    y0,x0,b   x:nfa10,x0                  ; b = TL_PREV * coeff    fa10 -> x0
2641      P:01A7 17B000  [4 -      820]            move              b,y1          x:nfb11,x1    ; scaled input -> y1     fb11 -> x1
                 000011
2642      P:01A9 47BFC0  [2 -      822]            mpy     x0,y1,a   x:N6_BA,y1                  ; a = fa10 * input       y[n-1] -> y1
2643      P:01AA 44DBF7  [2 -      824]            macr    -x1,y1,a  x:(r3)+,x0                  ; a -= fb11 * y[n-1]     radCoeff -> x0
2644      P:01AB 5E3F00  [2 -      826]            move                            a,y:N6_BB     ; a -> BL_CURR
2645   
2646                                     ;  NOSE RADIATION (INPUT IN y0, OUTPUT STORED IN y:nRadiationY)
2647      P:01AC 4492D1  [2 -      828]            mpyr    x0,y0,a   x:nfa20,x0                  ; a = TL_PREV * coeff   fa20 -> x0
2648      P:01AD 14B000  [4 -      832]            move              a,y0          x:nfa21,x1    ; scaled input -> y0    fa21 -> x1
                 000013
2649      P:01AF 4F8BD0  [2 -      834]            mpy     x0,y0,a                 y:nRadiationX,y1 ; a = fa20 * input      x[n-1] -> y1
2650      P:01B0 4594F2  [2 -      836]            mac     x1,y1,a   x:nfb21,x1                  ; a += fa21 * x[n-1]    fb21 -> x1
2651      P:01B1 4F8C00  [2 -      838]            move                            y:nRadiationY,y1 ; y[n-1] -> y1
2652      P:01B2 4E0BF7  [2 -      840]            macr    -x1,y1,a                y0,y:nRadiationX ; a -= fb21 * y[n-1]    store x[n]
2653      P:01B3 5E0C00  [2 -      842]            move                            a,y:nRadiationY ; store y[n]
2654   
2655   
2656                                     ;  THE TWO BRANCHES JOIN HERE
2657                                     ;  ADD NOSE AND MOUTH OUTPUT TOGETHER (y:nRadiation in a)
2658      P:01B4 4D8A00  [2 -      844]  _endVT    move                            y:mRadiationY,x1
2659      P:01B5 469960  [2 -      846]            add     x1,a      x:vtScale,y0                ; output is about 8 bits softer
2660   
2661   
2662   
2663                                     ;***************************************************************************************
2664                                     ;  ROUTINE:     throat
2665                                     ;
2666                                     ;  Synthesizes the effect of transmission of the glottal pulse through the membranes
2667                                     ;  of the throat and mouth, using a low pass filter and gain control.
2668                                     ;
2669                                     ;  Input:       x:x_ngs_signal, y0 (vtScale)
2670                                     ;  Output:      b
2671                                     ;
2672                                     ;  a (vocalTract signal) not used
2673                                     ;***************************************************************************************
2674   
2675      P:01B6 448100  [2 -      848]            move              x:x_ngs_signal,x0           ; noisy glottal source -> x0
2676      P:01B7 4D8ED8  [2 -      850]            mpy     x0,y0,b                 y:throatY,x1  ; scaled input -> b    y[n-1] -> x1
2677      P:01B8 18F000  [4 -      854]            move              b,x0          y:ta0,y0      ; input -> x0         ta0 -> y0
                 000052
2678      P:01BA 4E8DD8  [2 -      856]            mpy     x0,y0,b                 y:tb1,y0      ; b = input * ta0      tb1 -> y0
2679      P:01BB 4E8FEB  [2 -      858]            macr    x1,y0,b                 y:throatGain,y0 ; b += y[n-1] * tb1    gain -> y0
2680      P:01BC 21E400  [2 -      860]            move              b,x0                        ; b -> x0
2681      P:01BD 5F0ED9  [2 -      862]            mpyr    x0,y0,b                 b,y:throatY   ; b = output * gain    store y[n]
2682   
2683   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 34



2684   
2685                                     ;***************************************************************************************
2686                                     ;  ROUTINE:     sum_throat_vt
2687                                     ;
2688                                     ;  Sums the signals from the throat and vocal tract, and shifts this left to boost the
2689                                     ;  weak signal.  For SSI output, the signal is shifted left 11 bits, 3 to boost the
2690                                     ;  low amplitude signal, and 8 to move the sample into the upper 16 bits of the word.
2691                                     ;  In all other cases, the signal is shifted left 3 bits to boost the weak signal.
2692                                     ;
2693                                     ;  Input:       a (vocal tract signal), b (throat signal)
2694                                     ;  Output:      a0 (summed & shifted signal), x0 (SRC emptyPtr)
2695                                     ;***************************************************************************************
2696   
2697      P:01BE 4F9110  [2 -      864]            add     b,a                     y:left_shift,y1 ; sum throat signal & vt signal, and
2698      P:01BF 21C500  [2 -      866]            move              a,x1                        ; get shift constant
2699      P:01C0 22E4F0  [2 -      868]            mpy     x1,y1,a   r7,x0                       ; shift output signal  SRC emptyPtr->x0
2700   
2701   
2702   
2703                                     ;***************************************************************************************
2704                                     ;  ROUTINE:     dataFill
2705                                     ;
2706                                     ;  Fills the sample rate conversion (SRC) buffer with the input value.  The buffer is
2707                                     ;  emptied (and thus the samples converted to the new sample rate) when full.
2708                                     ;
2709                                     ;  Input:       a0 (input sample), x0 (SRC emptyPtr: r7)
2710                                     ;  Output:      x:(r5)
2711                                     ;***************************************************************************************
2712   
2713      P:01C1 505D00  [2 -      870]            move              a0,x:(r5)+
2714      P:01C2 22AF00  [2 -      872]            move              r5,b
2715      P:01C3 20004D  [2 -      874]            cmp     x0,b
2716      P:01C4 0BF0AA  [6 -      880]            jseq    dataEmpty
                 00429C
2717   
2718   
2719   
2720                                     ;***************************************************************************************
2721                                     ;  ROUTINE:     radiiInterpolation
2722                                     ;
2723                                     ;  Interpolates the scattering coefficient values using linear interpolation.
2724                                     ;
2725                                     ;  Input:       none
2726                                     ;  Output:      none
2727                                     ;***************************************************************************************
2728   
2729                                               IF      INTERP_RADII
2730      P:01C6 639A00  [2 -      882]            move              x:coeff_mem,r3
2731      P:01C7 6C9B00  [2 -      884]            move                            y:delta_mem,r4
2732      P:01C8 000000  [2 -      886]            nop
2733   
2734      P:01C9 F89B00  [2 -      888]            move              x:(r3)+,a     y:(r4)+,y0
2735      P:01CA FD9350  [2 -      890]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2736      P:01CB 565B78  [2 -      892]            add     y1,b      a,x:(r3)+
2737      P:01CC 575B00  [2 -      894]            move              b,x:(r3)+
2738   
2739      P:01CD F89B00  [2 -      896]            move              x:(r3)+,a     y:(r4)+,y0
2740      P:01CE FD9350  [2 -      898]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2741      P:01CF 565B78  [2 -      900]            add     y1,b      a,x:(r3)+
2742      P:01D0 575B00  [2 -      902]            move              b,x:(r3)+
2743   
2744      P:01D1 F89B00  [2 -      904]            move              x:(r3)+,a     y:(r4)+,y0
2745      P:01D2 FD9350  [2 -      906]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2746      P:01D3 565B78  [2 -      908]            add     y1,b      a,x:(r3)+
2747      P:01D4 575B00  [2 -      910]            move              b,x:(r3)+
2748   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 35



2749      P:01D5 F89B00  [2 -      912]            move              x:(r3)+,a     y:(r4)+,y0
2750      P:01D6 FD9350  [2 -      914]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2751      P:01D7 565B78  [2 -      916]            add     y1,b      a,x:(r3)+
2752      P:01D8 575B00  [2 -      918]            move              b,x:(r3)+
2753   
2754      P:01D9 F89B00  [2 -      920]            move              x:(r3)+,a     y:(r4)+,y0
2755      P:01DA FD9350  [2 -      922]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2756      P:01DB 565B78  [2 -      924]            add     y1,b      a,x:(r3)+
2757      P:01DC 575B00  [2 -      926]            move              b,x:(r3)+
2758   
2759      P:01DD F89B00  [2 -      928]            move              x:(r3)+,a     y:(r4)+,y0
2760      P:01DE FD9350  [2 -      930]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2761      P:01DF 565B78  [2 -      932]            add     y1,b      a,x:(r3)+
2762      P:01E0 575B00  [2 -      934]            move              b,x:(r3)+
2763   
2764      P:01E1 F88300  [2 -      936]            move              x:(r3),a      y:(r4)+,y0
2765      P:01E2 200050  [2 -      938]            add     y0,a
2766      P:01E3 565B00  [2 -      940]            move              a,x:(r3)+
2767                                               ENDIF
2768   
2769      P:01E4 0C003C  [4 -      944]            jmp     _top                                  ; loop forever
2770   
2771   
2772   
2773                                     ;***************************************************************************************
2774                                     ;  SUBROUTINE:  write_DMA_buffer
2775                                     ;
2776                                     ;  Writes one complete DMA output buffer to the host, using the NeXT specified DMA
2777                                     ;  protocol.
2778                                     ;
2779                                     ;  Input:       none
2780                                     ;  Output:      none
2781                                     ;***************************************************************************************
2782   
2783                                     write_DMA_buffer
2784                                               IF      SSI_OUTPUT
2801                                               ELSE
2802                                               IF      SYNC_DMA
2803      P:01E5 0A0000  [4 -      948]            bclr    #DMA_OUT_DONE,x:x_STATUS_flags        ; clear dma-out done flag
2804                                               writeHost #DMA_OUT_REQ                        ; request host for dma-out
2805  +   P:01E6 0AA981  [6 -      954]            jclr    #m_htde,x:m_hsr,*
                 0001E6
2806  +   P:01E8 08F4AB  [4 -      958]            movep             #DMA_OUT_REQ,x:m_htx
                 050001
2807   
2808      P:01EA 0AA984  [6 -      964]            jclr    #m_hf1,x:m_hsr,*                      ; loop until host acknowledges (HF1=1)
                 0001EA
2809   
2810      P:01EC 060084  [6 -      970]            do      #DMA_OUT_SIZE,_send_loop              ; top of DMA buffer send loop
                 0001F0
2811      P:01EE 0AA981  [6 -      976]            jclr    #m_htde,x:m_hsr,*                     ; loop until htde bit of HSR is set
                 0001EE
2812      P:01F0 08DEEB  [4 -      980]            movep             y:(r6)+,x:m_htx             ; send buffer element to host
2813                                     _send_loop
2814      P:01F1 0A00A0  [6 -      986]            jset    #DMA_OUT_DONE,x:x_STATUS_flags,_endDMA ; if interrupt has set flags,
                 0001F8
2815      P:01F3 0AA981  [6 -      992]            jclr    #m_htde,x:m_hsr,_send_loop            ; then go to end;  else keep
                 0001F1
2816      P:01F5 08F4AB  [4 -      996]            movep             #0,x:m_htx                  ; sending 0s until interrupt sets flags
                 000000
2817      P:01F7 0C01F1  [4 -     1000]            jmp     _send_loop
2818                                     _endDMA
2819   
2820      P:01F8 0AA9A4  [6 -     1006]            jset    #m_hf1,x:m_hsr,*                      ; loop until host ack. has ended (HF1=0)
                 0001F8
2821   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 36



2822      P:01FA 00000C  [4 -     1010]            rts
2823   
2824   
2825                                               ELSE
2840                                               ENDIF
2841                                               ENDIF
2842   
2843   
2844   
2845                                               IF      *>512
2847                                               ENDIF
2848   
2849   
2850   
2851      P:4000                                   org     p:OFF_CHIP_PROGRAM_START
2852   
2853   
2854                                     ;***************************************************************************************
2855                                     ;  SUBROUTINE:  reset
2856                                     ;
2857                                     ;  Resets the dsp chip, and initializes variables and registers.
2858                                     ;***************************************************************************************
2859   
2860                                     ;  DISABLE HOST COMMANDS AND INTERRUPTS
2861      P:4000 0AA802  [4 -     1014]  reset     bclr    #m_hcie,x:m_hcr                       ; disable host command interrupts
2862      P:4001 0AA800  [4 -     1018]            bclr    #m_hrie,x:m_hcr                       ; disable host receive interrupt
2863                                                                                             ; (no interrupts while setting up)
2864                                     ;  SET UP CHIP
2865      P:4002 0506BA  [2 -     1020]            movec             #6,omr                      ; chip set to mode 2; ROM enabled
2866      P:4003 0AA020  [4 -     1024]            bset    #0,x:m_pbc                            ; set port B to be host interface
2867      P:4004 0AA323  [4 -     1028]            bset    #3,x:m_pcddr                          ; set pin 3 (pc3) of port C to be output
2868      P:4005 0AA503  [4 -     1032]            bclr    #3,x:m_pcd                            ; zero to enable the external ram
2869                                               IF      BLACK
2871                                               ENDIF
2872                                               IF      MSOUND
2873      P:4006 08F4BE  [4 -     1036]            movep             #>$003330,x:m_bcr           ; set 3 wait states for all external RAM
                 003330
2874                                                                                             ; (but not peripheral IO)
2875      P:4008 0A8460  [4 -     1040]            bset    #bRAMWRITEen,y:yrRAMWRITELOW          ; set write enable on external RAM
2876                                               ENDIF
2877   
2878                                               IF      SSI_OUTPUT
2881                                               ELSE
2882      P:4009 08F4BF  [4 -     1044]            movep             #>$000c00,x:m_ipr           ; set interrupt priority register to
                 000C00
2883                                                                                             ; SSI=0, SCI=0, HOST=2
2884                                               ENDIF
2885   
2886                                               IF      SSI_OUTPUT
2897                                               ENDIF
2898   
2899   
2900                                     ;  MOVE BETA TABLE FROM LOW MEMORY (FILLED BY LOADER) TO HIGH MEMORY
2901      P:400B 63F400  [4 -     1048]            move              #>temp_betaTable,r3         ; set register to base of temporary memory
                 0000C0
2902      P:400D 64F400  [4 -     1052]            move              #>l_betaTable,r4            ; set register to base of betaTable memory
                 0043C0
2903      P:400F 064080  [6 -     1058]            do      #64,_move                             ; transfer the table
                 004012
2904      P:4011 5EDB00  [2 -     1060]            move                            y:(r3)+,a
2905      P:4012 565C00  [2 -     1062]            move              a,x:(r4)+
2906                                     _move
2907   
2908                                     ;  ON MSOUND, CREATE A DUPLICATE SINE WAVE TABLE IN HIGH X MEMORY 
2909                                               IF      MSOUND
2910      P:4013 63F400  [4 -     1066]            move              #>sine_wave_table,r3        ; set register to base of ROM sine table
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 37



                 000100
2911      P:4015 64F400  [4 -     1070]            move              #>dsine_wave_table,r4       ; set register to base external sine table
                 005400
2912      P:4017 060081  [6 -     1076]            do      #SINE_TABLE_SIZE,_move2               ; transfer the table
                 00401A
2913      P:4019 5EDB00  [2 -     1078]            move                            y:(r3)+,a
2914      P:401A 565C00  [2 -     1080]            move              a,x:(r4)+
2915                                     _move2
2916                                               ENDIF
2917   
2918                                     ;  SET UP VARIABLES
2919      P:401B 200013  [2 -     1082]            clr     a
2920      P:401C 401F00  [2 -     1084]            move              a10,l:l_currentPhase        ; set current phase angle to 1; fix this later
2921      P:401D 560000  [2 -     1086]            move              a,x:x_STATUS_flags          ; clear status flags
2922   
2923                                     ;  CLEAR BANDPASS FILTER MEMORY
2924      P:401E 5E0500  [2 -     1088]            move                            a,y:y_bp_xn1  ; clear bandpass filter x and y memory
2925      P:401F 5E0600  [2 -     1090]            move                            a,y:y_bp_xn2
2926      P:4020 5E0700  [2 -     1092]            move                            a,y:y_bp_yn1
2927      P:4021 5E0800  [2 -     1094]            move                            a,y:y_bp_yn2
2928   
2929                                     ;  CLEAR TUBE MEMORY
2930      P:4022 64F400  [4 -     1098]            move              #>$0020,r4
                 000020
2931      P:4024 062080  [6 -     1104]            do      #32,_endloopb
                 004026
2932      P:4026 405C00  [2 -     1106]            move              a10,l:(r4)+
2933                                     _endloopb
2934   
2935                                     ;  CLEAR MOUTH RADIATION FILTER MEMORY
2936      P:4027 5E0900  [2 -     1108]            move                            a,y:mRadiationX
2937      P:4028 5E0A00  [2 -     1110]            move                            a,y:mRadiationY
2938   
2939                                     ;  CLEAR NOSE RADIATION FILTER MEMORY
2940      P:4029 5E0B00  [2 -     1112]            move                            a,y:nRadiationX
2941      P:402A 5E0C00  [2 -     1114]            move                            a,y:nRadiationY
2942   
2943                                     ;  CLEAR THROAT LP FILTER MEMORY
2944      P:402B 5E0E00  [2 -     1116]            move                            a,y:throatY
2945   
2946                                     ;  CLEAR SAMPLE RATE CONVERSION BUFFER
2947      P:402C 64F400  [4 -     1120]            move              #>src_buffer_base,r4
                 005200
2948      P:402E 060082  [6 -     1126]            do      #SRC_BUFFER_SIZE,_endloop2
                 004030
2949      P:4030 565C00  [2 -     1128]            move              a,x:(r4)+
2950                                     _endloop2
2951   
2952                                     ;  SET UP DMA INPUT BUFFER VARIABLES
2953      P:4031 567000  [4 -     1132]            move              a,x:x_tableCount
                 00005D
2954   
2955                                     ;  SET UP THE CONTROL-RATE COUNT
2956      P:4033 5E1000  [2 -     1134]            move                            a,y:cr_count
2957   
2958                                     ;  SET UP OSCILLATOR AMPLITUDE, READY FOR INTERPOLATION
2959      P:4034 5E0200  [2 -     1136]            move                            a,y:OSC_AMP   ; set oscil ampl to 0 (ready for interpolation)
2960   
2961                                     ;  SET UP SCATTERING COEFFICIENT VARIABLES, READY FOR INTERPOLATION
2962                                               IF      INTERP_RADII
2963      P:4035 649A00  [2 -     1138]            move              x:coeff_mem,r4
2964      P:4036 060D80  [6 -     1144]            do      #13,_endloop3                         ; clear the control-rate coefficient 
                 004038
2965      P:4038 565C00  [2 -     1146]            move              a,x:(r4)+                   ; memory first
2966                                     _endloop3
2967   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 38



2968      P:4039 2F4000  [2 -     1148]            move              #@cvf(0.5),b                ; some coefficients are not set to 0.0
2969      P:403A 577000  [4 -     1152]            move              b,x:ALPHA_L
                 000043
2970      P:403C 577000  [4 -     1156]            move              b,x:ALPHA_R
                 000044
2971      P:403E 57F400  [4 -     1160]            move              #@cvf(-0.871260),b
                 907A8D
2972      P:4040 577000  [4 -     1164]            move              b,x:OPC_REFL
                 00004A
2973      P:4042 57F400  [4 -     1168]            move              #@cvf(0.128740),b
                 107A8D
2974      P:4044 577000  [4 -     1172]            move              b,x:OPC_RAD
                 00004B
2975      P:4046 2F8000  [2 -     1174]            move              #@cvf(-1.0),b
2976      P:4047 577000  [4 -     1178]            move              b,x:NC_1
                 00004C
2977                                               ENDIF
2978   
2979                                     ;  SET UP REGISTERS
2980                                               IF      MSOUND
2981      P:4049 60F400  [4 -     1182]            move              #>dsine_wave_table,r0       ; set register to base of waveform table
                 005400
2982                                               ELSE
2984                                               ENDIF
2985      P:404B 44F400  [4 -     1186]            move              #>SINE_TABLE_SIZE-1,x0
                 0000FF
2986      P:404D 440600  [2 -     1188]            move              x0,x:x_tableMod             ; set mask to tablesize - 1
2987      P:404E 04C4A0  [2 -     1190]            move              x0,m0                       ; set modulus for waveform table
2988   
2989                                               IF      SSI_OUTPUT
2999                                               ELSE
3000                                               IF      SYNC_DMA
3001      P:404F 56F400  [4 -     1194]            move              #>dma_out_buffer,a          ; store base of dma buffer
                 004000
3002      P:4051 561500  [2 -     1196]            move              a,x:dma_fill_base
3003      P:4052 21D600  [2 -     1198]            move              a,r6
3004      P:4053 05F426  [4 -     1202]            move              #>DMA_OUT_SIZE-1,m6         ; set modulus for dma buffer
                 0003FF
3005   
3006                                               ELSE
3016                                               ENDIF
3017                                               ENDIF
3018   
3019                                               IF      OVERSAMPLE_OSC
3020      P:4055 63F400  [4 -     1206]            move              #>l_FIR_base,r3             ; set register to base of FIR filter memory
                 0000C0
3021      P:4057 630400  [2 -     1208]            move              r3,x:FIR_x_ptr
3022      P:4058 64F400  [4 -     1212]            move              #>l_FIR_base,r4             ; set register to base of FIR filter memory
                 0000C0
3023      P:405A 640500  [2 -     1214]            move              r4,x:FIR_y_ptr              ; modulus set when coefficients loaded (HC)
3024                                               ENDIF
3025   
3026      P:405B 05F421  [4 -     1218]            move              #>SRC_BUFFER_SIZE-1,m1      ; set moduli for srate conversion buffer
                 0001FF
3027      P:405D 05F427  [4 -     1222]            move              #>SRC_BUFFER_SIZE-1,m7
                 0001FF
3028      P:405F 05F425  [4 -     1226]            move              #>SRC_BUFFER_SIZE-1,m5
                 0001FF
3029   
3030      P:4061 75F400  [4 -     1230]            move              #>PADSIZE,n5                ; set n5 to padsize
                 00001A
3031   
3032      P:4063 65F400  [4 -     1234]            move              #>src_buffer_base,r5        ; emptyPtr = src_buffer_base
                 005200
3033      P:4065 67F400  [4 -     1238]            move              #>src_buffer_base,r7
                 005200
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 39



3034   
3035      P:4067 204D00  [2 -     1240]            move              (r5)+n5                     ; fillPtr = src_buffer_base + padsize
3036   
3037      P:4068 73F400  [4 -     1244]            move              #>L_RANGE,n3                ; set filter increments
                 000040
3038      P:406A 74F400  [4 -     1248]            move              #>L_RANGE,n4
                 000040
3039   
3040   
3041                                     ;  INITIALIZE INPUT SCALE FOR THE VOCAL TRACT
3042      P:406C 2E0400  [2 -     1250]            move              #VT_SCALE,a
3043      P:406D 561900  [2 -     1252]            move              a,x:vtScale
3044   
3045                                     ;  INITIALIZE TIME REGISTER
3046      P:406E 54F400  [4 -     1256]            move              #>L_RANGE,a1
                 000040
3047      P:4070 481C00  [2 -     1258]            move              a,l:l_timeReg
3048   
3049   
3050                                     ;  UNMASK INTERRUPTS
3051      P:4071 0AA822  [4 -     1262]            bset    #m_hcie,x:m_hcr                       ; enable host command interrupts
3052      P:4072 0500B9  [2 -     1264]            move              #0,sr                       ; unmask interrupts
3053   
3054                                     ;  JUMP TO MAIN LOOP
3055      P:4073 0C003A  [4 -     1268]            jmp     main
3056   
3057   
3058   
3059                                     ;***************************************************************************************
3060                                     ;  HOST COMMAND SERVICE ROUTINE:  stop_synth
3061                                     ;
3062                                     ;  Clears the running status flag, and if doing SSI output to DAC, turns off the SSI
3063                                     ;  transmit interrupt and sends some zeros to avoid clicking on next reset.
3064                                     ;
3065                                     ;  Input:       none
3066                                     ;  Output:      none
3067                                     ;***************************************************************************************
3068   
3069                                     stop_synth
3070      P:4074 0A0003  [4 -     1272]            bclr    #RUN_STATUS,x:x_STATUS_flags          ; clear the running status flag
3071   
3072                                               IF      SSI_OUTPUT
3094                                               ENDIF
3095   
3096      P:4075 000004  [4 -     1276]            rti
3097   
3098   
3099   
3100                                               IF      SSI_OUTPUT
3115                                               ENDIF
3116   
3117   
3118   
3119                                     ;***************************************************************************************
3120                                     ;  INTERRUPT SERVICE ROUTINE:  dma_in_accepted
3121                                     ;
3122                                     ;  Sets the status flag when the host is ready to send the samples.  It reads an
3123                                     ;  integer, which is not used.
3124                                     ;
3125                                     ;  Input:       none
3126                                     ;  Output:      none
3127                                     ;***************************************************************************************
3128   
3129                                     dma_in_accepted
3130                                               readHost x:x_temp                             ; The host sends a integer.
3131  +   P:4076 0AA980  [6 -     1282]            jclr    #m_hrdf,x:m_hsr,*
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 40



                 004076
3132  +   P:4078 0870AB  [6 -     1288]            movep             x:m_hrx,x:x_temp
                 00005C
3133      P:407A 0A0022  [4 -     1292]            bset    #DMA_IN_ACCEPTED,x:x_STATUS_flags     ; But we don't really need it.
3134      P:407B 000004  [4 -     1296]            rti
3135   
3136   
3137   
3138                                     ;***************************************************************************************
3139                                     ;  SUBROUTINE:  update_datatable 
3140                                     ;
3141                                     ;  Loads a new DMA input buffer, if necessary, and copies data from the dma input
3142                                     ;  buffer to the control-rate parameter datatable.  Conversions of this data are
3143                                     ;  also performed.
3144                                     ;
3145                                     ;  Input:       none
3146                                     ;  Output:      x1 (1), b (CONTROL PERIOD)
3147                                     ;***************************************************************************************
3148   
3149                                     update_datatable
3150   
3151                                     ;  CHECK TABLE COUNT, AND READ NEW DMA BUFFER IF NEEDED
3152      P:407C 57F013  [4 -     1300]            clr     a         x:x_tableCount,b
                 00005D
3153      P:407E 64F00D  [4 -     1304]            cmp     a,b       x:readPtr,r4                ; set r4 to readPtr of DMA input buffer
                 00005E
3154      P:4080 0AF0A2  [6 -     1310]            jne     _continue                             ; if table_count != 0 then continue
                 00408A
3155      P:4082 0BF080  [6 -     1316]            jsr     read_DMA_buffer                       ; else, read in new DMA buffer
                 0040E7
3156      P:4084 57F400  [4 -     1320]            move              #>TABLES_PER_DMA,b          ; reinitialize table_count
                 000040
3157      P:4086 64F400  [4 -     1324]            move              #>dma_in_buffer,r4          ; and reset pointer to start of buffer
                 005800
3158      P:4088 647000  [4 -     1328]            move              r4,x:readPtr
                 00005E
3159                                     _continue
3160   
3161                                     ;  DECREMENT TABLE COUNT
3162      P:408A 4D9400  [2 -     1330]            move                            y:y_one,x1    ; b preserved from above
3163      P:408B 20006C  [2 -     1332]            sub     x1,b
3164      P:408C 577000  [4 -     1336]            move              b,x:x_tableCount            ; table_count -= 1
                 00005D
3165   
3166   
3167                                     ;  TRANSFER DATA FROM INPUT DMA BUFFER TO CR PARAMETER DATA TABLE
3168                                     ;  CONCATENATE PHASE INCREMENT INTEGER AND FRACTIONAL PARTS
3169      P:408E 46DC13  [2 -     1338]            clr     a         x:(r4)+,y0                  ; integer part of incr -> y0
3170      P:408F 50DC00  [2 -     1340]            move              x:(r4)+,a0                  ; fractional part of incr -> a0
3171      P:4090 200032  [2 -     1342]            asl     a                                     ; get rid of sign bit, left justify
3172      P:4091 20CC00  [2 -     1344]            move              y0,a1                       ; concatenate integer part of increment
3173      P:4092 401E00  [2 -     1346]            move              a10,l:l_phaseInc            ; store phase angle increment
3174   
3175                                     ;  CONVERT GS VOLUME TO AMPLITUDE, UPDATE WAVETABLE, & UPDATE CROSSMIX VARIABLES
3176      P:4093 46DC00  [2 -     1348]            move              x:(r4)+,y0                  ; OSC_VOL -> y0
3177      P:4094 0BF080  [6 -     1354]            jsr     convert_to_amp
                 0041AD
3178      P:4096 21E400  [2 -     1356]            move              b,x0
3179      P:4097 4DF000  [4 -     1360]            move                            y:CONTROL_FACTOR,x1
                 000050
3180      P:4099 4E82A0  [2 -     1362]            mpy     x1,x0,a                 y:OSC_AMP,y0
3181      P:409A 2000E7  [2 -     1364]            macr    -x1,y0,a
3182      P:409B 5E0300  [2 -     1366]            move                            a,y:OSC_AMP_DELTA
3183   
3184                                               IF      VARIABLE_GP
3185                                               IF      RECALC_GP
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 41



3187                                               ENDIF
3188                                               ENDIF
3189   
3190                                               IF      FIXED_CROSSMIX
3195                                               ELSE
3196      P:409C 4E8200  [2 -     1368]            move                            y:OSC_AMP,y0  ; current amplitude -> y0
3197      P:409D 4DF000  [4 -     1372]            move                            y:CROSSMIX_FACTOR,x1 ; crossmix factor -> x1
                 00004A
3198      P:409F 46F4E8  [4 -     1376]            mpy     x1,y0,b   #>@cvi(@pow(2,CROSSMIX_SCALE-1)),y0 ; b = amp * mix_factor
                 000010
3199      P:40A1 21E513  [2 -     1378]            clr     a         b,x1
3200      P:40A2 5895E8  [2 -     1380]            mpy     x1,y0,b                 y:y_unity,a0  ; b *= 32 (scaled by 1/32 in host)
3201      P:40A3 21260D  [2 -     1382]            cmp     a,b       b0,y0                       ; (output is in b0)
3202      P:40A4 0AF0AF  [6 -     1388]            jle     _next
                 0040A7
3203      P:40A6 210600  [2 -     1390]            move              a0,y0                       ; y0 = min(product, 1.0)
3204      P:40A7 5E9500  [2 -     1392]  _next     move                            y:y_unity,a
3205      P:40A8 4E1954  [2 -     1394]            sub     y0,a                    y0,y:crossmix
3206      P:40A9 5E1A00  [2 -     1396]            move                            a,y:anti_crossmix
3207                                               ENDIF
3208   
3209   
3210                                     ;  CONVERT ASPIRATION VOLUME TO AMPLITUDE
3211      P:40AA 46DC00  [2 -     1398]            move              x:(r4)+,y0                  ; ASP_VOL -> y0
3212      P:40AB 0BF080  [6 -     1404]            jsr     convert_to_amp
                 0041AD
3213      P:40AD 5F7000  [4 -     1408]            move                            b,y:ASP_AMP
                 000051
3214   
3215                                     ;  CALCULATE FRICATION TAPS FROM FRICATION VOLUME AND POSITION
3216      P:40AF 46DC00  [2 -     1410]            move              x:(r4)+,y0                  ; FRICATION_VOL -> y0
3217      P:40B0 0BF080  [6 -     1416]            jsr     convert_to_amp                        ; output in b
                 0041AD
3218      P:40B2 44DC00  [2 -     1418]            move              x:(r4)+,x0                  ; FRICATION_POS -> x0
3219      P:40B3 0BF080  [6 -     1424]            jsr     setFricationTaps                      ; set frication taps according to fr. position
                 004277
3220   
3221                                     ;  CALCULATE BANDPASS FILTER COEFFICIENTS FROM CENTER FREQUENCY & BANDWIDTH
3222      P:40B5 44DC00  [2 -     1426]            move              x:(r4)+,x0                  ; BANDPASS_CF -> x0
3223      P:40B6 46DC00  [2 -     1428]            move              x:(r4)+,y0                  ; BANDPASS_BW -> Y0
3224      P:40B7 0BF080  [6 -     1434]            jsr     bpConvert                             ; convert bandpass bw & cf into coefficients
                 0041DC
3225   
3226                                     ;  REST OF TABLE CONSISTS OF COEFFICIENTS, WHICH ARE USED DIRECTLY  */
3227                                               IF      !INTERP_RADII
3234                                               ELSE
3235      P:40B9 639A00  [2 -     1436]            move              x:coeff_mem,r3
3236      P:40BA 657000  [4 -     1440]            move              r5,x:x_r5_save
                 000057
3237      P:40BC 6D9B00  [2 -     1442]            move                            y:delta_mem,r5
3238      P:40BD 4DF000  [4 -     1446]            move                            y:CONTROL_FACTOR,x1
                 000050
3239   
3240      P:40BF 46DC00  [2 -     1448]            move              x:(r4)+,y0
3241      P:40C0 44DBE8  [2 -     1450]            mpy     x1,y0,b   x:(r3)+,x0
3242      P:40C1 46DCAF  [2 -     1452]            macr    -x1,x0,b  x:(r4)+,y0
3243   
3244      P:40C2 B3BBE8  [2 -     1454]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3245      P:40C3 46DCAF  [2 -     1456]            macr    -x1,x0,b  x:(r4)+,y0
3246   
3247      P:40C4 B3BBE8  [2 -     1458]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3248      P:40C5 46DCAF  [2 -     1460]            macr    -x1,x0,b  x:(r4)+,y0
3249   
3250      P:40C6 B3BBE8  [2 -     1462]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3251      P:40C7 46DCAF  [2 -     1464]            macr    -x1,x0,b  x:(r4)+,y0
3252   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 42



3253      P:40C8 B3BBE8  [2 -     1466]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3254      P:40C9 46DCAF  [2 -     1468]            macr    -x1,x0,b  x:(r4)+,y0
3255   
3256      P:40CA B3BBE8  [2 -     1470]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3257      P:40CB 46DCAF  [2 -     1472]            macr    -x1,x0,b  x:(r4)+,y0
3258   
3259      P:40CC B3BBE8  [2 -     1474]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3260      P:40CD 46DCAF  [2 -     1476]            macr    -x1,x0,b  x:(r4)+,y0
3261   
3262      P:40CE B3BBE8  [2 -     1478]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3263      P:40CF 46DCAF  [2 -     1480]            macr    -x1,x0,b  x:(r4)+,y0
3264   
3265      P:40D0 B3BBE8  [2 -     1482]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3266      P:40D1 46DCAF  [2 -     1484]            macr    -x1,x0,b  x:(r4)+,y0
3267   
3268      P:40D2 B3BBE8  [2 -     1486]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3269      P:40D3 46DCAF  [2 -     1488]            macr    -x1,x0,b  x:(r4)+,y0
3270   
3271      P:40D4 B3BBE8  [2 -     1490]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3272      P:40D5 46DCAF  [2 -     1492]            macr    -x1,x0,b  x:(r4)+,y0
3273   
3274      P:40D6 B3BBE8  [2 -     1494]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3275      P:40D7 46DCAF  [2 -     1496]            macr    -x1,x0,b  x:(r4)+,y0
3276   
3277      P:40D8 B3BBE8  [2 -     1498]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3278      P:40D9 2000AF  [2 -     1500]            macr    -x1,x0,b
3279      P:40DA 5F5D00  [2 -     1502]            move                            b,y:(r5)+
3280   
3281      P:40DB 65F000  [4 -     1506]            move              x:x_r5_save,r5
                 000057
3282                                               ENDIF
3283   
3284                                     ;  UPDATE READ POINTER TO NEXT TABLE IN DMA INPUT BUFFER
3285      P:40DD 57F400  [4 -     1510]            move              #>TABLE_SIZE,b
                 000020
3286      P:40DF 44F000  [4 -     1514]            move              x:readPtr,x0
                 00005E
3287      P:40E1 4D9448  [2 -     1516]            add     x0,b                    y:y_one,x1    ; 1 -> x1
3288      P:40E2 577000  [4 -     1520]            move              b,x:readPtr                 ; readPtr += TABLE_SIZE
                 00005E
3289      P:40E4 5FF000  [4 -     1524]            move                            y:CONTROL_PERIOD,b ; control period -> b
                 00004F
3290   
3291      P:40E6 00000C  [4 -     1528]            rts
3292   
3293   
3294   
3295                                     ;***************************************************************************************
3296                                     ;  SUBROUTINE:  read_DMA_buffer
3297                                     ;
3298                                     ;  Reads one complete DMA buffer from the host, and puts it in the dma input buffer.
3299                                     ;
3300                                     ;  Input:       none
3301                                     ;  Output:      none
3302                                     ;***************************************************************************************
3303   
3304                                     read_DMA_buffer
3305      P:40E7 0AA800  [4 -     1532]            bclr    #m_hrie,x:m_hcr                       ; Disable the host receive interrupt.
3306                                                                                             ; since the following values are samples...
3307   
3308      P:40E8 64F400  [4 -     1536]            move              #>dma_in_buffer,r4          ; set pointer to dma input buffer
                 005800
3309      P:40EA 0A0002  [4 -     1540]            bclr    #DMA_IN_ACCEPTED,x:x_STATUS_flags     ; clear accepted flag
3310      P:40EB 0A0001  [4 -     1544]            bclr    #DMA_IN_DONE,x:x_STATUS_flags         ; clear dma-in done flag
3311   
3312                                               writeHost #DMA_IN_REQ                         ; send dma-in request to host
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 43



3313  +   P:40EC 0AA981  [6 -     1550]            jclr    #m_htde,x:m_hsr,*
                 0040EC
3314  +   P:40EE 08F4AB  [4 -     1554]            movep             #DMA_IN_REQ,x:m_htx
                 040002
3315      P:40F0 0A0082  [6 -     1560]            jclr    #DMA_IN_ACCEPTED,x:x_STATUS_flags,*   ; loop until host ready
                 0040F0
3316   
3317   
3318                                               IF      BLACK
3336                                               ENDIF
3337   
3338                                               IF      MSOUND
3339      P:40F2 060088  [6 -     1566]            do      #DMA_IN_SIZE,_end_DMA_loop            ; loop until buffer filled
                 0040F6
3340      P:40F4 0AA980  [6 -     1572]            jclr    #m_hrdf,x:m_hsr,*                     ; wait until we can read
                 0040F4
3341      P:40F6 085CAB  [4 -     1576]            movep             x:m_hrx,x:(r4)+             ; put data into dma input buffer
3342                                     _end_DMA_loop
3343                                               ENDIF
3344   
3345   
3346      P:40F7 0AA980  [6 -     1582]            jclr    #m_hrdf,x:m_hsr,_then                 ; Continue reading incoming (junk) data...
                 0040FB
3347      P:40F9 44F000  [4 -     1586]            move              x:m_hrx,x0                  ; until dma-in complete signalled by host
                 00FFEB
3348                                     _then
3349      P:40FB 0A0081  [6 -     1592]            jclr    #DMA_IN_DONE,x:x_STATUS_flags,_end_DMA_loop
                 0040F7
3350   
3351      P:40FD 0AA820  [4 -     1596]            bset    #m_hrie,x:m_hcr                       ; Enable the host receive interrupt.
3352      P:40FE 00000C  [4 -     1600]            rts
3353   
3354   
3355   
3356                                     ;***************************************************************************************
3357                                     ;  HOST COMMAND SERVICE ROUTINE:  load_wavetable 
3358                                     ;
3359                                     ;  Loads in the wavetable from the host.
3360                                     ;
3361                                     ;  Input:       none
3362                                     ;  Output:      none
3363                                     ;***************************************************************************************
3364   
3365                                     load_wavetable
3366      P:40FF 0AA802  [4 -     1604]            bclr    #m_hcie,x:m_hcr                       ; disable host command interrupts
3367      P:4100 647000  [4 -     1608]            move              r4,x:x_r4_save              ; save the current value of r4
                 000056
3368      P:4102 64F400  [4 -     1612]            move              #gp_wave_table,r4           ; set r4 to gp wavetable base
                 004400
3369   
3370      P:4104 060081  [6 -     1618]            do      #GP_TABLE_SIZE,_end_loop
                 004108
3371                                               readHost x:(r4)+
3372  +   P:4106 0AA980  [6 -     1624]            jclr    #m_hrdf,x:m_hsr,*
                 004106
3373  +   P:4108 085CAB  [4 -     1628]            movep             x:m_hrx,x:(r4)+
3374                                     _end_loop
3375   
3376      P:4109 64F000  [4 -     1632]            move              x:x_r4_save,r4              ; restore the saved value of r4
                 000056
3377      P:410B 0AA822  [4 -     1636]            bset    #m_hcie,x:m_hcr                       ; enable host command interrupts
3378      P:410C 000004  [4 -     1640]            rti
3379   
3380   
3381   
3382                                     ;***************************************************************************************
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 44



3383                                     ;  HOST COMMAND SERVICE ROUTINE:  load_fir_coefficients
3384                                     ;
3385                                     ;  Loads in the table of FIR filter coefficients from the host.
3386                                     ;
3387                                     ;  Input:       none
3388                                     ;  Output:      none 
3389                                     ;***************************************************************************************
3390   
3391                                     load_fir_coefficients
3392      P:410D 0AA802  [4 -     1644]            bclr    #m_hcie,x:m_hcr                       ; disable host command interrupts
3393      P:410E 647000  [4 -     1648]            move              r4,x:x_r4_save              ; save the current value of r4
                 000056
3394      P:4110 407000  [4 -     1652]            move              a10,l:l_a_save              ; save the current value of a
                 0000BF
3395      P:4112 447000  [4 -     1656]            move              x0,x:x_x0_save              ; save the current value of x0
                 000054
3396   
3397                                               readHost a                                    ; read and store the tablesize
3398  +   P:4114 0AA980  [6 -     1662]            jclr    #m_hrdf,x:m_hsr,*
                 004114
3399  +   P:4116 084E2B  [4 -     1666]            movep             x:m_hrx,a
3400      P:4117 567000  [4 -     1670]            move              a,x:x_FIR_size
                 00005F
3401   
3402      P:4119 4C9400  [2 -     1672]            move                            y:y_one,x0    ; modulus = tablesize - 1
3403      P:411A 200044  [2 -     1674]            sub     x0,a
3404      P:411B 560300  [2 -     1676]            move              a,x:x_FIR_mod               ; store modulus (used in FIR routine)
3405   
3406      P:411C 64F400  [4 -     1680]            move              #>l_FIR_base,r4             ; set pointer to beginning of coefficient array
                 0000C0
3407      P:411E 56F000  [4 -     1684]            move              x:x_FIR_size,a
                 00005F
3408      P:4120 06CE00  [6 -     1690]            do      a,_end_loop
                 004124
3409                                               readHost y:(r4)+                              ; read and store each coefficient
3410  +   P:4122 0AA980  [6 -     1696]            jclr    #m_hrdf,x:m_hsr,*
                 004122
3411  +   P:4124 085CEB  [4 -     1700]            movep             x:m_hrx,y:(r4)+
3412                                     _end_loop
3413   
3414      P:4125 64F000  [4 -     1704]            move              x:x_r4_save,r4              ; restore the saved value of r4
                 000056
3415      P:4127 40F000  [4 -     1708]            move              l:l_a_save,a10              ; restore the saved value of a
                 0000BF
3416      P:4129 44F000  [4 -     1712]            move              x:x_x0_save,x0              ; restore the saved value of x0
                 000054
3417      P:412B 0AA822  [4 -     1716]            bset    #m_hcie,x:m_hcr                       ; enable host command interrupts
3418      P:412C 000004  [4 -     1720]            rti
3419   
3420   
3421   
3422                                     ;***************************************************************************************
3423                                     ;  HOST COMMAND SERVICE ROUTINE:  load_src_coefficients
3424                                     ;
3425                                     ;  Loads in both the table of sample rate conversion coefficients and the table of the
3426                                     ;  filter deltas from the host.
3427                                     ;
3428                                     ;  Input:       none
3429                                     ;  Output:      none
3430                                     ;***************************************************************************************
3431   
3432                                     load_src_coefficients
3433      P:412D 0AA802  [4 -     1724]            bclr    #m_hcie,x:m_hcr                       ; disable host command interrupts
3434      P:412E 647000  [4 -     1728]            move              r4,x:x_r4_save              ; save the current value of r4
                 000056
3435   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 45



3436      P:4130 649800  [2 -     1730]            move              x:fbase_addr,r4             ; set pointer to beginning of coefficient array
3437      P:4131 068086  [6 -     1736]            do      #FILTER_SIZE,_end_loop
                 004135
3438                                               readHost x:(r4)+                              ; read and store each coefficient
3439  +   P:4133 0AA980  [6 -     1742]            jclr    #m_hrdf,x:m_hsr,*
                 004133
3440  +   P:4135 085CAB  [4 -     1746]            movep             x:m_hrx,x:(r4)+
3441                                     _end_loop
3442   
3443      P:4136 64F400  [4 -     1750]            move              #>filter_d_base,r4          ; set pointer to beginning of delta array
                 004B80
3444      P:4138 068086  [6 -     1756]            do      #FILTER_SIZE,_end_loop2
                 00413C
3445                                               readHost x:(r4)+                              ; read and store each delta
3446  +   P:413A 0AA980  [6 -     1762]            jclr    #m_hrdf,x:m_hsr,*
                 00413A
3447  +   P:413C 085CAB  [4 -     1766]            movep             x:m_hrx,x:(r4)+
3448                                     _end_loop2
3449   
3450      P:413D 64F000  [4 -     1770]            move              x:x_r4_save,r4              ; restore the saved value of r4
                 000056
3451      P:413F 0AA822  [4 -     1774]            bset    #m_hcie,x:m_hcr                       ; enable host command interrupts
3452      P:4140 000004  [4 -     1778]            rti
3453   
3454   
3455   
3456                                     ;***************************************************************************************
3457                                     ;  HOST COMMAND SERVICE ROUTINE:  load_ur_parameters
3458                                     ;
3459                                     ;  Loads in the table of utterance-rate parameters from the host, and performs
3460                                     ;  necessary conversion of data.
3461                                     ;
3462                                     ;  Input:       none
3463                                     ;  Output:      none
3464                                     ;***************************************************************************************
3465   
3466                                     load_ur_parameters
3467      P:4141 0AA802  [4 -     1782]            bclr    #m_hcie,x:m_hcr                       ; disable host command interrupts
3468      P:4142 637000  [4 -     1786]            move              r3,x:x_r3_save              ; save the current value of r3
                 000055
3469   
3470   
3471                                     ;  LOAD IN COEFFICIENTS NC_2, NC_3, NC_4, NC_5, NC_REFL, NC_RAD
3472      P:4144 334D00  [2 -     1788]            move              #NC_2,r3                    ; set r3 to NC_2 memory
3473      P:4145 060680  [6 -     1794]            do      #6,_end_loop
                 004149
3474                                               readHost x:(r3)+
3475  +   P:4147 0AA980  [6 -     1800]            jclr    #m_hrdf,x:m_hsr,*
                 004147
3476  +   P:4149 085BAB  [4 -     1804]            movep             x:m_hrx,x:(r3)+
3477                                     _end_loop
3478   
3479                                     ;  READ IN MASTER VOLUME, AND CONVERT TO AMPLITUDE
3480                                               readHost y0
3481  +   P:414A 0AA980  [6 -     1810]            jclr    #m_hrdf,x:m_hsr,*
                 00414A
3482  +   P:414C 08462B  [4 -     1814]            movep             x:m_hrx,y0
3483      P:414D 0BF080  [6 -     1820]            jsr     convert_to_amp                        ; convert master volume to amplitude
                 0041AD
3484      P:414F 21E600  [2 -     1822]            move              b,y0
3485   
3486                                     ;  READ IN CHANNELS & STEREO BALANCE, AND CONVERT TO BALANCE_L AND BALANCE_R
3487                                               readHost x:x_temp2
3488  +   P:4150 0AA980  [6 -     1828]            jclr    #m_hrdf,x:m_hsr,*
                 004150
3489  +   P:4152 0870AB  [6 -     1834]            movep             x:m_hrx,x:x_temp2
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 46



                 00000F
3490                                               readHost a
3491  +   P:4154 0AA980  [6 -     1840]            jclr    #m_hrdf,x:m_hsr,*
                 004154
3492  +   P:4156 084E2B  [4 -     1844]            movep             x:m_hrx,a
3493      P:4157 0BF080  [6 -     1850]            jsr     convert_balance                       ; convert balance to L & R values
                 0041EB
3494   
3495                                     ;  READ IN BREATHINESS, AND CALCULATE ANTI-BREATHINESS
3496                                               readHost y0
3497  +   P:4159 0AA980  [6 -     1856]            jclr    #m_hrdf,x:m_hsr,*
                 004159
3498  +   P:415B 08462B  [4 -     1860]            movep             x:m_hrx,y0
3499      P:415C 5E9500  [2 -     1862]            move                            y:y_unity,a   ; calculate anti-breathiness
3500      P:415D 4E7054  [4 -     1866]            sub     y0,a                    y0,y:BREATHINESS
                 000049
3501      P:415F 5E0400  [2 -     1868]            move                            a,y:ANTI_BREATHINESS ; anti_breathiness = 1.0 - breathiness
3502   
3503                                     ;  READ IN INTEGER AND FRACTIONAL PARTS OF THE TIME REGISTER INCREMENT, CONCATENATE
3504                                               readHost a
3505  +   P:4160 0AA980  [6 -     1874]            jclr    #m_hrdf,x:m_hsr,*
                 004160
3506  +   P:4162 084E2B  [4 -     1878]            movep             x:m_hrx,a
3507                                               readHost y0
3508  +   P:4163 0AA980  [6 -     1884]            jclr    #m_hrdf,x:m_hsr,*
                 004163
3509  +   P:4165 08462B  [4 -     1888]            movep             x:m_hrx,y0
3510      P:4166 20C800  [2 -     1890]            move              y0,a0                       ; set time register increment by concatenating
3511      P:4167 481D00  [2 -     1892]            move              a,l:l_timeRegInc            ; the integer and fractional parts
3512   
3513                                     ;  READ IN CONTROL PERIOD (NO CONVERSION)
3514                                               readHost y:CONTROL_PERIOD
3515  +   P:4168 0AA980  [6 -     1898]            jclr    #m_hrdf,x:m_hsr,*
                 004168
3516  +   P:416A 0870EB  [6 -     1904]            movep             x:m_hrx,y:CONTROL_PERIOD
                 00004F
3517   
3518                                     ;  READ IN CONTROL FACTOR (NO CONVERSION)
3519                                               readHost y:CONTROL_FACTOR
3520  +   P:416C 0AA980  [6 -     1910]            jclr    #m_hrdf,x:m_hsr,*
                 00416C
3521  +   P:416E 0870EB  [6 -     1916]            movep             x:m_hrx,y:CONTROL_FACTOR
                 000050
3522   
3523                                     ;  READ IN DAMPING FACTOR (NO CONVERSION)
3524                                               readHost y:DAMPING
3525  +   P:4170 0AA980  [6 -     1922]            jclr    #m_hrdf,x:m_hsr,*
                 004170
3526  +   P:4172 0870EB  [6 -     1928]            movep             x:m_hrx,y:DAMPING
                 000000
3527   
3528                                     ;  READ IN TP, TN_MIN, TN_MAX, AND CREATE WAVE TABLE
3529                                               readHost y:TP
3530  +   P:4174 0AA980  [6 -     1934]            jclr    #m_hrdf,x:m_hsr,*
                 004174
3531  +   P:4176 0870EB  [6 -     1940]            movep             x:m_hrx,y:TP
                 00004B
3532                                               readHost y:TN_MIN
3533  +   P:4178 0AA980  [6 -     1946]            jclr    #m_hrdf,x:m_hsr,*
                 004178
3534  +   P:417A 0870EB  [6 -     1952]            movep             x:m_hrx,y:TN_MIN
                 00004C
3535                                               readHost y:TN_MAX
3536  +   P:417C 0AA980  [6 -     1958]            jclr    #m_hrdf,x:m_hsr,*
                 00417C
3537  +   P:417E 0870EB  [6 -     1964]            movep             x:m_hrx,y:TN_MAX
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 47



                 00004D
3538                                               IF      VARIABLE_GP
3539      P:4180 0BF080  [6 -     1970]            jsr     initializeWavetable                   ; rewrite the glottal pulse wavetable
                 004209
3540                                               ENDIF
3541   
3542                                     ;  READ IN THROAT CUTOFF VALUE, CALCULATE THROAT FILTER COEFFICIENTS
3543                                               readHost a
3544  +   P:4182 0AA980  [6 -     1976]            jclr    #m_hrdf,x:m_hsr,*
                 004182
3545  +   P:4184 084E2B  [4 -     1980]            movep             x:m_hrx,a
3546      P:4185 0BF080  [6 -     1986]            jsr     setThroatCoefficients                 ; set the throat filter coefficients
                 004296
3547   
3548                                     ;  READ IN THROAT VOLUME, AND CONVERT TO THROAT AMPLITUDE
3549                                               readHost y0
3550  +   P:4187 0AA980  [6 -     1992]            jclr    #m_hrdf,x:m_hsr,*
                 004187
3551  +   P:4189 08462B  [4 -     1996]            movep             x:m_hrx,y0
3552      P:418A 0BF080  [6 -     2002]            jsr     convert_to_amp
                 0041AD
3553      P:418C 5F0F00  [2 -     2004]            move                            b,y:throatGain
3554   
3555                                     ;  READ IN MOUTH APERTURE COEFFICIENT, AND CALCULATE MOUTH FILTER COEFFICIENTS
3556                                               readHost a
3557  +   P:418D 0AA980  [6 -     2010]            jclr    #m_hrdf,x:m_hsr,*
                 00418D
3558  +   P:418F 084E2B  [4 -     2014]            movep             x:m_hrx,a
3559      P:4190 0BF080  [6 -     2020]            jsr     setMouthCoefficients                  ; set mouth radiation & reflection filter coef.
                 004288
3560   
3561                                     ;  READ IN NOSE APERTURE COEFFICIENT, AND CALCUALTE NOSE FILTER COEFFICIENTS
3562                                               readHost a
3563  +   P:4192 0AA980  [6 -     2026]            jclr    #m_hrdf,x:m_hsr,*
                 004192
3564  +   P:4194 084E2B  [4 -     2030]            movep             x:m_hrx,a
3565      P:4195 0BF080  [6 -     2036]            jsr     setNoseCoefficients                   ; set nose radiation & reflection filter coef.
                 00428F
3566   
3567                                     ;  READ IN GLOTTAL SOURCE WAVEFORM TYPE, AND SET WAVETABLE BASE
3568                                               readHost x:x_temp2
3569  +   P:4197 0AA980  [6 -     2042]            jclr    #m_hrdf,x:m_hsr,*
                 004197
3570  +   P:4199 0870AB  [6 -     2048]            movep             x:m_hrx,x:x_temp2
                 00000F
3571      P:419B 0BF080  [6 -     2054]            jsr     set_waveform_type                     ; set the waveform type
                 0041F9
3572   
3573                                     ;  READ IN PULSE MODULATION (NO CONVERSION)
3574                                               readHost y:PULSE_MODULATION
3575  +   P:419D 0AA980  [6 -     2060]            jclr    #m_hrdf,x:m_hsr,*
                 00419D
3576  +   P:419F 0870EB  [6 -     2066]            movep             x:m_hrx,y:PULSE_MODULATION
                 000001
3577   
3578                                     ;  READ IN CROSSMIX FACTOR (NO CONVERSION)
3579                                               readHost y:CROSSMIX_FACTOR
3580  +   P:41A1 0AA980  [6 -     2072]            jclr    #m_hrdf,x:m_hsr,*
                 0041A1
3581  +   P:41A3 0870EB  [6 -     2078]            movep             x:m_hrx,y:CROSSMIX_FACTOR
                 00004A
3582   
3583                                     ;  READ IN LEFT SHIFT SCALING VALUE
3584                                               IF      SSI_OUTPUT
3589                                               ELSE
3590                                               readHost y:left_shift                         ; store the scaling value
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 48



3591  +   P:41A5 0AA980  [6 -     2084]            jclr    #m_hrdf,x:m_hsr,*
                 0041A5
3592  +   P:41A7 0870EB  [6 -     2090]            movep             x:m_hrx,y:left_shift
                 000011
3593                                               ENDIF
3594   
3595   
3596      P:41A9 63F000  [4 -     2094]            move              x:x_r3_save,r3              ; restore the saved value of r3
                 000055
3597      P:41AB 0AA822  [4 -     2098]            bset    #m_hcie,x:m_hcr                       ; enable host command interrupts
3598      P:41AC 000004  [4 -     2102]            rti
3599   
3600   
3601   
3602                                     ;***************************************************************************************
3603                                     ;  SUBROUTINE:  convert_to_amp
3604                                     ;
3605                                     ;  Converts dB value (a fraction equal to dB/64.0) to an amplitude value (0.0 to 1.0).
3606                                     ;
3607                                     ;  Input:       y0
3608                                     ;  Output:      b
3609                                     ;***************************************************************************************
3610   
3611                                     convert_to_amp
3612      P:41AD 45F400  [4 -     2106]            move              #>64,x1                     ; move scaling factor into x1
                 000040
3613      P:41AF 2000E0  [2 -     2108]            mpy     y0,x1,a                               ; mult. input by scaling factor
3614      P:41B0 200033  [2 -     2110]            lsl     a                                     ; put sign bit into a0 and
3615      P:41B1 57F422  [4 -     2114]            asr     a         #>l_dbToAmpTable,b          ; get conversion table base
                 000080
3616   
3617      P:41B3 218600  [2 -     2116]            move              a1,y0                       ; get the table offset
3618      P:41B4 200058  [2 -     2118]            add     y0,b                                  ; and add it to the table base
3619      P:41B5 21F300  [2 -     2120]            move              b,r3                        ; and put the result into r3
3620   
3621      P:41B6 210500  [2 -     2122]            move              a0,x1                       ; get the fractional part of the scaled input
3622      P:41B7 57E300  [2 -     2124]            move              x:(r3),b                    ; get the ampl value of the int part of the inp
ut
3623      P:41B8 4FE300  [2 -     2126]            move                            y:(r3),y1     ; get the corresponding delta value
3624      P:41B9 2000FB  [2 -     2128]            macr    x1,y1,b                               ; add frac * delta to b
3625   
3626      P:41BA 00000C  [4 -     2132]            rts
3627   
3628   
3629   
3630                                     ;***************************************************************************************
3631                                     ;  SUBROUTINE:  betaFunction
3632                                     ;
3633                                     ;  Calculates the beta coefficient used to calculate the filter coefficients for
3634                                     ;  the bandpass filter.  Note that the input is bandwidth/sampleRate (varies from
3635                                     ;  0 to 0.5).
3636                                     ;
3637                                     ;  Input:       y0
3638                                     ;  Output:      b
3639                                     ;
3640                                     ;  Preserves:   x0
3641                                     ;***************************************************************************************
3642   
3643                                     betaFunction
3644      P:41BB 45F400  [4 -     2136]            move              #>betaTableSize-1,x1        ; move scaling factor into x1
                 00003F
3645      P:41BD 2000E0  [2 -     2138]            mpy     y0,x1,a                               ; mult. input by scaling factor
3646      P:41BE 200032  [2 -     2140]            asl     a                                     ; multiply by 2
3647      P:41BF 200033  [2 -     2142]            lsl     a                                     ; put sign bit into a0 and
3648      P:41C0 57F422  [4 -     2146]            asr     a         #>l_betaTable,b             ; get conversion table base
                 0043C0
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 49



3649   
3650      P:41C2 218600  [2 -     2148]            move              a1,y0                       ; get the table offset
3651      P:41C3 200058  [2 -     2150]            add     y0,b                                  ; and add it to the table base
3652      P:41C4 21F300  [2 -     2152]            move              b,r3                        ; and put the result into r3
3653   
3654      P:41C5 210500  [2 -     2154]            move              a0,x1                       ; get the fractional part of the scaled input
3655      P:41C6 57DB00  [2 -     2156]            move              x:(r3)+,b                   ; get the ampl value of the int part of the inp
ut
3656   
3657      P:41C7 56E300  [2 -     2158]            move              x:(r3),a                    ; a = nextValue
3658      P:41C8 200014  [2 -     2160]            sub     b,a                                   ; delta = nextValue - value
3659      P:41C9 21C700  [2 -     2162]            move              a,y1
3660   
3661      P:41CA 2000FB  [2 -     2164]            macr    x1,y1,b                               ; b += frac * delta
3662   
3663      P:41CB 00000C  [4 -     2168]            rts
3664   
3665   
3666   
3667                                     ;***************************************************************************************
3668                                     ;  SUBROUTINE:  sin
3669                                     ;
3670                                     ;  Calculate the sine function of the input value.  The input value varies from 0.0 to
3671                                     ;  1.0 (i.e. theta/2PI).
3672                                     ;
3673                                     ;  Input:       y0
3674                                     ;  Output:      b
3675                                     ;***************************************************************************************
3676   
3677                                     sin
3678      P:41CC 45F400  [4 -     2172]            move              #>SINE_TABLE_SIZE,x1        ; move scaling factor into x1
                 000100
3679      P:41CE 2000E0  [2 -     2174]            mpy     y0,x1,a                               ; mult. input by scaling factor
3680      P:41CF 200033  [2 -     2176]            lsl     a                                     ; put sign bit into a0 and
3681      P:41D0 57F422  [4 -     2180]            asr     a         #>sine_wave_table,b         ; get conversion table base
                 000100
3682   
3683      P:41D2 218600  [2 -     2182]            move              a1,y0                       ; get the table offset
3684      P:41D3 200058  [2 -     2184]            add     y0,b                                  ; and add it to the table base
3685      P:41D4 21F300  [2 -     2186]            move              b,r3                        ; and put the result into r3
3686   
3687      P:41D5 210500  [2 -     2188]            move              a0,x1                       ; get the fractional part of the scaled input
3688      P:41D6 5FDB00  [2 -     2190]            move                            y:(r3)+,b     ; get the ampl value from the sine table
3689      P:41D7 5EE300  [2 -     2192]            move                            y:(r3),a      ; get the next value in the table
3690      P:41D8 200014  [2 -     2194]            sub     b,a                                   ; calculate the table delta (a = a - b)
3691      P:41D9 21C700  [2 -     2196]            move              a,y1                        ; move the delta into y1
3692      P:41DA 2000FB  [2 -     2198]            macr    x1,y1,b                               ; add frac * delta to base amplitude value
3693   
3694      P:41DB 00000C  [4 -     2202]            rts
3695   
3696   
3697   
3698                                     ;***************************************************************************************
3699                                     ;  SUBROUTINE:  bpConvert
3700                                     ;
3701                                     ;  Converts bandpass center frequency and bandwidth values to filter coefficients.
3702                                     ;  Note that the inputs are cf/sampleRate and bw/sampleRate (i.e. vary from 0 to 0.5).
3703                                     ;
3704                                     ;  Input:       x0 (BANDPASS_CF), y0 (BANDPASS_BW)
3705                                     ;  Output:      x:ALPHA, y:BETA, y:GAMMA
3706                                     ;***************************************************************************************
3707   
3708                                     bpConvert
3709      P:41DC 0BF080  [6 -     2208]            jsr     betaFunction                          ; calculate the beta coefficient (x0 preserved!
)
                 0041BB
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 50



3710   
3711      P:41DE 2E2000  [2 -     2210]            move              #@cvf(0.25),a               ; add .25 to CF, so we can use the sin function
3712      P:41DF 570840  [2 -     2212]            add     x0,a      b,x:BETA                    ; to calculate the cos of CF.  Store beta coeff
.
3713      P:41E0 21C600  [2 -     2214]            move              a,y0                        ; move (CF+0.25) to y0
3714      P:41E1 0BF080  [6 -     2220]            jsr     sin                                   ; calculate cos(CF), output in b
                 0041CC
3715      P:41E3 21E42A  [2 -     2222]            asr     b         b,x0                        ; b /= 2
3716      P:41E4 468800  [2 -     2224]            move              x:BETA,y0
3717      P:41E5 2E40DB  [2 -     2226]            macr    x0,y0,b   #@cvf(0.5),a                ; b += beta * cos(CF)
3718   
3719      P:41E6 570954  [2 -     2228]            sub     y0,a      b,x:GAMMA                   ; a = 0.5 - beta.   Store gamma coefficient
3720      P:41E7 200022  [2 -     2230]            asr     a                                     ; a /= 2
3721      P:41E8 200011  [2 -     2232]            rnd     a
3722      P:41E9 560700  [2 -     2234]            move              a,x:ALPHA                   ; Store alpha coefficient
3723   
3724      P:41EA 00000C  [4 -     2238]            rts
3725   
3726   
3727   
3728                                     ;***************************************************************************************
3729                                     ;  SUBROUTINE:  convert_balance
3730                                     ;
3731                                     ;  Converts the channels value (1 or 2), the balance value (-1.0 to +1.0), and the
3732                                     ;  master amplitude (0.0 to 1.0) to left and right channel scaling values.
3733                                     ;
3734                                     ;  Input:       x:x_temp2 (channels), a (balance), y0 (master amplitude)
3735                                     ;  Output:      y:BALANCE_R, y:BALANCE_L
3736                                     ;***************************************************************************************
3737   
3738                                     convert_balance
3739      P:41EB 0A0FA1  [6 -     2244]            jset    #1,x:x_temp2,_stereo                  ; if 2 channels, do stereo scaling below
                 0041F2
3740   
3741      P:41ED 244000  [2 -     2246]  _mono     move              #@cvf(0.5),x0               ; mono signal has equal energy in both channels
3742      P:41EE 2000D9  [2 -     2248]            mpyr    x0,y0,b                               ; scale by master amplitude
3743      P:41EF 5F1700  [2 -     2250]            move                            b,y:BALANCE_R ; store R channel scale
3744      P:41F0 5F1800  [2 -     2252]            move                            b,y:BALANCE_L ; store L channel scale
3745      P:41F1 00000C  [4 -     2256]            rts
3746   
3747      P:41F2 244022  [2 -     2258]  _stereo   asr     a         #@cvf(0.5),x0               ; a /= 2
3748      P:41F3 5F9540  [2 -     2260]            add     x0,a                    y:y_unity,b   ; a += 0.5
3749      P:41F4 21C41C  [2 -     2262]            sub     a,b       a,x0                        ; L = 1 - R
3750      P:41F5 21E5D1  [2 -     2264]            mpyr    x0,y0,a   b,x1                        ; scale R channel by master amp
3751      P:41F6 5E17E9  [2 -     2266]            mpyr    x1,y0,b                 a,y:BALANCE_R ; sclae L channel; store R channel scale
3752      P:41F7 5F1800  [2 -     2268]            move                            b,y:BALANCE_L ; store L channel scale
3753      P:41F8 00000C  [4 -     2272]            rts
3754   
3755   
3756   
3757                                     ;***************************************************************************************
3758                                     ;  SUBROUTINE:   set_waveform_type
3759                                     ;
3760                                     ;  Sets the waveform type by setting the r0 and m0 registers, plus the x_tableMod value.
3761                                     ;
3762                                     ;  Input:       x:x_temp2
3763                                     ;  Output:      r0, m0, x:x_tableMod
3764                                     ;***************************************************************************************
3765   
3766                                     set_waveform_type
3767      P:41F9 0A0FA0  [6 -     2278]            jset    #0,x:x_temp2,_sine
                 004202
3768      P:41FB 60F400  [4 -     2282]            move              #>gp_wave_table,r0          ; set register to base of glottal pulse table
                 004400
3769      P:41FD 44F400  [4 -     2286]            move              #>GP_TABLE_SIZE-1,x0
                 0000FF
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 51



3770      P:41FF 440600  [2 -     2288]            move              x0,x:x_tableMod             ; set mask to tablesize - 1
3771      P:4200 04C4A0  [2 -     2290]            move              x0,m0                       ; set modulus for waveform table
3772      P:4201 00000C  [4 -     2294]            rts
3773   
3774                                               IF      MSOUND
3775      P:4202 60F400  [4 -     2298]  _sine     move              #>dsine_wave_table,r0       ; set register to base of sine table
                 005400
3776                                               ELSE
3778                                               ENDIF
3779      P:4204 44F400  [4 -     2302]            move              #>SINE_TABLE_SIZE-1,x0
                 0000FF
3780      P:4206 440600  [2 -     2304]            move              x0,x:x_tableMod             ; set mask to tablesize - 1
3781      P:4207 04C4A0  [2 -     2306]            move              x0,m0                       ; set modulus for waveform table
3782      P:4208 00000C  [4 -     2310]            rts
3783   
3784   
3785   
3786                                               IF      VARIABLE_GP
3787                                     ;***************************************************************************************
3788                                     ;  SUBROUTINE:  initializeWavetable
3789                                     ;
3790                                     ;  Initializes the glottal pulse wavetable according to the tnMin, tnMax, and tp
3791                                     ;  variables.
3792                                     ;
3793                                     ;  Input:       y:TN_MAX, y:TN_MIN, y:TP
3794                                     ;  Output:      gp_wave_table
3795                                     ;***************************************************************************************
3796   
3797                                     initializeWavetable
3798   
3799      P:4209 5EF000  [4 -     2314]            move                            y:TN_MAX,a    ; tnDelta = tnMax - tnMin
                 00004D
3800      P:420B 4CF000  [4 -     2318]            move                            y:TN_MIN,x0
                 00004C
3801      P:420D 47F444  [4 -     2322]            sub     x0,a      #>GP_TABLE_SIZE,y1
                 000100
3802      P:420F 567000  [4 -     2326]            move              a,x:x_tnDelta
                 000058
3803   
3804   
3805      P:4211 0AF0AB  [6 -     2332]            jmi     _negative                             ; div2 = rint(wavetableSize *
                 004215
3806      P:4213 4CF000  [4 -     2336]            move                            y:TN_MAX,x0   ;   (tp + max(tnMin,tnMax))) - 1
                 00004D
3807                                     _negative
3808      P:4215 5EF000  [4 -     2340]            move                            y:TP,a
                 00004B
3809      P:4217 200040  [2 -     2342]            add     x0,a
3810      P:4218 21C400  [2 -     2344]            move              a,x0
3811      P:4219 46F4C1  [4 -     2348]            mpyr    x0,y1,a   #>gp_wave_table,y0
                 004400
3812      P:421B 4C9450  [2 -     2350]            add     y0,a                    y:y_one,x0
3813      P:421C 4DF044  [4 -     2354]            sub     x0,a                    y:TP,x1
                 00004B
3814      P:421E 567000  [4 -     2358]            move              a,x:x_div2
                 00005A
3815   
3816      P:4220 2000F9  [2 -     2360]            mpyr    x1,y1,b                               ; div1 = rint(wavetableSize * tp) - 1
3817      P:4221 200058  [2 -     2362]            add     y0,b
3818      P:4222 20004C  [2 -     2364]            sub     x0,b
3819      P:4223 577000  [4 -     2368]            move              b,x:x_div1
                 000059
3820   
3821      P:4225 21F300  [2 -     2370]            move              b,r3                        ; create rising part of table
3822      P:4226 20005C  [2 -     2372]            sub     y0,b                                  ; put div1 into r3
3823      P:4227 21E500  [2 -     2374]            move              b,x1                        ; tpLength = div1 - base
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 52



3824      P:4228 0BF080  [6 -     2380]            jsr     reciprocal                            ; y0 =  1/tpLength
                 004271
3825   
3826      P:422A 5E9500  [2 -     2382]            move                            y:y_unity,a   ; put 1.0 into top of curve
3827      P:422B 565300  [2 -     2384]            move              a,x:(r3)-
3828      P:422C 4F9400  [2 -     2386]            move                            y:y_one,y1
3829      P:422D 20007C  [2 -     2388]            sub     y1,b                                  ; decrement loop count by 1
3830   
3831      P:422E 06CF00  [6 -     2394]            do      b,_end_loop1                          ; this loop increments backwards
                 00423D
3832      P:4230 0445BF  [2 -     2396]            movec             lc,x1                       ; put loop count into x1
3833      P:4231 2000E8  [2 -     2398]            mpy     x1,y0,b                               ; b = loopCount * 1/newTnLength
3834      P:4232 20003B  [2 -     2400]            lsl     b                                     ; put sign bit into b0
3835      P:4233 20002A  [2 -     2402]            asr     b
3836      P:4234 212400  [2 -     2404]            move              b0,x0                       ; put fractional part of product into x0
3837      P:4235 276081  [2 -     2406]            mpyr    x0,x0,a   #0.75,y1                    ; a = x^2
3838      P:4236 21C500  [2 -     2408]            move              a,x1
3839      P:4237 2000F0  [2 -     2410]            mpy     x1,y1,a                               ; a = 0.75 * x^2
3840      P:4238 2740A9  [2 -     2412]            mpyr    x0,x1,b   #0.5,y1                     ; b = x^3
3841      P:4239 21E500  [2 -     2414]            move              b,x1
3842      P:423A 2000F7  [2 -     2416]            macr    -x1,y1,a                              ; a *=  -(0.5 * x^3)
3843      P:423B 200032  [2 -     2418]            asl     a
3844      P:423C 200032  [2 -     2420]            asl     a                                     ; a *= 4
3845      P:423D 565313  [2 -     2422]            clr     a         a,x:(r3)-                   ; put value into the wavetable
3846                                     _end_loop1
3847   
3848      P:423E 566300  [2 -     2424]            move              a,x:(r3)                    ; put 0 into very 1st table entry
3849   
3850      P:423F 47F400  [4 -     2428]            move              #>GP_TABLE_SIZE,y1          ; create closed part of table (all zeros)
                 000100
3851      P:4241 57F400  [4 -     2432]            move              #>gp_wave_table,b
                 004400
3852      P:4243 45F078  [4 -     2436]            add     y1,b      x:x_div2,x1
                 00005A
3853      P:4245 20B36C  [2 -     2438]            sub     x1,b      x1,r3
3854   
3855      P:4246 06CF00  [6 -     2444]            do      b,_end_loop2
                 004248
3856      P:4248 565B00  [2 -     2446]            move              a,x:(r3)+
3857                                     _end_loop2
3858   
3859      P:4249 0BF080  [6 -     2452]            jsr     updateWavetable                       ; create falling part of table
                 00424C
3860                                                                                             ; according to current amplitude
3861      P:424B 00000C  [4 -     2456]            rts
3862   
3863   
3864   
3865                                     ;***************************************************************************************
3866                                     ;  SUBROUTINE:  updateWavetable
3867                                     ;
3868                                     ;  Updates the variable portion of the glottal pulse wavetable according to the voicing
3869                                     ;  amplitude.
3870                                     ;
3871                                     ;  Input:       y:TN_MAX, y:OSC_AMP
3872                                     ;  Output:      gp_wave_table
3873                                     ;***************************************************************************************
3874   
3875                                     updateWavetable
3876      P:424C 5EF000  [4 -     2460]            move                            y:TN_MAX,a
                 00004D
3877      P:424E 4F8200  [2 -     2462]            move                            y:OSC_AMP,y1
3878      P:424F 44F000  [4 -     2466]            move              x:x_tnDelta,x0              ; actualTnLength = tnMax - (OSC_AMP * tnDelta)
                 000058
3879      P:4251 46F4C7  [4 -     2470]            macr    -y1,x0,a  #>GP_TABLE_SIZE,y0
                 000100
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 53



3880   
3881      P:4253 21C400  [2 -     2472]            move              a,x0
3882      P:4254 4C94D1  [2 -     2474]            mpyr    x0,y0,a                 y:y_one,x0
3883      P:4255 47F044  [4 -     2478]            sub     x0,a      x:x_div1,y1
                 000059
3884      P:4257 218570  [2 -     2480]            add     y1,a      a1,x1                       ; newTnLength=rint(actualTnLength * tableSize)-
1
3885      P:4258 21D300  [2 -     2482]            move              a,r3
3886      P:4259 567000  [4 -     2486]            move              a,x:x_newDiv2               ; newDiv2 = newTnLength + div1
                 00005B
3887   
3888      P:425B 0BF080  [6 -     2492]            jsr     reciprocal                            ; y0 =  1/newTnLength
                 004271
3889   
3890      P:425D 06C500  [6 -     2498]            do      x1,_end_loop1                         ; this loop increments backwards
                 004265
3891      P:425F 0445BF  [2 -     2500]            movec             lc,x1                       ; put loop count into x1
3892      P:4260 2000E8  [2 -     2502]            mpy     x1,y0,b                               ; b = loopCount * 1/newTnLength
3893      P:4261 20003B  [2 -     2504]            lsl     b                                     ; put sign bit into b0, and
3894      P:4262 5E952A  [2 -     2506]            asr     b                       y:y_unity,a   ; put 1.0 into a
3895      P:4263 212400  [2 -     2508]            move              b0,x0                       ; put fractional part of product into x0
3896      P:4264 200087  [2 -     2510]            macr    -x0,x0,a                              ; a -= x^2
3897      P:4265 565300  [2 -     2512]            move              a,x:(r3)-                   ; put value into the wavetable
3898                                     _end_loop1
3899   
3900                                     ; ZERO REST OF TABLE HERE---REMEMBER ERROR IN FIRST VALUE CALCULATED ABOVE
3901      P:4266 44F000  [4 -     2516]            move              x:x_newDiv2,x0
                 00005B
3902      P:4268 209300  [2 -     2518]            move              x0,r3                       ; move newDiv2 into r3
3903      P:4269 56F01B  [4 -     2522]            clr     b         x:x_div2,a
                 00005A
3904      P:426B 4D9444  [2 -     2524]            sub     x0,a                    y:y_one,x1
3905      P:426C 200060  [2 -     2526]            add     x1,a                                  ; a = div2 - newDiv2 + 1
3906   
3907      P:426D 06CE00  [6 -     2532]            do      a,_end_loop2
                 00426F
3908      P:426F 575B00  [2 -     2534]            move              b,x:(r3)+
3909                                     _end_loop2
3910   
3911      P:4270 00000C  [4 -     2538]            rts
3912   
3913   
3914   
3915                                     ;***************************************************************************************
3916                                     ;  SUBROUTINE:  reciprocal
3917                                     ;
3918                                     ;  Calculates the positive reciprocal of the input.
3919                                     ;
3920                                     ;  Input:       x1 (divisor)
3921                                     ;  Output:      y0 (quotient)
3922                                     ;
3923                                     ;  overwrites a, y0
3924                                     ;  preserves x1
3925                                     ;***************************************************************************************
3926   
3927                                     reciprocal
3928      P:4271 5E9400  [2 -     2540]            move                            y:y_one,a     ; put dividend (1) into a1
3929      P:4272 00FEB9  [2 -     2542]            and     #$fe,ccr                              ; make sure carry bit is clear
3930      P:4273 0618A0  [4 -     2546]            rep     #$18                                  ; do division
3931      P:4274 018060  [2 -     2548]            div     x1,a
3932      P:4275 210600  [2 -     2550]            move              a0,y0                       ; put result into y0
3933      P:4276 00000C  [4 -     2554]            rts
3934   
3935                                               ENDIF
3936   
3937   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 54



3938   
3939                                     ;***************************************************************************************
3940                                     ;  SUBROUTINE:  setFricationTaps
3941                                     ;
3942                                     ;  Sets the frication taps to according to frication position (x0) and amplitude (b).
3943                                     ;
3944                                     ;  Input:       x0 (FRICATION_POS), b (FRICATION_AMP)
3945                                     ;  Output:      y:y_tap0 to y:y_tap4
3946                                     ;***************************************************************************************
3947   
3948                                     setFricationTaps
3949      P:4277 639B13  [2 -     2556]            clr     a         x:tap_mem,r3                ; clear the tap memory
3950      P:4278 0608A0  [4 -     2560]            rep     #NUMBER_TAPS
3951      P:4279 5E5B00  [2 -     2562]            move                            a,y:(r3)+
3952   
3953      P:427A 46F400  [4 -     2566]            move              #>POSITION_SCALE,y0         ; move scaling factor into y0
                 000008
3954      P:427C 21E7D0  [2 -     2568]            mpy     x0,y0,a   b,y1                        ; mult. input by scaling factor
3955                                                                                             ; frication ampl. -> y1 (preserve!)
3956      P:427D 200033  [2 -     2570]            lsl     a                                     ; put sign bit into a0 and
3957      P:427E 5F9522  [2 -     2572]            asr     a                       y:y_unity,b   ; put 1.0 into b
3958   
3959      P:427F 210500  [2 -     2574]            move              a0,x1                       ; store complement (frac.) in x1
3960      P:4280 218600  [2 -     2576]            move              a1,y0                       ; put integer part into y0
3961      P:4281 569B6C  [2 -     2578]            sub     x1,b      x:tap_mem,a                 ; calculate remainder; tablebase -> a
3962      P:4282 21E450  [2 -     2580]            add     y0,a      b,x0                        ; add integer to tablebase; store
3963                                                                                             ; remainder; put frication ampl in y1
3964      P:4283 21D300  [2 -     2582]            move              a,r3                        ; put tap # into r3
3965      P:4284 2000C1  [2 -     2584]            mpyr    x0,y1,a                               ; calculate first tap
3966      P:4285 5E5BF9  [2 -     2586]            mpyr    x1,y1,b                 a,y:(r3)+     ; calculate second tap; store 1st tap
3967      P:4286 5F6300  [2 -     2588]            move                            b,y:(r3)      ; store 2nd tap
3968   
3969      P:4287 00000C  [4 -     2592]            rts
3970   
3971   
3972   
3973                                     ;***************************************************************************************
3974                                     ;  SUBROUTINE:  setMouthCoefficients
3975                                     ;
3976                                     ;  Calculates the mouth filter coefficients from the input mouth coefficient.
3977                                     ;
3978                                     ;  Input:       a
3979                                     ;  Output:      x:fa10, x:fb11, x:fa20, x:fa21, x:fb21
3980                                     ;***************************************************************************************
3981   
3982                                     setMouthCoefficients
3983      P:4288 560C00  [2 -     2594]            move              a,x:fa20                    ; a20 = coeff
3984      P:4289 4C9536  [2 -     2596]            neg     a                       y:y_unity,x0
3985      P:428A 560B00  [2 -     2598]            move              a,x:fb11                    ; b11 = -coeff
3986      P:428B 560D00  [2 -     2600]            move              a,x:fa21                    ; a21 = -coeff
3987      P:428C 560E40  [2 -     2602]            add     x0,a      a,x:fb21                    ; b21 = -coeff
3988      P:428D 560A00  [2 -     2604]            move              a,x:fa10                    ; a10 = 1.0 - coeff
3989   
3990      P:428E 00000C  [4 -     2608]            rts
3991   
3992   
3993   
3994                                     ;***************************************************************************************
3995                                     ;  SUBROUTINE:  setNoseCoefficients
3996                                     ;
3997                                     ;  Calculates the nose filter coefficients from the input nose coefficient.
3998                                     ;
3999                                     ;  Input:       a
4000                                     ;  Output:      x:nfa10, x:nfb11, x:nfa20, x:nfa21, x:nfb21
4001                                     ;***************************************************************************************
4002   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 55



4003                                     setNoseCoefficients
4004      P:428F 561200  [2 -     2610]            move              a,x:nfa20                   ; a20 = coeff
4005      P:4290 4C9536  [2 -     2612]            neg     a                       y:y_unity,x0
4006      P:4291 561100  [2 -     2614]            move              a,x:nfb11                   ; b11 = -coeff
4007      P:4292 561300  [2 -     2616]            move              a,x:nfa21                   ; a21 = -coeff
4008      P:4293 561440  [2 -     2618]            add     x0,a      a,x:nfb21                   ; b21 = -coeff
4009      P:4294 561000  [2 -     2620]            move              a,x:nfa10                   ; a10 = 1.0 - coeff
4010      P:4295 00000C  [4 -     2624]            rts
4011   
4012   
4013   
4014                                     ;***************************************************************************************
4015                                     ;  SUBROUTINE:  setThroatCoefficients
4016                                     ;
4017                                     ;  Sets the throat filter coefficients from the input throat cutoff value (the cutoff
4018                                     ;  frequency divided by the sample rate, i.e. a value from 0 to 0.5).  These
4019                                     ;  coefficients assume addition in the difference equation:
4020                                     ;       y[n] = (ta0 * input) + (tb1 * y[n-1])
4021                                     ;
4022                                     ;  Input:       a
4023                                     ;  Output:      y:ta0, y:tb1
4024                                     ;***************************************************************************************
4025   
4026                                     setThroatCoefficients
4027      P:4296 4D9532  [2 -     2626]            asl     a                       y:y_unity,x1  ; a *= 2              1 -> x1
4028      P:4297 5E7036  [4 -     2630]            neg     a                       a,y:ta0       ; a *= -1             ta0 = cutoff * 2
                 000052
4029      P:4299 200060  [2 -     2632]            add     x1,a                                  ; a = -(cutoff * 2) + 1
4030      P:429A 5E0D00  [2 -     2634]            move                            a,y:tb1       ; tb1 = 1 - (cutoff * 2)
4031      P:429B 00000C  [4 -     2638]            rts
4032   
4033   
4034   
4035                                     ;***************************************************************************************
4036                                     ;  SUBROUTINE:   dataEmpty
4037                                     ;
4038                                     ;  Empties the sample rate conversion (SRC) buffer while doing the sample rate
4039                                     ;  conversion.
4040                                     ;
4041                                     ;  Input:       src_buffer_base
4042                                     ;  Output:      dma_out_buffer
4043                                     ;***************************************************************************************
4044   
4045                                     dataEmpty
4046   
4047                                     ;  CALCULATE AND STORE endPtr
4048      P:429C 044514  [4 -     2642]            lua     (r5)-n5,r4
4049      P:429D 6C7000  [4 -     2646]            move                            r4,y:endPtr
                 00004E
4050   
4051                                     ;  index = emptyPtr
4052      P:429F 22F100  [2 -     2648]            move              r7,r1
4053   
4054                                     ;  GET CURRENT VALUE OF THE TIME REGISTER       
4055      P:42A0 499C00  [2 -     2650]            move              l:l_timeReg,b
4056   
4057                                     ;  CONVERSION LOOP 
4058      P:42A1 47963E  [2 -     2652]  _topCL    neg     b         x:mask_l,y1                 ; complement timeReg.  L_MASK->y1
4059      P:42A2 56987E  [2 -     2654]            and     y1,b      x:fbase_addr,a              ; mask out N part      filter base->a
4060      P:42A3 21A53B  [2 -     2656]            lsl     b         b1,x1                       ; put sign bit in b0   L part->x1
4061      P:42A4 479760  [2 -     2658]            add     x1,a      x:base_diff,y1              ; a += L part         delta filt base diff->y1
4062      P:42A5 21D370  [2 -     2660]            add     y1,a      a,r3                        ; a += base diff       a->r3
4063      P:42A6 21D42A  [2 -     2662]            asr     b         a,r4                        ; put sign bit in b0   a->r4
4064      P:42A7 212400  [2 -     2664]            move              b0,x0                       ; interpolation->x0
4065   
4066                                               IF      MSOUND
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer.asm  Page 56



4067      P:42A8 57CB13  [2 -     2666]            clr     a         x:(r3)+n3,b                 ; get filter data
4068      P:42A9 46CC00  [2 -     2668]            move              x:(r4)+n4,y0                ; get filter delta data
4069                                               ENDIF
4070                                               IF      BLACK                                 ; works since ext. x == y
4072                                               ENDIF
4073   
4074      P:42AA 061980  [6 -     2674]            do      #PADSIZE-1,_endloop                   ; do convolution
                 0042AE
4075      P:42AC 45D9DB  [2 -     2676]            macr    x0,y0,b   x:(r1)+,x1                  ; b += interpolation * delta   x[n]->x1
4076      P:42AD 1F8B00  [2 -     2678]            move              b,y1          x:(r3)+n3,b   ; b->y1                             filter valu
e->b
4077      P:42AE 46CCF2  [2 -     2680]            mac     x1,y1,a   x:(r4)+n4,y0                ; a += x[n] * (filt + (int. * delta))
4078                                     _endloop
4079   
4080   
4081                                     ;***************************************************************************************
4082                                     ;  ROUTINE:     write_sample_stereo
4083                                     ;
4084                                     ;  Takes the input sample, and either creates a pseudo-mono signal by writing that
4085                                     ;  sample (scaled by 0.5) to both the left and right channels, or creates a
4086                                     ;  stereo signal by writing the left and right channels according the the balance
4087                                     ;  control (left and right channel scaling factors).  If the output buffer is full,
4088                                     ;  it is written to the host (and thus the DAC).
4089                                     ;
4090                                     ;  Input:       a
4091                                     ;  Output:      none
4092                                     ;***************************************************************************************
4093   
4094      P:42AF 10F000  [4 -     2684]            move              a,x0          y:BALANCE_L,y0 ; signal in x0, L scaling -> y0
                 000018
4095      P:42B1 4F97D0  [2 -     2686]            mpy     x0,y0,a                 y:BALANCE_R,y1 ; scale L channel, R scaling -> y1
4096      P:42B2 5E5EC8  [2 -     2688]            mpy     x0,y1,b                 a,y:(r6)+     ; scale R channel, L value -> dma buffer
4097      P:42B3 5F5E00  [2 -     2690]            move                            b,y:(r6)+     ; R value -> dma buffer
4098   
4099      P:42B4 449500  [2 -     2692]            move              x:dma_fill_base,x0          ; put buffer base in x0
4100      P:42B5 22CE00  [2 -     2694]            move              r6,a                        ; put current index in a
4101      P:42B6 200045  [2 -     2696]            cmp     x0,a                                  ; if (current index==buffer base)
4102      P:42B7 0FA1E5  [4 -     2700]            jseq    write_DMA_buffer                      ; then the buffer is full, so write it out
4103   
4104   
4105   
4106                                     ;***************************************************************************************
4107                                     ;  SUBROUTINE:   dataEmpty (2nd part)
4108                                     ;***************************************************************************************
4109   
4110                                     ;  UPDATE TIME REGISTER
4111      P:42B8 489C00  [2 -     2702]            move              l:l_timeReg,a               ; timeRegister->a
4112      P:42B9 499D00  [2 -     2704]            move              l:l_timeRegInc,b            ; timeRegisterIncrement->b
4113      P:42BA 260210  [2 -     2706]            add     b,a       #N_SCALE,y0                 ; a += increment    N_SCALE->y0
4114      P:42BB 11F009  [4 -     2710]            tfr     a,b       a,x0          y:endPtr,y1   ; a->b   a->x0            endPtr->y1
                 00004E
4115      P:42BD 4596D0  [2 -     2712]            mpy     x0,y0,a   x:mask_l,x1                 ; a = N part       L_MASK->x1
4116      P:42BE 21DF6E  [2 -     2714]            and     x1,b      a,n7                        ; clear out N part  N part->n7
4117      P:42BF 491C00  [2 -     2716]            move              b,l:l_timeReg               ; store timeRegister
4118      P:42C0 204F00  [2 -     2718]            move              (r7)+n7                     ; emptyPtr += nValue(timeRegister)
4119   
4120                                     ;  LOOP TEST
4121      P:42C1 22EE00  [2 -     2720]            move              r7,a                        ; emptyPtr->a
4122      P:42C2 22F175  [2 -     2722]            cmp     y1,a      r7,r1                       ; index = emptyPtr
4123      P:42C3 0AF0A2  [6 -     2728]            jne     _topCL                                ; if (emptyPtr < endPtr) loop again
                 0042A1
4124   
4125      P:42C5 00000C  [4 -     2732]            rts
4126   
0    Errors
0    Warnings
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer_white.asm  Page 57





































































Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer_white.asm  Page 58



                         Memory Utilization Report


X Memory

Start    End     Length    Type      Label             Section           Overlay Address
0000     0000        1     DATA      x_STATUS_flags
0001     0001        1     DATA      x_ngs_signal
0002     0002        1     DATA      x_lpn_signal
0003     0003        1     DATA      x_FIR_mod
0004     0004        1     DATA      FIR_x_ptr
0005     0005        1     DATA      FIR_y_ptr
0006     0006        1     DATA      x_tableMod
0007     0007        1     DATA      ALPHA
0008     0008        1     DATA      BETA
0009     0009        1     DATA      GAMMA
000A     000A        1     DATA      fa10
000B     000B        1     DATA      fb11
000C     000C        1     DATA      fa20
000D     000D        1     DATA      fa21
000E     000E        1     DATA      fb21
000F     000F        1     DATA      x_temp2
0010     0010        1     DATA      nfa10
0011     0011        1     DATA      nfb11
0012     0012        1     DATA      nfa20
0013     0013        1     DATA      nfa21
0014     0014        1     DATA      nfb21
0015     0015        1     DATA      dma_fill_base
0016     0016        1     CONST     mask_l
0017     0017        1     CONST     base_diff
0018     0018        1     CONST     fbase_addr
0019     0019        1     DATA      vtScale
001A     001A        1     CONST     coeff_mem
001B     001B        1     CONST     tap_mem
001C     001F        4     UNUSED
0020     0020        1     DATA      S1_TA
0021     0021        1     DATA      S1_BA
0022     0022        1     DATA      S2_TA
0023     0023        1     DATA      S2_BA
0024     0024        1     DATA      S3_TA
0025     0025        1     DATA      S3_BA
0026     0026        1     DATA      S4_TA
0027     0027        1     DATA      S4_BA
0028     0028        1     DATA      S5_TA
0029     0029        1     DATA      S5_BA
002A     002A        1     DATA      S6_TA
002B     002B        1     DATA      S6_BA
002C     002C        1     DATA      S7_TA
002D     002D        1     DATA      S7_BA
002E     002E        1     DATA      S8_TA
002F     002F        1     DATA      S8_BA
0030     0030        1     DATA      S9_TA
0031     0031        1     DATA      S9_BA
0032     0032        1     DATA      S10_TA
0033     0033        1     DATA      S10_BA
0034     0034        1     DATA      N1_TA
0035     0035        1     DATA      N1_BA
0036     0036        1     DATA      N2_TA
0037     0037        1     DATA      N2_BA
0038     0038        1     DATA      N3_TA
0039     0039        1     DATA      N3_BA
003A     003A        1     DATA      N4_TA
003B     003B        1     DATA      N4_BA
003C     003C        1     DATA      N5_TA
003D     003D        1     DATA      N5_BA
003E     003E        1     DATA      N6_TA
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer_white.asm  Page 59



003F     003F        1     DATA      N6_BA
0040     0040        1     DATA      OPC_1
0041     0041        1     DATA      OPC_2
0042     0042        1     DATA      OPC_3
0043     0043        1     DATA      ALPHA_L
0044     0044        1     DATA      ALPHA_R
0045     0045        1     DATA      ALPHA_T
0046     0046        1     DATA      OPC_4
0047     0047        1     DATA      OPC_5
0048     0048        1     DATA      OPC_6
0049     0049        1     DATA      OPC_7
004A     004A        1     DATA      OPC_REFL
004B     004B        1     DATA      OPC_RAD
004C     004C        1     DATA      NC_1
004D     004D        1     DATA      NC_2
004E     004E        1     DATA      NC_3
004F     004F        1     DATA      NC_4
0050     0050        1     DATA      NC_5
0051     0051        1     DATA      NC_REFL
0052     0052        1     DATA      NC_RAD
0053     0053        1     DATA      dma_empty_base
0054     0054        1     DATA      x_x0_save
0055     0055        1     DATA      x_r3_save
0056     0056        1     DATA      x_r4_save
0057     0057        1     DATA      x_r5_save
0058     0058        1     DATA      x_tnDelta
0059     0059        1     DATA      x_div1
005A     005A        1     DATA      x_div2
005B     005B        1     DATA      x_newDiv2
005C     005C        1     DATA      x_temp
005D     005D        1     DATA      x_tableCount
005E     005E        1     DATA      readPtr
005F     005F        1     DATA      x_FIR_size
0060     007F       32     UNUSED
0080     00BC       61     CONST 
00BD     43BF    17155     UNUSED
43C0     43FF       64     DATA      l_betaTable
4400     44FF      256     MOD       gp_wave_table
4500     4B7F     1664     DATA      filter_base
4B80     51FF     1664     DATA      filter_d_base
5200     53FF      512     MOD       src_buffer_base
5400     54FF      256     MOD       dsine_wave_table
5500     57FF      768     UNUSED
5800     5FFF     2048     MOD       dma_in_buffer
6000     FFFF    40960     UNUSED


Y Memory

Start    End     Length    Type      Label             Section           Overlay Address
0000     0000        1     DATA      DAMPING
0001     0001        1     DATA      PULSE_MODULATION
0002     0002        1     DATA      OSC_AMP
0003     0003        1     DATA      OSC_AMP_DELTA
0004     0004        1     DATA      ANTI_BREATHINESS
0005     0005        1     DATA      y_bp_xn1
0006     0006        1     DATA      y_bp_xn2
0007     0007        1     DATA      y_bp_yn1
0008     0008        1     DATA      y_bp_yn2
0009     0009        1     DATA      mRadiationX
000A     000A        1     DATA      mRadiationY
000B     000B        1     DATA      nRadiationX
000C     000C        1     DATA      nRadiationY
000D     000D        1     DATA      tb1
000E     000E        1     DATA      throatY
000F     000F        1     DATA      throatGain
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer_white.asm  Page 60



0010     0010        1     DATA      cr_count
0011     0011        1     DATA      left_shift
0012     0012        1     CONST     y_seed
0013     0013        1     CONST     y_factor
0014     0014        1     CONST     y_one
0015     0015        1     CONST     y_unity
0016     0016        1     CONST     y_max
0017     0017        1     DATA      BALANCE_R
0018     0018        1     DATA      BALANCE_L
0019     0019        1     DATA      crossmix
001A     001A        1     DATA      anti_crossmix
001B     001B        1     CONST     delta_mem
001C     001F        4     UNUSED
0020     0020        1     DATA      S1_TB
0021     0021        1     DATA      S1_BB
0022     0022        1     DATA      S2_TB
0023     0023        1     DATA      S2_BB
0024     0024        1     DATA      S3_TB
0025     0025        1     DATA      S3_BB
0026     0026        1     DATA      S4_TB
0027     0027        1     DATA      S4_BB
0028     0028        1     DATA      S5_TB
0029     0029        1     DATA      S5_BB
002A     002A        1     DATA      S6_TB
002B     002B        1     DATA      S6_BB
002C     002C        1     DATA      S7_TB
002D     002D        1     DATA      S7_BB
002E     002E        1     DATA      S8_TB
002F     002F        1     DATA      S8_BB
0030     0030        1     DATA      S9_TB
0031     0031        1     DATA      S9_BB
0032     0032        1     DATA      S10_TB
0033     0033        1     DATA      S10_BB
0034     0034        1     DATA      N1_TB
0035     0035        1     DATA      N1_BB
0036     0036        1     DATA      N2_TB
0037     0037        1     DATA      N2_BB
0038     0038        1     DATA      N3_TB
0039     0039        1     DATA      N3_BB
003A     003A        1     DATA      N4_TB
003B     003B        1     DATA      N4_BB
003C     003C        1     DATA      N5_TB
003D     003D        1     DATA      N5_BB
003E     003E        1     DATA      N6_TB
003F     003F        1     DATA      N6_BB
0040     0040        1     DATA      y_tap0
0041     0041        1     DATA      y_tap1
0042     0042        1     DATA      y_tap2
0043     0043        1     DATA      y_tap3
0044     0044        1     DATA      y_tap4
0045     0045        1     DATA      y_tap5
0046     0046        1     DATA      y_tap6
0047     0047        1     DATA      y_tap7
0048     0048        1     DATA      y_tapGuard
0049     0049        1     DATA      BREATHINESS
004A     004A        1     DATA      CROSSMIX_FACTOR
004B     004B        1     DATA      TP
004C     004C        1     DATA      TN_MIN
004D     004D        1     DATA      TN_MAX
004E     004E        1     DATA      endPtr
004F     004F        1     DATA      CONTROL_PERIOD
0050     0050        1     DATA      CONTROL_FACTOR
0051     0051        1     DATA      ASP_AMP
0052     0052        1     DATA      ta0
0053     0053        1     DATA      OPC_1_DELTA
0054     0054        1     DATA      OPC_2_DELTA
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-05-05  13:37:00  synthesizer_white.asm  Page 61



0055     0055        1     DATA      OPC_3_DELTA
0056     0056        1     DATA      ALPHA_L_DELTA
0057     0057        1     DATA      ALPHA_R_DELTA
0058     0058        1     DATA      ALPHA_T_DELTA
0059     0059        1     DATA      OPC_4_DELTA
005A     005A        1     DATA      OPC_5_DELTA
005B     005B        1     DATA      OPC_6_DELTA
005C     005C        1     DATA      OPC_7_DELTA
005D     005D        1     DATA      OPC_REFL_DELTA
005E     005E        1     DATA      OPC_RAD_DELTA
005F     005F        1     DATA      NC_1_DELTA
0060     007F       32     UNUSED
0080     00BC       61     CONST 
00BD     00BF        3     UNUSED
00C0     00FF       64     CONST 
0100     01FF      256     MOD       sine_wave_table
0200     3FFF    15872     UNUSED
4000     43FF     1024     MOD       dma_out_buffer
4400     FFFF    48128     UNUSED


L Memory

Start    End     Length    Type      Label             Section           Overlay Address
0000     001B       28     UNUSED
001C     001C        1     DATA      l_timeReg
001D     001D        1     DATA      l_timeRegInc
001E     001E        1     DATA      l_phaseInc
001F     001F        1     DATA      l_currentPhase
0020     00BE      159     UNUSED
00BF     00BF        1     DATA      l_a_save
00C0     00FF       64     MOD       l_FIR_base
0100     FFFF    65280     UNUSED


P Memory

Start    End     Length    Type      Label             Section           Overlay Address
0000     0001        2     CODE  
0002     0021       32     UNUSED
0022     0023        2     CODE  
0024     0025        2     CODE  
0026     0027        2     UNUSED
0028     0029        2     CODE  
002A     002B        2     UNUSED
002C     002D        2     CODE  
002E     002F        2     CODE  
0030     0031        2     CODE  
0032     0033        2     CODE  
0034     0035        2     CODE  
0036     0037        2     CODE  
0038     0039        2     CODE  
003A     01FA      449     CODE      main
01FB     3FFF    15877     UNUSED
4000     42C5      710     CODE      reset
42C6     FFFF    48442     UNUSED










