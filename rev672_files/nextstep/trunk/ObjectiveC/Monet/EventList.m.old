
#import "EventList.h"
#import <stdio.h>
#import <stdlib.h>
#import <string.h>
#import <mach/mach.h>
#import "RuleManager.h"
#import "Parameter.h"
#import "ProtoTemplate.h"
#import "ProtoEquation.h"
#import "Point.h"
#import "PhoneList.h"
#import "tube_module/synthesizer_module.h"
#import <dsp/dsp.h>
#import "driftGenerator.h"

/*===========================================================================


===========================================================================*/

#define PAGES 16

static char	*outputBuffer;
static int	currentInputBuffer, currentOutputBuffer;
static int	bufferFree[PAGES];
static int	currentIndex;

void update_synth_ptr(void)
{
int next_page;
static count;

//	printf("BufferFree[%d] = %d\n", currentOutputBuffer, bufferFree[currentOutputBuffer]);
	if (!bufferFree[currentOutputBuffer])
	{
//		printf("Sending out page %d\n", currentOutputBuffer);
		synth_read_ptr = outputBuffer+(currentOutputBuffer*vm_page_size);
		bufferFree[currentOutputBuffer] = 1;
		currentOutputBuffer = (currentOutputBuffer+1)%PAGES;
	}
}



@implementation EventList

#define IDLE 0
#define RUNNING 1


- init
{
kern_return_t ret;

	[super init];
	ret = vm_allocate(task_self(), (vm_address_t *)&outputBuffer,vm_page_size*PAGES, TRUE);
	if (ret!=KERN_SUCCESS)
	{
		printf("UGH!  Cannot vm_allocate\n");
		return self;

	}
	cache = 10000000;
	[self setUp];

	setDriftGenerator(1.0, 500.0, 1000.0);
	radiusMultiply = 1.0;
	return self;
}

- initCount:(unsigned int)numSlots
{
kern_return_t ret;

	[super initCount: numSlots];
	ret = vm_allocate(task_self(), (vm_address_t *)&outputBuffer,vm_page_size*PAGES, TRUE);
	if (ret!=KERN_SUCCESS)
	{
		printf("UGH!  Cannot vm_allocate\n");
		return self;

	}
	cache = 10000000;
	[self setUp];

	setDriftGenerator(1.0, 500.0, 1000.0);
	radiusMultiply = 1.0;

	return self;
}

- free
{
	vm_deallocate(task_self(), (vm_address_t)outputBuffer,vm_page_size*PAGES);
	[super free];
	return nil;
}


- setUp
{
int i;
	[self freeObjects];
	zeroRef = 0;
	zeroIndex = 0;
	duration = 0;
	timeQuantization = 2;
	globalTempo = 1.0;
	multiplier = 1.0;
	macroFlag = 0;
	microFlag = 0;
	driftFlag = 0;
	intonParms = NULL;

	/* set up buffer */
	bzero(outputBuffer, vm_page_size*PAGES);
	currentInputBuffer = currentOutputBuffer = 0;
	currentIndex = 0;
	for (i = 0; i<PAGES; i++)
		bufferFree[i] = 1;

	bzero(phones, MAXPHONES * sizeof (struct _phone));
	bzero(feet, MAXFEET * sizeof (struct _foot));
	bzero(toneGroups, MAXTONEGROUPS * sizeof (struct _toneGroup));

	bzero(rules, MAXRULES * sizeof (struct _rule));

	currentPhone = 0;
	currentFoot = 0;
	currentToneGroup = 0;

	currentRule = 0;

	phoneTempo[0] = 1.0;
	feet[0].tempo = 1.0;

	return self;
}

- setZeroRef: (int) newValue
{
int i;
	zeroRef = newValue;
	zeroIndex = 0;

	if (numElements == 0) 
		return self;

	for (i = numElements-1; i>=0 ;i--)
	{
//		printf("i = %d\n", i);
		if ([dataPtr[i] time] < newValue)
		{
			zeroIndex = i;
			return self;
		}
	}
	return self;
}

- (int) zeroRef
{
	return zeroRef;
}

- setDuration: (int) newValue
{
	duration = newValue;
	return self;
}

- (int) duration
{
	return duration;
}

- setRadiusMultiply: (double) newValue
{
	radiusMultiply = newValue;
	return self;
}

- (double) radiusMultiply
{
	return radiusMultiply;
}

- setFullTimeScale
{
	zeroRef = 0;
	zeroIndex = 0;
	duration = [dataPtr[numElements-1] time] + 100;
	return self;
}

- setTimeQuantization:(int) newValue
{
	timeQuantization = newValue;
	return self;
}

- (int) timeQuantization
{
	return timeQuantization;
}

- setParameterStore: (int) newValue
{
	parameterStore = newValue;
	return self;
}

- (int) parameterStore
{
	return parameterStore;
}

- setPitchMean:(double) newMean
{
	pitchMean = newMean;
	return self;
}

-(double) pitchMean
{
	return pitchMean;
}

- setGlobalTempo:(double) newTempo
{
	globalTempo = newTempo;
	return self;
}

-(double) globalTempo;
{
	return globalTempo;
}

- setMultiplier:(double) newValue
{
	multiplier = newValue;
	return self;
}

-(double) multiplier
{
	return multiplier;
}

- setMacroIntonation: (int) newValue
{
	macroFlag = newValue;
	return self;
}

-(int) macroIntonation
{
	return macroFlag;
}

- setMicroIntonation: (int) newValue
{
	microFlag = newValue;
	return self;
}

-(int) microIntonation
{
	return microFlag;
}

- setDrift: (int) newValue
{
	driftFlag = newValue;
	return self;
}

-(int) driftFlag
{
	return driftFlag;
}

- setIntonParms: (float *) newValue
{
	intonParms = newValue;
	return self;
}

-(float*) intonParms
{
	return intonParms;
}

- getPhoneAtIndex:(int) phoneIndex
{
	if (phoneIndex > currentPhone)
		return nil;
	else
		return phones[phoneIndex].phone;
}

- (struct _rule *) getRuleAtIndex: (int) ruleIndex
{
	if (ruleIndex > currentRule)
		return nil;
	else
		return &rules[ruleIndex];
}

- (double) getBeatAtIndex:(int) ruleIndex
{
	if (ruleIndex > currentRule)
		return 0.0;
	else
		return rules[ruleIndex].beat;
}

- (int) numberOfRules
{
	return currentRule;
}

/* Tone groups */

- newToneGroup
{
	if (currentFoot == 0)
		return self;

	toneGroups[currentToneGroup++].endFoot = currentFoot;
	[self newFoot];

	toneGroups[currentToneGroup].startFoot = currentFoot;
	toneGroups[currentToneGroup].endFoot = (-1);

	return self;
}

- setCurrentToneGroupType: (int) type
{
	toneGroups[currentToneGroup].type = type;
	return self;
}

/* Feet */

- newFoot
{
	if (currentPhone == 0)
		return self;

	feet[currentFoot++].end = currentPhone;
	[self newPhone];

	feet[currentFoot].start = currentPhone;
	feet[currentFoot].end = (-1);
	feet[currentFoot].tempo = 1.0;

	return self;
}

- setCurrentFootMarked
{
	feet[currentFoot].marked = 1;
	return self;	
}

- setCurrentFootLast
{
	feet[currentFoot].last = 1;
	return self;	
}

- setCurrentFootTempo:(double) tempo
{
	feet[currentFoot].tempo = tempo;
	return self;	
}

- newPhone
{
	if (phones[currentPhone].phone)
		currentPhone++;
	phoneTempo[currentPhone] = 1.0;
	return self;
}

- newPhoneWithObject: anObject
{
	if (phones[currentPhone].phone)
		currentPhone++;
	phoneTempo[currentPhone] = 1.0;
	phones[currentPhone].ruleTempo = 1.0;
	phones[currentPhone].phone = anObject;

	return self;
}

- setCurrentPhoneTempo:(double) tempo
{
	phoneTempo[currentPhone] = tempo;
	return self;	
}

- setCurrentPhoneRuleTempo:(float) tempo
{
	phones[currentPhone].ruleTempo = tempo;
	return self;
}

- setCurrentPhoneSyllable
{
	phones[currentPhone].syllable = 1;
	return self;
}

- insertEvent:(int) number atTime: (double) time withValue: (double) value
{
Event *tempEvent = nil;
int i, tempTime;

	time = time*multiplier;
	if (time < 0.0) 
		return nil;
	if (time > (double) (duration+timeQuantization))
		return nil;

	tempTime = zeroRef + (int) time;
	if ((tempTime%timeQuantization) !=0)
		tempTime++;


	if (numElements == 0)
	{
		tempEvent = [[Event alloc] init];
		[tempEvent setTime: tempTime];
		if (number>=0)
			if ((number>=7) && (number<=15))
			[tempEvent setValue: value*radiusMultiply ofIndex: number];
		else
			[tempEvent setValue: value ofIndex: number];

		[self addObject: tempEvent];
		return tempEvent;
	}

	for (i = numElements-1; i>=zeroIndex; i--)
	{
		if ([dataPtr[i] time]==tempTime)
		{
			if (number>=0)
				[dataPtr[i] setValue: value ofIndex: number];
			return dataPtr[i];
		}

		if ([dataPtr[i] time]< tempTime)
		{
			tempEvent = [[Event alloc] init];
			[tempEvent setTime: tempTime];
			if (number>=0)
				[tempEvent setValue: value ofIndex: number];

			[self insertObject:tempEvent at:i+1];
			return tempEvent;
		}
	}


	tempEvent = [[Event alloc] init];
	[tempEvent setTime: tempTime];
	if (number>=0)
		[tempEvent setValue: value ofIndex: number];

	[self insertObject: tempEvent at:i+1];
	return tempEvent;

//	return nil;
}

- finalEvent:(int) number withValue: (double) value
{
Event *tempEvent;

	tempEvent = dataPtr[numElements-1];
	[tempEvent setValue: value ofIndex: number];
	[tempEvent setFlag:1];

	return self;
}

- lastEvent
{
	return dataPtr[numElements-1];
}

- generateOutput
{
int i, j, k;
int synthStatus = IDLE;
int currentTime, nextTime;
double currentValues[33];
double currentDeltas[33];
double temp;
float table[16];
FILE *fp;
DSPFix24 *silenceTable;

	if (numElements==0)
		return self;
	if (parameterStore)
	{
		fp = fopen("/tmp/Monet.parameters", "w");
	}
	else
		fp = NULL;

	currentTime = 0;
	for (i = 0; i< 16; i++)
	{
		j = 1;
		while( ( temp = [dataPtr[j] getValueAtIndex:i]) == NaN) j++;
		currentValues[i] = [dataPtr[0] getValueAtIndex:i];
		currentDeltas[i] = ((temp - currentValues[i]) / (double) ([dataPtr[j] time])) * 2.0;
	}
	for(i = 16; i<32; i++)
		currentValues[i] = currentDeltas[i] = 0.0;

	j = 1;
	while( ( temp = [dataPtr[j] getValueAtIndex:32]) == NaN)
	{
		j++;
		if (j>=numElements) break;
	}
	currentValues[32] = [dataPtr[0] getValueAtIndex:32];
	if (j<numElements)
		currentDeltas[32] = ((temp - currentValues[32]) / (double) ([dataPtr[j] time])) * 2.0;
	else
		currentDeltas[32] = 0;
//	printf("Starting Values:\n");
//	for (i = 0; i<32; i++)
//		printf("%d;  cv: %f  cd: %f\n", i, currentValues[i], currentDeltas[i]);

	i = 1;
	currentTime = 0;
	nextTime = [dataPtr[1] time];
	while(i < numElements)
	{

		/* If buffer space is available, perform calculations */
		if (bufferFree[currentInputBuffer])
		{
			bzero(outputBuffer + (currentInputBuffer*vm_page_size), 8192);
			while(currentIndex<8192)
			{

				for(j = 0 ; j<16; j++)
				{
					table[j] = (float) currentValues[j] + (float) currentValues[j+16];
				}
				if (!microFlag)
					table[0] = 0.0;
				if (driftFlag)
					table[0] += drift();
				if (macroFlag)
					table[0] += currentValues[32];

				table[0]+=pitchMean;

				if (fp)
				fprintf(fp, 
				  "Time: %d; %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f\n", 
				  currentTime, table[0], table[1], table[2], table[3], 
				  table[4], table[5], table[6], table[7], 
				  table[8], table[9], table[10], table[11], 
				  table[12], table[13], table[14], table[15]);

				convert_parameter_table(table, outputBuffer + (currentInputBuffer*vm_page_size) + currentIndex);

				currentIndex+=128;

				for(j = 0 ; j<33; j++)
				{
					if (currentDeltas[j])
						currentValues[j] += currentDeltas[j];
				}

				currentTime+=2;

				if (currentTime>=nextTime)
				{
					i++;
					if (i==numElements)
						break;
					nextTime = [dataPtr[i] time];
					for (j = 0 ; j< 33; j++)
					{
						if ([dataPtr[i-1] getValueAtIndex:j] !=NaN)
						{
							k = i;
							while(( temp = [dataPtr[k] getValueAtIndex:j]) == NaN) 
							{
								if (k>=numElements-1)
								{
									currentDeltas[j] = 0.0;
									break;
								}
								k++;
							}

							if (temp!=NaN)
							{
								currentDeltas[j] = (temp - currentValues[j]) / 
									(double) ([dataPtr[k] time] - currentTime) * 2.0;
							}
						}
					}
				}
				if (i>=numElements) break;
			}

			if (i>=numElements) break;
			if (currentIndex >=8192)
			{
//				printf("Calculated page %d. ", currentInputBuffer);
				bufferFree[currentInputBuffer] = 0;
				currentIndex = 0;
				currentInputBuffer = (currentInputBuffer+1)%PAGES;
//				printf(" new page = %d\n", currentInputBuffer);
			}
		}
		if (synthStatus==IDLE)
			if(start_synthesizer()==ST_NO_ERROR)
				synthStatus = RUNNING;

		if (synthStatus == RUNNING)
			await_request_new_page(ST_NO, ST_NO, update_synth_ptr);
	}

	if (synthStatus==IDLE)
		if(start_synthesizer()==ST_NO_ERROR)
			synthStatus = RUNNING;

	if (currentIndex < 8192)
	{
		if (fp)
			fprintf(fp, "Start of Padding\n");
		silenceTable = new_dsp_pad_table();
		for(i = 0; i<16; i++)
			currentValues[i] = (double) DSPFix24ToFloat(silenceTable[i]);
		while(currentIndex<8192)
		{
			bcopy(silenceTable, outputBuffer + (currentInputBuffer*vm_page_size) + currentIndex, 128);
			currentIndex+=128;
			if (fp)
				fprintf(fp, 
				  "Time: %d; %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f\n", 
				  currentTime, currentValues[0], currentValues[1], currentValues[2], currentValues[3], 
				  currentValues[4], currentValues[5], currentValues[6], currentValues[7], 
				  currentValues[8], currentValues[9], currentValues[10], currentValues[11], 
				  currentValues[12], currentValues[13], currentValues[14], currentValues[15]);
			currentTime+=2;
		}
		if (fp)
			fprintf(fp, "End of Padding\n");
		bufferFree[currentInputBuffer] = 0;
		free(silenceTable);
//		printf("Finished Silencing page %d\n", currentInputBuffer);
	}


	while(!bufferFree[currentOutputBuffer])
	{
		if (bufferFree[(currentOutputBuffer+1)%PAGES])
			await_request_new_page(ST_YES, ST_YES, update_synth_ptr);
		else
			await_request_new_page(ST_NO, ST_NO, update_synth_ptr);
	}


	if (fp)
		fclose(fp);
	return self;

}

- printDataStructures
{
int i;
	printf("Tone Groups %d\n", currentToneGroup);
	for (i = 0; i<currentToneGroup;i++)
	{
		printf("%d  start: %d  end: %d  type: %d\n", i, toneGroups[i].startFoot, toneGroups[i].endFoot, 
			toneGroups[i].type);
	}

	printf("\nFeet %d\n", currentFoot);
	for (i = 0; i<currentFoot;i++)
	{
		printf("%d  tempo: %f start: %d  end: %d  marked: %d last: %d onset1: %f onset2: %f\n", i, feet[i].tempo,
			feet[i].start, feet[i].end, feet[i].marked, feet[i].last, feet[i].onset1, feet[i].onset2);
	}

	printf("\nPhones %d\n", currentPhone);
	for (i = 0; i<currentPhone;i++)
	{
		printf("%d  \"%s\" tempo: %f syllable: %d onset: %f ruleTempo: %f\n",
			 i, [phones[i].phone symbol], phoneTempo[i], phones[i].syllable, phones[i].onset, phones[i].ruleTempo);
	}

	printf("\nRules %d\n", currentRule);
	for (i = 0; i<currentRule;i++)
	{
		printf("Number: %d  start: %d  end: %d  duration %f\n", rules[i].number, rules[i].firstPhone, 
			rules[i].lastPhone, rules[i].duration);
	}


	return self;
}

- generateEventList
{
List *tempPhoneList, *tempCategoryList;
double tempoList[4];
double footTempo;
int index = 0, foot = 0;
int i, j;
int ruleIndex;
RuleList *ruleList = [(RuleManager *) NXGetNamedObject("ruleManager", NXApp) ruleList];
Rule *tempRule;
ParameterList *mainParameterList = (ParameterList *) NXGetNamedObject("mainParameterList", NXApp);
Parameter *tempParameter = nil;

	for(i = 0; i<16; i++)
	{
		tempParameter = [mainParameterList objectAt: i];

		min[i] = (double) [tempParameter minimum];
		max[i] = (double) [tempParameter maximum];
//		printf("Min: %f Max: %f\n", min[i], max[i]);
	}

	tempPhoneList = [[List alloc] initCount:4];
	tempCategoryList = [[List alloc] initCount:4];
	bzero(tempoList, sizeof(double)*4);

        for (i = 0; i<currentFoot;i++)
        {
		footTempo = globalTempo * feet[i].tempo;
		printf("Foot Tempo = %f\n", footTempo);
		for (j = feet[i].start; j<feet[i].end+1; j++)
		{
			phoneTempo[j]*=footTempo;
			if (phoneTempo[j]<0.2)
				phoneTempo[j] = 0.2;
			else
			if (phoneTempo[j]>2.0)
				phoneTempo[j] = 2.0;

//			printf("PhoneTempo[%d] = %f, teed[%d].tempo = %f\n", j, phoneTempo[j], i, feet[i].tempo);
		}
        }

	while(index<currentPhone-1)
	{
		[tempPhoneList empty];
		[tempCategoryList empty];
		i = index;
		for(j = 0; j<4; j++)
		{
			[tempPhoneList addObject: phones[j+i].phone];
			[tempCategoryList addObject: [phones[j+i].phone categoryList]];
		}
		tempRule = [ruleList findRule: tempCategoryList index: &ruleIndex];

		rules[currentRule].number = ruleIndex+1;

		[self applyRule: tempRule withPhones: tempPhoneList andTempos: &phoneTempo[i] phoneIndex: i+1 ];

		index+=[tempRule numberExpressions]-1;
	}

//	if (currentPhone)
//		[self applyIntonation];

	[dataPtr[numElements-1] setFlag:1];
	
	return self;
}

- applyRule: rule withPhones: phoneList andTempos: (double *) tempos phoneIndex: (int) phoneIndex;
{
int i, j, type, cont;
int currentType;
double currentDelta, value, maxValue;
double ruleSymbols[5], tempTime, targets[4];
ProtoTemplate *protoTemplate;
Point *currentPoint;
List *tempTargets, *points;
Event *tempEvent;

/* Debugging */
id tempProto = NXGetNamedObject("prototypeManager", NXApp);
char buffer[50];
int index1, index2;

	bzero(ruleSymbols, sizeof(double)*5);
	[rule evaluateExpressionSymbols: ruleSymbols tempos: tempos phones: phoneList withCache: (int) ++cache];

	multiplier = 1.0/(double) (phones[phoneIndex-1].ruleTempo);

	type = [rule numberExpressions];
	[self setDuration: (int) (ruleSymbols[0]*multiplier)];

	rules[currentRule].firstPhone = phoneIndex-1;
	rules[currentRule].lastPhone = phoneIndex-2+type;
	rules[currentRule].beat = ruleSymbols[1] + (double) zeroRef;
	rules[currentRule++].duration = ruleSymbols[0];

	switch(type)
	{
		/* Note: Case 4 should execute all of the below, case 3 the last two */
		case 4: phones[phoneIndex+2].onset = (double) zeroRef + ruleSymbols[1];
			tempEvent = [self insertEvent:(-1) atTime: ruleSymbols[3] withValue: 0.0 ];
			[tempEvent setFlag:1];
		case 3: phones[phoneIndex+1].onset = (double) zeroRef + ruleSymbols[1];
			tempEvent = [self insertEvent:(-1) atTime: ruleSymbols[2] withValue: 0.0 ];
			[tempEvent setFlag:1];
		case 2: 
			phones[phoneIndex].onset = (double) zeroRef + ruleSymbols[1];
			tempEvent = [self insertEvent:(-1) atTime: 0.0 withValue: 0.0 ];
			[tempEvent setFlag:1];
			break;
	}

	tempTargets = (List *) [rule parameterList];


	/* Loop through the parameters */
	for(i = 0; i< [tempTargets count]; i++)
	{
		/* Get actual parameter target values */
		targets[0] = [[[[phoneList objectAt: 0] parameterList] objectAt: i] value];
		targets[1] = [[[[phoneList objectAt: 1] parameterList] objectAt: i] value];
		targets[2] = [[[[phoneList objectAt: 2] parameterList] objectAt: i] value];
		targets[3] = [[[[phoneList objectAt: 3] parameterList] objectAt: i] value];

//	      printf("Targets %f %f %f %f\n", targets[0], targets[1], targets[2], targets[3]);

		/* Optimization, Don't calculate if no changes occur */
		cont = 1;
		switch(type)
		{
			case DIPHONE: 
				if (targets[0] == targets[1]) 
					cont = 0;
				break;
			case TRIPHONE: 
				if ((targets[0] == targets[1]) && (targets[0] == targets[2]))
					cont = 0;
				break;
			case TETRAPHONE: 
				if ((targets[0] == targets[1]) && (targets[0] == targets[2]) && (targets[0] == targets[3]))
					cont = 0;
				break;
		}

		if (cont)
		{
			currentType = DIPHONE;
			currentDelta = targets[1] - targets[0];

			/* Get transition profile list */
			protoTemplate = (ProtoTemplate *) [tempTargets objectAt: i];
			points = [protoTemplate points];

			maxValue = 0.0;

			/* Apply lists to parameter */
			for(j = 0; j<[points count]; j++)
			{
				currentPoint = [points objectAt:j];



				if ([currentPoint isKindOfClassNamed:"SlopeRatio"])
				{
					if ([[[currentPoint points] objectAt: 0] type]!=currentType)
					{
						currentType = [[[currentPoint points] objectAt:0] type];
						targets[currentType-2] = maxValue;
						currentDelta = targets[currentType-1] - (maxValue);
					}
				}
				else
				{
					if ([currentPoint type] != currentType)
					{
						currentType = [currentPoint type];
						targets[currentType-2] = maxValue;
						currentDelta = targets[currentType-1] - (maxValue);
					}

					/* insert event into event list */
//					tempEvent = [self insertEvent:i atTime: tempTime withValue: value];
				}
				maxValue = [currentPoint calculatePoints: ruleSymbols tempos: tempos phones: phoneList
					andCacheWith: cache baseline: targets[currentType-2] delta: currentDelta 
					min: min[i] max: max[i] toEventList: self atIndex: (int) i];
			}
		}
		else
		{
			tempEvent = [self insertEvent:i atTime: 0.0 withValue: targets[0] ];
//			[tempEvent setFlag:1];
		}
	}

	/* Special Event Profiles */
	for(i = 0; i<16; i++)
	{
		if (protoTemplate = [rule getSpecialProfile:i])
		{
			/* Get transition profile list */
			points = [protoTemplate points];

			for(j = 0; j<[points count]; j++)
			{
				currentPoint = [points objectAt:j];

				/* calculate time of event */
				if ([currentPoint expression]==nil)
					tempTime = [currentPoint freeTime];
				else
					tempTime = [ [ currentPoint expression] 
						evaluate: ruleSymbols tempos: tempos phones: phoneList andCacheWith: (int) cache];

				/* Calculate value of event */
//				value = (([currentPoint value]/100.0) * (max[i] - min[i])) + min[i];
				value = (([currentPoint value]/100.0) * (max[i] - min[i]));
				maxValue = value;

				/* insert event into event list */
				[self insertEvent:i+16 atTime: tempTime withValue: value];
			}
		}
	}

	[self setZeroRef: (int) (ruleSymbols[0]*multiplier) +  zeroRef];
	tempEvent = [self insertEvent:(-1) atTime: 0.0 withValue: 0.0 ];
	[tempEvent setFlag:1];

	return self;
}

- synthesizeToFile: (const char *) filename
{
	set_synthesizer_output(filename, getuid(), getgid(), 1);
	return self;
}

- applyIntonation
{
int tGroup=0;
int firstFoot, endFoot;
int tonicFoot;
int i,j;
id tempEvent;
float tempIntonParms[5] = {0.0, 0.0, -2.0, -8.0, -6.0};
double tonicTime, startTime, pretonicDelta;

	zeroRef = 0;
	zeroIndex = 0;
	duration = [dataPtr[numElements-1] time] + 100;

	if (!intonParms)
		intonParms = tempIntonParms;

	for (i = 0; i< currentFoot; i++)
	{
		for (j = feet[i].start; j< feet[i].end; j++)
		{
			if ((!feet[i].onset1) && (phones[j].onset))
				feet[i].onset1 = phones[j].onset;
			else
			if ((!feet[i].onset2) && (phones[j].onset))
			{
				if (feet[i].onset1!=phones[j].onset)
				{
					feet[i].onset2 = phones[j].onset;
					break;
				}
			}
		}
	}

	for (i = 0; i<currentToneGroup; i++)
	{
		firstFoot = toneGroups[i].startFoot;
		tonicFoot = endFoot = toneGroups[i].endFoot;
		for(j = endFoot; j>=firstFoot; j--)
			if (feet[j].marked)
			{
				tonicFoot = j;
				break;
			}
		startTime  = phones[firstFoot].onset;
		tonicTime = feet[tonicFoot].onset1 - startTime;
		pretonicDelta = (intonParms[1])/tonicTime;

		printf("Tfoot: %d TTime: %f Ftime: %f Tonic interval: %f   pretonicDelta: %f\n", tonicFoot,
			phones[tonicFoot].onset, phones[firstFoot].onset, tonicTime, pretonicDelta);

		/* Set up intonation boundary variables */
		for(j = firstFoot; j<=endFoot; j++)
		{
			/* Creeeeeky stuff! */
			if ((j == 0) && (!feet[j].marked))
			{
				printf("Creeky, %f\n", feet[0].onset1);
				tempEvent = [self insertEvent:32 atTime: 0 withValue: -10];
				tempEvent = [self insertEvent:32 atTime: feet[0].onset1 
					withValue: ((feet[0].onset1-startTime)*pretonicDelta)+intonParms[2] + intonParms[0]];
			}
			else
			/* Pretonic */
			if (!feet[j].marked)
			{
				printf("Lilt; %f;%f  %f;%f\n", feet[j].onset1, (feet[j].onset1*pretonicDelta) + intonParms[0],
					feet[j].onset2, ((feet[j].onset2-startTime)*pretonicDelta)+intonParms[2] + intonParms[0]);
				if (feet[j].onset1)
					tempEvent = [self insertEvent:32 atTime: feet[j].onset1 
						withValue: ((feet[j].onset1-startTime)*pretonicDelta) + intonParms[0]];
				if (feet[j].onset2)
					tempEvent = [self insertEvent:32 atTime: feet[j].onset2
						withValue: ((feet[j].onset2-startTime)*pretonicDelta)
							+intonParms[2] + intonParms[0]];
			}
			else
			/* Tonic */
			{
				printf("Tonic: %f  %f\n", feet[j].onset1, feet[j].onset2);
				if (feet[j].onset1)
					tempEvent = [self insertEvent:32 atTime: feet[j].onset1 
						withValue: intonParms[1] + intonParms[0]];
				if (feet[j].onset2)
					tempEvent = [self insertEvent:32 atTime: feet[j].onset2 
						withValue: intonParms[1] + intonParms[0] + intonParms[4]];

			}
		}
	}
	[self finalEvent: 32 withValue: intonParms[1] + intonParms[0] + intonParms[3] ];

	return self;
}


@end




/*			printf("%.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f\n", 
				currentValues[0], currentValues[1], currentValues[7], currentValues[8], 
				currentValues[9], currentValues[10], currentValues[11], currentValues[12], 
				currentValues[13], currentValues[14], currentValues[15], currentValues[2], 
				currentValues[3], currentValues[4], currentValues[5], currentValues[6]);*/
