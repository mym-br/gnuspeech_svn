Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 1



47                                 include 'synthesizer.asm'
60                       ;  REVISION INFORMATION ****************************************************************
61                       ;
62                       ;  $Author: rao $
63                       ;  $Date: 2002-03-21 16:49:48 $
64                       ;  $Revision: 1.1 $
65                       ;  $Source: /Users/dalmazio/cvsroot/gnuspeech/trillium/ObjectiveC/Monet/tube_module.old/synthesizer_black.lst,v $
66                       ;  $State: Exp $
67                       ;
68                       ;
69                       ;  $Log: not supported by cvs2svn $
82                       ;  Revision 1.7  1995/02/27  17:29:18  len
83                       ;  Added support for Intel MultiSound DSP.  Module now compiles FAT.
84                       ;
85                       ;  Revision 1.6  1994/11/02  04:46:49  len
86                       ;  Fixed a bug when loading utterance-rate parameters.
87                       ;
88                       ;  Revision 1.5  1994/10/21  01:33:36  len
89                       ;  Adjusted the output volume upwards, and made 1 channel output the same as
90                       ;  stereo output with the balance at 0.0.
91                       ;
92                       ;  Revision 1.4  1994/10/03  04:05:57  len
93                       ;  Optimized crossmix calculations, added linear interpolation to glottal
94                       ;  volume, and added (optional) linear interpolation to radii.
95                       ;
96                       ;  Revision 1.3  1994/09/19  18:50:47  len
97                       ;  Resectioned the TRM to have 10 sections in 8 regions.  Also changed
98                       ;  the frication to be continuous from sections 3 to 10.  Tube lengths
99                       ;  down to 15.8 cm are possible, with everything enabled.
100                      ;
101                      ;  Revision 1.2  1994/09/13  22:37:19  len
102                      ;  Fixed betaTable loading bug.
103                      ;
104                      ;  Revision 1.1.1.1  1994/09/06  21:45:50  len
105                      ;  Initial archive into CVS.
106                      ;
107                      ;
108                      ;***************************************************************************************
109                      ;
110                      ;  Program:     synthesizer.asm
111                      ;
112                      ;  Author:      Leonard Manzara
113                      ;
114                      ;  Date:        September 19th, 1994
115                      ;
116                      ;  Summary:     Optimized version of the 10 section Tube Resonanace Model Synthesizer.
117                      ;               This is the non-interactive version, for use in the synthesizer module
118                      ;               in the TTS_Server.  Tube lengths down to 15.8 cm are possible (with
119                      ;               everything enabled).
120                      ;
121                      ;              Copyright (C) by Trillium Sound Research Inc. 1994
122                      ;              All Rights Reserved
123                      ;
124                      ;***************************************************************************************
125    
126    
127                      ;***************************************************************************************
128                      ;  COMPILATION FLAGS
129                      ;***************************************************************************************
130    
131                      ;  THESE MUST MATCH THE FLAGS IN synthesizer_module.h
132       000001         OVERSAMPLE_OSC         set          1       ; 1 to use 2x oversampling oscillator
133       000001         VARIABLE_GP            set          1       ; 1 for variable shaped glottal pulse
134       000000         FIXED_CROSSMIX         set          0       ; 1 for fixed crossmix offset (60 dB)
135       000001         SYNC_DMA               set          1       ; 1 for synchronous dma output (instead of async)
136    
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 2



137                      ;  THESE FLAGS ARE USED FOR LOCAL EXPERIMENTATION AND DEBUGGING
138       000000         DEBUG_56               set          0       ; 1 for use with Bug56
139       000001         INTERP_RADII           set          1       ; 1 to enable sample-rate interpolation on radii
140       000000         RECALC_GP              set          0       ; 1 to enable control-rate recalc. of glottal pulse
141                                                                  ; (set to 0 if tnMin == tnMax)
142    
143    
360                      ;***************************************************************************************
361                      ;  ORIGINS FOR PROGRAM MEMORY
362                      ;***************************************************************************************
363    
364                                             IF           !DEBUG_56
365       00003A         ON_CHIP_PROGRAM_START  equ          $3A     ; moved onto hc vectors, so more p memory
366                                             ELSE
368                                             ENDIF
369    
370                                             IF           BLACK
371       002000         OFF_CHIP_PROGRAM_START equ          $2000
372                                             ENDIF
373                                             IF           MSOUND
375                                             ENDIF
376    
377    
378                      ;***************************************************************************************
379                      ;  INTERRUPT AND HOST COMMAND VECTORS
380                      ;***************************************************************************************
381    
382       000000         VEC_RESET              equ          $00     ; reset vector
383       000010         VEC_SSI_OUT            equ          $10     ; ssi transmit data vector
384       000012         VEC_SSI_OUT_EXC        equ          $12     ; ssi transmit data vector w/exception
385       000022         VEC_TRANSMIT_DATA      equ          $22     ; asynchronous dma-out vector
386       000024         VEC_DMA_OUT_DONE       equ          $24     ; host command: dma-out complete
387       000028         VEC_DMA_IN_DONE        equ          $28     ; host command: dma-in complete
388       00002C         VEC_DMA_IN_ACCEPTED    equ          $2C     ; host command: dma-in request accepted
389       00002E         VEC_START              equ          $2E     ; host command: start synthesizing
390       000030         VEC_STOP               equ          $30     ; host command: stop synthesizing
391       000032         VEC_LOAD_FIR_COEF      equ          $32     ; host command: load in FIR coefficients
392       000034         VEC_LOAD_SRC_COEF      equ          $34     ; host command: load in SRC coefs. & deltas
393       000036         VEC_LOAD_WAVETABLE     equ          $36     ; host command: load in wavetable
394       000038         VEC_LOAD_UR_DATA       equ          $38     ; host command: load in utterance-rate params.
395    
396    
397    
398                      ;***************************************************************************************
399                      ;  MACRO:       writeHost
400                      ;
401                      ;  Writes one word from the 'source' register to the host.
402                      ;
403                      ;  Parameters:  source
404                      ;***************************************************************************************
405    
406                      writeHost              macro        source
407  m                                          jclr         #m_htde,x:m_hsr,*
408  m                                          movep        source,x:m_htx
409  m                                          endm
410    
411    
412    
413                      ;***************************************************************************************
414                      ;  MACRO:       readHost
415                      ;
416                      ;  Reads one word from the host and puts it into the 'dest' register.
417                      ;
418                      ;  Parameters:  dest
419                      ;***************************************************************************************
420    
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 3



421                      readHost               macro        dest
422  m                                          jclr         #m_hrdf,x:m_hsr,*
423  m                                          movep        x:m_hrx,dest
424  m                                          endm
425    
426    
427    
428                      ;***************************************************************************************
429                      ;  MACRO:       shiftLeft
430                      ;
431                      ;  Simulates a bitwise shift left using multiplication, with the result in the lower
432                      ;  part of the accumulator.
433                      ;
434                      ;  Parameters:  s   = source register (x0,x1,y0,or y1)
435                      ;              m   = the multiplier register (x0,x1,y0,or y1)
436                      ;              n   = the number of bits to be shifted
437                      ;              acc = the destination accumulator (a or b)
438                      ;***************************************************************************************
439    
440                      shiftLeft              macro        s,m,n,acc
441  m                                          move         #>@cvi(@pow(2,n-1)),m
442  m                                          mpy          s,m,acc
443  m                                          endm
444    
445    
446    
447                      ;***************************************************************************************
448                      ;  MACRO:       dbToAmpTable
449                      ;
450                      ;  This macro creates a table of size+1 points in each of x and y memory.  X memory
451                      ;  is filled with the values to convert from dB to amplitude, for the range 0 to
452                      ;  max dB.  Y memory is filled with the delta between the x+1 value and the x value.
453                      ;  This allows efficient interpolation between x table values.  Note that the dB
454                      ;  values are actually made to range from -max to 0 dB (to permit correct calculation
455                      ;  using the power function), and that -max dB is set to 0.0, so that 0 dB actually
456                      ;  corresponds to an amplitude of 0 (and not some very small number).
457                      ;
458                      ;  Parameters:  size
459                      ;***************************************************************************************
460    
461                      dbToAmpTable           macro        size
462  m 
463  m                   ;  RECORD THE ORIGIN FROM THE CURRENT COUNTER VALUE
464  m                   origin                 set          @lcv(R)
465  m 
466  m                   ;  THE TABLE HAS max+1 ENTRIES
467  m                   max                    set          size
468  m 
469  m                   ;  CREATE THE dbToAmp CONVERSION VALUE FOR 0 TO max dB
470  m                                          org          x:origin
471  m                                          dc           0.0
472  m                   count                  set          1
473  m                                          dup          max
474  m                   value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
475  m                                          dc           value
476  m                   count                  set          count+1
477  m                                          endm
478  m 
479  m                   ;  CREATE THE DELTA VALUES BETWEEN ADJACENT X TABLE VALUES
480  m                                          org          y:origin
481  m                   value                  set          @min(@pow(10.0,@cvf(-max+1)/20.0),0.9999998)
482  m                                          dc           value
483  m                   count                  set          1
484  m                                          dup          max-1
485  m                   value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
486  m                   nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 4



487  m                   delta                  set          nvalue-value
488  m                                          dc           delta
489  m                   count                  set          count+1
490  m                                          endm
491  m                                          dc           0.0
492  m 
493  m                                          endm
494    
495    
496    
497                      ;***************************************************************************************
498                      ;  MACRO:       betaTable
499                      ;
500                      ;  This macro creates a table used to find the beta coefficient for a bandpass
501                      ;  filter.  The actual values for the function are put into Y memory.  The formula
502                      ;  for the beta function is:
503                      ;
504                      ;       beta = (0.5) * (1 - tan(bw_value)) / (2 * (1 + tan(bw_value)))
505                      ;
506                      ;  where bw_value is a number between 0 and PI (nyquist).
507                      ;
508                      ;  Parameters:  size
509                      ;***************************************************************************************
510    
511                      betaTable              macro        size
512  m 
513  m                   ;  RECORD THE ORIGIN FROM THE CURRENT COUNTER VALUE
514  m                   origin                 set          @lcv(R)
515  m 
516  m                   ;  SET PI
517  m                   PI                     set          3.141592653589793
518  m 
519  m                   ;  RECORD THE SIZE OF THE TABLE
520  m                   betaTableSize          set          size
521  m 
522  m                   ;  CALCULATE THE VALUES FOR THE TABLE FROM BEGINNING TO END
523  m                                          org          y:origin
524  m                   count                  set          0
525  m                                          dup          betaTableSize
526  m                   tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
527  m                   value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
528  m                                          dc           value
529  m                   count                  set          count+1
530  m                                          endm
531  m 
532  m                                          endm
533    
534    
535    
536                      ;***************************************************************************************
537                      ;  MISC. CONSTANTS
538                      ;***************************************************************************************
539    
540       0.789235       SEED                   equ          0.7892347 ; constants for noise generator
541       000179         FACTOR                 equ          377
542       000005         CROSSMIX_SCALE         equ          5       ; 2^5 = 32
543       000008         POSITION_SCALE         equ          8
544       0.031250       VT_SCALE               equ          @pow(2,-5.0)
545       000001         ONE                    equ          1
546       1.000000       UNITY                  equ          0.9999998
547       00FFFF         MAX                    equ          $00FFFF
548    
549    
550    
551                      ;***************************************************************************************
552                      ;  DMA MESSAGES
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 5



553                      ;***************************************************************************************
554    
555       050001         DMA_OUT_REQ            equ          $050001 ; message to host to request dma-OUT
556       040002         DMA_IN_REQ             equ          $040002 ; message to host to request dma-IN 
557    
558    
559    
560                      ;***************************************************************************************
561                      ;  STATUS FLAG BITS
562                      ;***************************************************************************************
563    
564       000000         DMA_OUT_DONE           equ          0       ; indicates dma-out is complete
565       000001         DMA_IN_DONE            equ          1       ; indicates dma-in is complete
566       000002         DMA_IN_ACCEPTED        equ          2       ; indicates dma-in accepted by host
567       000003         RUN_STATUS             equ          3       ; indicates if synth to run
568       000004         VT_BRANCH              equ          4       ; indicates which VT branch to take
569    
570    
571    
572                      ;***************************************************************************************
573                      ;  ON-CHIP LONG MEMORY
574                      ;  Long memory occupies both x and y memory, so no x or y variables
575                      ;  are allowed in this space.
576                      ;***************************************************************************************
577    
578       L:001C                                org          l:$001C
579       L:001C         l_timeReg              ds           1
580       L:001D         l_timeRegInc           ds           1
581       L:001E         l_phaseInc             ds           1
582       L:001F         l_currentPhase         ds           1
583    
584       L:0080                                org          l:$0080
585                      l_dbToAmpTable         dbToAmpTable 60      ; dB to amplitude conversion table
586   +
587   +                  ;  RECORD THE ORIGIN FROM THE CURRENT COUNTER VALUE
588   +   000080         origin                 set          @lcv(R)
589   +
590   +                  ;  THE TABLE HAS max+1 ENTRIES
591   +   00003C         max                    set          60
592   +
593   +                  ;  CREATE THE dbToAmp CONVERSION VALUE FOR 0 TO max dB
594   +   X:0080                                org          x:origin
595  d+   X:0080 000000                         dc           0.0
596   +   000001         count                  set          1
597   +                                         dup          max
598  m+                  value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
599  m+                                         dc           value
600  m+                  count                  set          count+1
601  m+                                         endm
602   +   0.001122       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
603  d+   X:0081 0024C4                         dc           value
604   +   000002         count                  set          count+1
605   +   0.001259       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
606  d+   X:0082 002941                         dc           value
607   +   000003         count                  set          count+1
608   +   0.001413       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
609  d+   X:0083 002E49                         dc           value
610   +   000004         count                  set          count+1
611   +   0.001585       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
612  d+   X:0084 0033EF                         dc           value
613   +   000005         count                  set          count+1
614   +   0.001778       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
615  d+   X:0085 003A45                         dc           value
616   +   000006         count                  set          count+1
617   +   0.001995       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
618  d+   X:0086 004161                         dc           value
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 6



619   +   000007         count                  set          count+1
620   +   0.002239       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
621  d+   X:0087 00495C                         dc           value
622   +   000008         count                  set          count+1
623   +   0.002512       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
624  d+   X:0088 00524F                         dc           value
625   +   000009         count                  set          count+1
626   +   0.002818       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
627  d+   X:0089 005C5A                         dc           value
628   +   00000A         count                  set          count+1
629   +   0.003162       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
630  d+   X:008A 00679F                         dc           value
631   +   00000B         count                  set          count+1
632   +   0.003548       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
633  d+   X:008B 007444                         dc           value
634   +   00000C         count                  set          count+1
635   +   0.003981       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
636  d+   X:008C 008274                         dc           value
637   +   00000D         count                  set          count+1
638   +   0.004467       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
639  d+   X:008D 00925F                         dc           value
640   +   00000E         count                  set          count+1
641   +   0.005012       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
642  d+   X:008E 00A43B                         dc           value
643   +   00000F         count                  set          count+1
644   +   0.005623       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
645  d+   X:008F 00B845                         dc           value
646   +   000010         count                  set          count+1
647   +   0.006310       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
648  d+   X:0090 00CEC1                         dc           value
649   +   000011         count                  set          count+1
650   +   0.007079       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
651  d+   X:0091 00E7FB                         dc           value
652   +   000012         count                  set          count+1
653   +   0.007943       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
654  d+   X:0092 010449                         dc           value
655   +   000013         count                  set          count+1
656   +   0.008913       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
657  d+   X:0093 01240C                         dc           value
658   +   000014         count                  set          count+1
659   +   0.010000       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
660  d+   X:0094 0147AE                         dc           value
661   +   000015         count                  set          count+1
662   +   0.011220       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
663  d+   X:0095 016FAA                         dc           value
664   +   000016         count                  set          count+1
665   +   0.012589       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
666  d+   X:0096 019C86                         dc           value
667   +   000017         count                  set          count+1
668   +   0.014125       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
669  d+   X:0097 01CEDC                         dc           value
670   +   000018         count                  set          count+1
671   +   0.015849       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
672  d+   X:0098 020756                         dc           value
673   +   000019         count                  set          count+1
674   +   0.017783       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
675  d+   X:0099 0246B5                         dc           value
676   +   00001A         count                  set          count+1
677   +   0.019953       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
678  d+   X:009A 028DCF                         dc           value
679   +   00001B         count                  set          count+1
680   +   0.022387       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
681  d+   X:009B 02DD96                         dc           value
682   +   00001C         count                  set          count+1
683   +   0.025119       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
684  d+   X:009C 033718                         dc           value
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 7



685   +   00001D         count                  set          count+1
686   +   0.028184       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
687  d+   X:009D 039B87                         dc           value
688   +   00001E         count                  set          count+1
689   +   0.031623       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
690  d+   X:009E 040C37                         dc           value
691   +   00001F         count                  set          count+1
692   +   0.035481       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
693  d+   X:009F 048AA7                         dc           value
694   +   000020         count                  set          count+1
695   +   0.039811       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
696  d+   X:00A0 051884                         dc           value
697   +   000021         count                  set          count+1
698   +   0.044668       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
699  d+   X:00A1 05B7B1                         dc           value
700   +   000022         count                  set          count+1
701   +   0.050119       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
702  d+   X:00A2 066A4A                         dc           value
703   +   000023         count                  set          count+1
704   +   0.056234       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
705  d+   X:00A3 0732AE                         dc           value
706   +   000024         count                  set          count+1
707   +   0.063096       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
708  d+   X:00A4 081385                         dc           value
709   +   000025         count                  set          count+1
710   +   0.070795       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
711  d+   X:00A5 090FCC                         dc           value
712   +   000026         count                  set          count+1
713   +   0.079433       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
714  d+   X:00A6 0A2ADB                         dc           value
715   +   000027         count                  set          count+1
716   +   0.089125       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
717  d+   X:00A7 0B6873                         dc           value
718   +   000028         count                  set          count+1
719   +   0.100000       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
720  d+   X:00A8 0CCCCD                         dc           value
721   +   000029         count                  set          count+1
722   +   0.112202       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
723  d+   X:00A9 0E5CA1                         dc           value
724   +   00002A         count                  set          count+1
725   +   0.125893       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
726  d+   X:00AA 101D3F                         dc           value
727   +   00002B         count                  set          count+1
728   +   0.141254       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
729  d+   X:00AB 12149A                         dc           value
730   +   00002C         count                  set          count+1
731   +   0.158489       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
732  d+   X:00AC 144961                         dc           value
733   +   00002D         count                  set          count+1
734   +   0.177828       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
735  d+   X:00AD 16C311                         dc           value
736   +   00002E         count                  set          count+1
737   +   0.199526       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
738  d+   X:00AE 198A13                         dc           value
739   +   00002F         count                  set          count+1
740   +   0.223872       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
741  d+   X:00AF 1CA7D7                         dc           value
742   +   000030         count                  set          count+1
743   +   0.251189       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
744  d+   X:00B0 2026F3                         dc           value
745   +   000031         count                  set          count+1
746   +   0.281838       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
747  d+   X:00B1 241347                         dc           value
748   +   000032         count                  set          count+1
749   +   0.316228       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
750  d+   X:00B2 287A27                         dc           value
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 8



751   +   000033         count                  set          count+1
752   +   0.354813       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
753  d+   X:00B3 2D6A86                         dc           value
754   +   000034         count                  set          count+1
755   +   0.398107       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
756  d+   X:00B4 32F52D                         dc           value
757   +   000035         count                  set          count+1
758   +   0.446684       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
759  d+   X:00B5 392CEE                         dc           value
760   +   000036         count                  set          count+1
761   +   0.501187       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
762  d+   X:00B6 4026E7                         dc           value
763   +   000037         count                  set          count+1
764   +   0.562341       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
765  d+   X:00B7 47FACD                         dc           value
766   +   000038         count                  set          count+1
767   +   0.630957       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
768  d+   X:00B8 50C336                         dc           value
769   +   000039         count                  set          count+1
770   +   0.707946       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
771  d+   X:00B9 5A9DF8                         dc           value
772   +   00003A         count                  set          count+1
773   +   0.794328       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
774  d+   X:00BA 65AC8C                         dc           value
775   +   00003B         count                  set          count+1
776   +   0.891251       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
777  d+   X:00BB 721483                         dc           value
778   +   00003C         count                  set          count+1
779   +   1.000000       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
780  d+   X:00BC 7FFFFE                         dc           value
781   +   00003D         count                  set          count+1
782   +
783   +                  ;  CREATE THE DELTA VALUES BETWEEN ADJACENT X TABLE VALUES
784   +   Y:0080                                org          y:origin
785   +   0.001122       value                  set          @min(@pow(10.0,@cvf(-max+1)/20.0),0.9999998)
786  d+   Y:0080 0024C4                         dc           value
787   +   000001         count                  set          1
788   +                                         dup          max-1
789  m+                  value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
790  m+                  nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
791  m+                  delta                  set          nvalue-value
792  m+                                         dc           delta
793  m+                  count                  set          count+1
794  m+                                         endm
795   +   0.001122       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
796   +   0.001259       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
797   +   0.000137       delta                  set          nvalue-value
798  d+   Y:0081 00047C                         dc           delta
799   +   000002         count                  set          count+1
800   +   0.001259       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
801   +   0.001413       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
802   +   0.000154       delta                  set          nvalue-value
803  d+   Y:0082 000509                         dc           delta
804   +   000003         count                  set          count+1
805   +   0.001413       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
806   +   0.001585       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
807   +   0.000172       delta                  set          nvalue-value
808  d+   Y:0083 0005A6                         dc           delta
809   +   000004         count                  set          count+1
810   +   0.001585       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
811   +   0.001778       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
812   +   0.000193       delta                  set          nvalue-value
813  d+   Y:0084 000656                         dc           delta
814   +   000005         count                  set          count+1
815   +   0.001778       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
816   +   0.001995       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 9



817   +   0.000217       delta                  set          nvalue-value
818  d+   Y:0085 00071C                         dc           delta
819   +   000006         count                  set          count+1
820   +   0.001995       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
821   +   0.002239       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
822   +   0.000243       delta                  set          nvalue-value
823  d+   Y:0086 0007FA                         dc           delta
824   +   000007         count                  set          count+1
825   +   0.002239       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
826   +   0.002512       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
827   +   0.000273       delta                  set          nvalue-value
828  d+   Y:0087 0008F3                         dc           delta
829   +   000008         count                  set          count+1
830   +   0.002512       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
831   +   0.002818       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
832   +   0.000306       delta                  set          nvalue-value
833  d+   Y:0088 000A0B                         dc           delta
834   +   000009         count                  set          count+1
835   +   0.002818       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
836   +   0.003162       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
837   +   0.000344       delta                  set          nvalue-value
838  d+   Y:0089 000B45                         dc           delta
839   +   00000A         count                  set          count+1
840   +   0.003162       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
841   +   0.003548       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
842   +   0.000386       delta                  set          nvalue-value
843  d+   Y:008A 000CA5                         dc           delta
844   +   00000B         count                  set          count+1
845   +   0.003548       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
846   +   0.003981       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
847   +   0.000433       delta                  set          nvalue-value
848  d+   Y:008B 000E30                         dc           delta
849   +   00000C         count                  set          count+1
850   +   0.003981       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
851   +   0.004467       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
852   +   0.000486       delta                  set          nvalue-value
853  d+   Y:008C 000FEB                         dc           delta
854   +   00000D         count                  set          count+1
855   +   0.004467       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
856   +   0.005012       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
857   +   0.000545       delta                  set          nvalue-value
858  d+   Y:008D 0011DC                         dc           delta
859   +   00000E         count                  set          count+1
860   +   0.005012       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
861   +   0.005623       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
862   +   0.000612       delta                  set          nvalue-value
863  d+   Y:008E 00140A                         dc           delta
864   +   00000F         count                  set          count+1
865   +   0.005623       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
866   +   0.006310       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
867   +   0.000686       delta                  set          nvalue-value
868  d+   Y:008F 00167C                         dc           delta
869   +   000010         count                  set          count+1
870   +   0.006310       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
871   +   0.007079       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
872   +   0.000770       delta                  set          nvalue-value
873  d+   Y:0090 00193A                         dc           delta
874   +   000011         count                  set          count+1
875   +   0.007079       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
876   +   0.007943       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
877   +   0.000864       delta                  set          nvalue-value
878  d+   Y:0091 001C4E                         dc           delta
879   +   000012         count                  set          count+1
880   +   0.007943       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
881   +   0.008913       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
882   +   0.000969       delta                  set          nvalue-value
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 10



883  d+   Y:0092 001FC2                         dc           delta
884   +   000013         count                  set          count+1
885   +   0.008913       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
886   +   0.010000       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
887   +   0.001087       delta                  set          nvalue-value
888  d+   Y:0093 0023A3                         dc           delta
889   +   000014         count                  set          count+1
890   +   0.010000       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
891   +   0.011220       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
892   +   0.001220       delta                  set          nvalue-value
893  d+   Y:0094 0027FC                         dc           delta
894   +   000015         count                  set          count+1
895   +   0.011220       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
896   +   0.012589       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
897   +   0.001369       delta                  set          nvalue-value
898  d+   Y:0095 002CDD                         dc           delta
899   +   000016         count                  set          count+1
900   +   0.012589       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
901   +   0.014125       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
902   +   0.001536       delta                  set          nvalue-value
903  d+   Y:0096 003256                         dc           delta
904   +   000017         count                  set          count+1
905   +   0.014125       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
906   +   0.015849       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
907   +   0.001724       delta                  set          nvalue-value
908  d+   Y:0097 00387A                         dc           delta
909   +   000018         count                  set          count+1
910   +   0.015849       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
911   +   0.017783       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
912   +   0.001934       delta                  set          nvalue-value
913  d+   Y:0098 003F5E                         dc           delta
914   +   000019         count                  set          count+1
915   +   0.017783       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
916   +   0.019953       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
917   +   0.002170       delta                  set          nvalue-value
918  d+   Y:0099 00471A                         dc           delta
919   +   00001A         count                  set          count+1
920   +   0.019953       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
921   +   0.022387       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
922   +   0.002435       delta                  set          nvalue-value
923  d+   Y:009A 004FC7                         dc           delta
924   +   00001B         count                  set          count+1
925   +   0.022387       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
926   +   0.025119       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
927   +   0.002732       delta                  set          nvalue-value
928  d+   Y:009B 005983                         dc           delta
929   +   00001C         count                  set          count+1
930   +   0.025119       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
931   +   0.028184       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
932   +   0.003065       delta                  set          nvalue-value
933  d+   Y:009C 00646F                         dc           delta
934   +   00001D         count                  set          count+1
935   +   0.028184       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
936   +   0.031623       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
937   +   0.003439       delta                  set          nvalue-value
938  d+   Y:009D 0070B0                         dc           delta
939   +   00001E         count                  set          count+1
940   +   0.031623       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
941   +   0.035481       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
942   +   0.003859       delta                  set          nvalue-value
943  d+   Y:009E 007E70                         dc           delta
944   +   00001F         count                  set          count+1
945   +   0.035481       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
946   +   0.039811       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
947   +   0.004329       delta                  set          nvalue-value
948  d+   Y:009F 008DDD                         dc           delta
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 11



949   +   000020         count                  set          count+1
950   +   0.039811       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
951   +   0.044668       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
952   +   0.004858       delta                  set          nvalue-value
953  d+   Y:00A0 009F2D                         dc           delta
954   +   000021         count                  set          count+1
955   +   0.044668       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
956   +   0.050119       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
957   +   0.005450       delta                  set          nvalue-value
958  d+   Y:00A1 00B299                         dc           delta
959   +   000022         count                  set          count+1
960   +   0.050119       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
961   +   0.056234       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
962   +   0.006115       delta                  set          nvalue-value
963  d+   Y:00A2 00C864                         dc           delta
964   +   000023         count                  set          count+1
965   +   0.056234       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
966   +   0.063096       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
967   +   0.006862       delta                  set          nvalue-value
968  d+   Y:00A3 00E0D7                         dc           delta
969   +   000024         count                  set          count+1
970   +   0.063096       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
971   +   0.070795       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
972   +   0.007699       delta                  set          nvalue-value
973  d+   Y:00A4 00FC47                         dc           delta
974   +   000025         count                  set          count+1
975   +   0.070795       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
976   +   0.079433       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
977   +   0.008638       delta                  set          nvalue-value
978  d+   Y:00A5 011B0F                         dc           delta
979   +   000026         count                  set          count+1
980   +   0.079433       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
981   +   0.089125       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
982   +   0.009692       delta                  set          nvalue-value
983  d+   Y:00A6 013D99                         dc           delta
984   +   000027         count                  set          count+1
985   +   0.089125       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
986   +   0.100000       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
987   +   0.010875       delta                  set          nvalue-value
988  d+   Y:00A7 016459                         dc           delta
989   +   000028         count                  set          count+1
990   +   0.100000       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
991   +   0.112202       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
992   +   0.012202       delta                  set          nvalue-value
993  d+   Y:00A8 018FD4                         dc           delta
994   +   000029         count                  set          count+1
995   +   0.112202       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
996   +   0.125893       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
997   +   0.013691       delta                  set          nvalue-value
998  d+   Y:00A9 01C09E                         dc           delta
999   +   00002A         count                  set          count+1
1000  +   0.125893       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1001  +   0.141254       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1002  +   0.015361       delta                  set          nvalue-value
1003 d+   Y:00AA 01F75B                         dc           delta
1004  +   00002B         count                  set          count+1
1005  +   0.141254       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1006  +   0.158489       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1007  +   0.017236       delta                  set          nvalue-value
1008 d+   Y:00AB 0234C6                         dc           delta
1009  +   00002C         count                  set          count+1
1010  +   0.158489       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1011  +   0.177828       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1012  +   0.019339       delta                  set          nvalue-value
1013 d+   Y:00AC 0279B0                         dc           delta
1014  +   00002D         count                  set          count+1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 12



1015  +   0.177828       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1016  +   0.199526       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1017  +   0.021698       delta                  set          nvalue-value
1018 d+   Y:00AD 02C702                         dc           delta
1019  +   00002E         count                  set          count+1
1020  +   0.199526       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1021  +   0.223872       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1022  +   0.024346       delta                  set          nvalue-value
1023 d+   Y:00AE 031DC4                         dc           delta
1024  +   00002F         count                  set          count+1
1025  +   0.223872       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1026  +   0.251189       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1027  +   0.027317       delta                  set          nvalue-value
1028 d+   Y:00AF 037F1C                         dc           delta
1029  +   000030         count                  set          count+1
1030  +   0.251189       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1031  +   0.281838       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1032  +   0.030650       delta                  set          nvalue-value
1033 d+   Y:00B0 03EC54                         dc           delta
1034  +   000031         count                  set          count+1
1035  +   0.281838       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1036  +   0.316228       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1037  +   0.034389       delta                  set          nvalue-value
1038 d+   Y:00B1 0466E0                         dc           delta
1039  +   000032         count                  set          count+1
1040  +   0.316228       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1041  +   0.354813       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1042  +   0.038586       delta                  set          nvalue-value
1043 d+   Y:00B2 04F060                         dc           delta
1044  +   000033         count                  set          count+1
1045  +   0.354813       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1046  +   0.398107       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1047  +   0.043294       delta                  set          nvalue-value
1048 d+   Y:00B3 058AA7                         dc           delta
1049  +   000034         count                  set          count+1
1050  +   0.398107       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1051  +   0.446684       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1052  +   0.048576       delta                  set          nvalue-value
1053 d+   Y:00B4 0637C1                         dc           delta
1054  +   000035         count                  set          count+1
1055  +   0.446684       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1056  +   0.501187       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1057  +   0.054504       delta                  set          nvalue-value
1058 d+   Y:00B5 06F9FA                         dc           delta
1059  +   000036         count                  set          count+1
1060  +   0.501187       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1061  +   0.562341       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1062  +   0.061154       delta                  set          nvalue-value
1063 d+   Y:00B6 07D3E6                         dc           delta
1064  +   000037         count                  set          count+1
1065  +   0.562341       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1066  +   0.630957       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1067  +   0.068616       delta                  set          nvalue-value
1068 d+   Y:00B7 08C869                         dc           delta
1069  +   000038         count                  set          count+1
1070  +   0.630957       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1071  +   0.707946       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1072  +   0.076988       delta                  set          nvalue-value
1073 d+   Y:00B8 09DAC2                         dc           delta
1074  +   000039         count                  set          count+1
1075  +   0.707946       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1076  +   0.794328       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1077  +   0.086382       delta                  set          nvalue-value
1078 d+   Y:00B9 0B0E95                         dc           delta
1079  +   00003A         count                  set          count+1
1080  +   0.794328       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 13



1081  +   0.891251       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1082  +   0.096923       delta                  set          nvalue-value
1083 d+   Y:00BA 0C67F7                         dc           delta
1084  +   00003B         count                  set          count+1
1085  +   0.891251       value                  set          @min(@pow(10.0,@cvf(count-max)/20.0),0.9999998)
1086  +   1.000000       nvalue                 set          @min(@pow(10.0,@cvf(count-max+1)/20.0),0.9999998)
1087  +   0.108749       delta                  set          nvalue-value
1088 d+   Y:00BB 0DEB7C                         dc           delta
1089  +   00003C         count                  set          count+1
1090 d+   Y:00BC 000000                         dc           0.0
1091  +
1092   
1093      L:00BF                                org          l:$00BF
1094      L:00BF         l_a_save               ds           1       ;  fits at end of dbToAmpTable
1095   
1096      L:00C0                                org          l:$00C0
1097      L:00C0         l_FIR_base             dsm          64      ; memory for the oscillator FIR filter
1098      0000C0         temp_betaTable         equ          l_FIR_base ; FIR memory is used temporarily to
1099                                                                 ; store the betaTable when loading
1100   
1101   
1102                     ;***************************************************************************************
1103                     ;  ON-CHIP X MEMORY
1104                     ;***************************************************************************************
1105   
1106      X:0000                                org          x:$0000
1107      X:0000         x_STATUS_flags         ds           1       ; status flags (use $00 for use with jset)
1108      X:0001         x_ngs_signal           ds           1
1109      X:0002         x_lpn_signal           ds           1
1110      000002         x_fric_sig             equ          x_lpn_signal ; fric signal uses lpn to save space
1111   
1112      X:0003         x_FIR_mod              ds           1
1113      X:0004         FIR_x_ptr              ds           1
1114      X:0005         FIR_y_ptr              ds           1
1115      X:0006         x_tableMod             ds           1
1116   
1117      X:0007         ALPHA                  ds           1
1118      X:0008         BETA                   ds           1
1119      X:0009         GAMMA                  ds           1
1120   
1121      X:000A         fa10                   ds           1
1122      X:000B         fb11                   ds           1
1123      X:000C         fa20                   ds           1
1124      X:000D         fa21                   ds           1
1125      X:000E         fb21                   ds           1
1126   
1127      X:000F         x_temp2                ds           1
1128   
1129      X:0010         nfa10                  ds           1
1130      X:0011         nfb11                  ds           1
1131      X:0012         nfa20                  ds           1
1132      X:0013         nfa21                  ds           1
1133      X:0014         nfb21                  ds           1
1134   
1135      X:0015         dma_fill_base          ds           1
1136 d    X:0016 00003F  mask_l                 dc           L_MASK
1137 d    X:0017 000680  base_diff              dc           BASE_DIFF
1138 d    X:0018 002500  fbase_addr             dc           filter_base
1139      X:0019         vtScale                ds           1
1140 d    X:001A 000040  coeff_mem              dc           OPC_1
1141 d    X:001B 000040  tap_mem                dc           y_tap0
1142   
1143   
1144                     ;  TUBE MEMORY
1145      X:0020                                org          x:$0020
1146      X:0020         S1_TA                  ds           1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 14



1147      X:0021         S1_BA                  ds           1
1148      X:0022         S2_TA                  ds           1
1149      X:0023         S2_BA                  ds           1
1150      X:0024         S3_TA                  ds           1
1151      X:0025         S3_BA                  ds           1
1152      X:0026         S4_TA                  ds           1
1153      X:0027         S4_BA                  ds           1
1154      X:0028         S5_TA                  ds           1
1155      X:0029         S5_BA                  ds           1
1156      X:002A         S6_TA                  ds           1
1157      X:002B         S6_BA                  ds           1
1158      X:002C         S7_TA                  ds           1
1159      X:002D         S7_BA                  ds           1
1160      X:002E         S8_TA                  ds           1
1161      X:002F         S8_BA                  ds           1
1162      X:0030         S9_TA                  ds           1
1163      X:0031         S9_BA                  ds           1
1164      X:0032         S10_TA                 ds           1
1165      X:0033         S10_BA                 ds           1
1166      X:0034         N1_TA                  ds           1
1167      X:0035         N1_BA                  ds           1
1168      X:0036         N2_TA                  ds           1
1169      X:0037         N2_BA                  ds           1
1170      X:0038         N3_TA                  ds           1
1171      X:0039         N3_BA                  ds           1
1172      X:003A         N4_TA                  ds           1
1173      X:003B         N4_BA                  ds           1
1174      X:003C         N5_TA                  ds           1
1175      X:003D         N5_BA                  ds           1
1176      X:003E         N6_TA                  ds           1
1177      X:003F         N6_BA                  ds           1
1178   
1179   
1180      X:0040                                org          x:$0040
1181                     ;  SCATTERING JUNCTION COEFFICIENTS:  MUST BE CONTIGUOUS MEMORY
1182      X:0040         OPC_1                  ds           1       ; control-rate scattering coefficients
1183      X:0041         OPC_2                  ds           1
1184      X:0042         OPC_3                  ds           1
1185      X:0043         ALPHA_L                ds           1
1186      X:0044         ALPHA_R                ds           1
1187      X:0045         ALPHA_T                ds           1
1188      X:0046         OPC_4                  ds           1
1189      X:0047         OPC_5                  ds           1
1190      X:0048         OPC_6                  ds           1
1191      X:0049         OPC_7                  ds           1
1192      X:004A         OPC_REFL               ds           1
1193      X:004B         OPC_RAD                ds           1
1194      X:004C         NC_1                   ds           1
1195   
1196      X:004D         NC_2                   ds           1       ; utterance-rate scattering coefficients
1197      X:004E         NC_3                   ds           1
1198      X:004F         NC_4                   ds           1
1199      X:0050         NC_5                   ds           1
1200      X:0051         NC_REFL                ds           1
1201      X:0052         NC_RAD                 ds           1
1202   
1203   
1204                     ;  MISC VARIABLES
1205      X:0053         dma_empty_base         ds           1
1206      X:0054         x_x0_save              ds           1
1207      X:0055         x_r3_save              ds           1
1208      X:0056         x_r4_save              ds           1
1209      X:0057         x_r5_save              ds           1
1210      X:0058         x_tnDelta              ds           1
1211      X:0059         x_div1                 ds           1
1212      X:005A         x_div2                 ds           1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 15



1213      X:005B         x_newDiv2              ds           1
1214      X:005C         x_temp                 ds           1
1215      X:005D         x_tableCount           ds           1
1216      X:005E         readPtr                ds           1
1217      X:005F         x_FIR_size             ds           1
1218   
1219   
1220   
1221                     ;***************************************************************************************
1222                     ;  ON-CHIP Y MEMORY
1223                     ;***************************************************************************************
1224   
1225      Y:0000                                org          y:$0000
1226      Y:0000         DAMPING                ds           1
1227      Y:0001         PULSE_MODULATION       ds           1
1228   
1229      Y:0002         OSC_AMP                ds           1
1230      Y:0003         OSC_AMP_DELTA          ds           1
1231      Y:0004         ANTI_BREATHINESS       ds           1
1232   
1233      Y:0005         y_bp_xn1               ds           1
1234      Y:0006         y_bp_xn2               ds           1
1235      Y:0007         y_bp_yn1               ds           1
1236      Y:0008         y_bp_yn2               ds           1
1237   
1238      Y:0009         mRadiationX            ds           1
1239      Y:000A         mRadiationY            ds           1
1240      Y:000B         nRadiationX            ds           1
1241      Y:000C         nRadiationY            ds           1
1242   
1243   
1244      Y:000D         tb1                    ds           1
1245      Y:000E         throatY                ds           1
1246      Y:000F         throatGain             ds           1
1247   
1248      Y:0010         cr_count               ds           1
1249      Y:0011         left_shift             ds           1
1250   
1251 d    Y:0012 6505A5  y_seed                 dc           SEED
1252 d    Y:0013 000179  y_factor               dc           FACTOR
1253 d    Y:0014 000001  y_one                  dc           ONE
1254 d    Y:0015 7FFFFE  y_unity                dc           UNITY
1255 d    Y:0016 00FFFF  y_max                  dc           MAX
1256   
1257      Y:0017         BALANCE_R              ds           1
1258      Y:0018         BALANCE_L              ds           1
1259   
1260      Y:0019         crossmix               ds           1
1261      Y:001A         anti_crossmix          ds           1
1262   
1263 d    Y:001B 000053  delta_mem              dc           OPC_1_DELTA
1264   
1265   
1266   
1267                     ;  TUBE MEMORY
1268      Y:0020                                org          y:$0020
1269      Y:0020         S1_TB                  ds           1
1270      Y:0021         S1_BB                  ds           1
1271      Y:0022         S2_TB                  ds           1
1272      Y:0023         S2_BB                  ds           1
1273      Y:0024         S3_TB                  ds           1
1274      Y:0025         S3_BB                  ds           1
1275      Y:0026         S4_TB                  ds           1
1276      Y:0027         S4_BB                  ds           1
1277      Y:0028         S5_TB                  ds           1
1278      Y:0029         S5_BB                  ds           1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 16



1279      Y:002A         S6_TB                  ds           1
1280      Y:002B         S6_BB                  ds           1
1281      Y:002C         S7_TB                  ds           1
1282      Y:002D         S7_BB                  ds           1
1283      Y:002E         S8_TB                  ds           1
1284      Y:002F         S8_BB                  ds           1
1285      Y:0030         S9_TB                  ds           1
1286      Y:0031         S9_BB                  ds           1
1287      Y:0032         S10_TB                 ds           1
1288      Y:0033         S10_BB                 ds           1
1289      Y:0034         N1_TB                  ds           1
1290      Y:0035         N1_BB                  ds           1
1291      Y:0036         N2_TB                  ds           1
1292      Y:0037         N2_BB                  ds           1
1293      Y:0038         N3_TB                  ds           1
1294      Y:0039         N3_BB                  ds           1
1295      Y:003A         N4_TB                  ds           1
1296      Y:003B         N4_BB                  ds           1
1297      Y:003C         N5_TB                  ds           1
1298      Y:003D         N5_BB                  ds           1
1299      Y:003E         N6_TB                  ds           1
1300      Y:003F         N6_BB                  ds           1
1301   
1302   
1303                     ;  FRICATION TAP MEMORY
1304      Y:0040                                org          y:$0040
1305      Y:0040         y_tap0                 ds           1
1306      Y:0041         y_tap1                 ds           1
1307      Y:0042         y_tap2                 ds           1
1308      Y:0043         y_tap3                 ds           1
1309      Y:0044         y_tap4                 ds           1
1310      Y:0045         y_tap5                 ds           1
1311      Y:0046         y_tap6                 ds           1
1312      Y:0047         y_tap7                 ds           1
1313      Y:0048         y_tapGuard             ds           1
1314      000008         NUMBER_TAPS            equ          8
1315   
1316   
1317                     ;  MISC. VARIABLES
1318      Y:0049         BREATHINESS            ds           1
1319      Y:004A         CROSSMIX_FACTOR        ds           1
1320      Y:004B         TP                     ds           1
1321      Y:004C         TN_MIN                 ds           1
1322      Y:004D         TN_MAX                 ds           1
1323      Y:004E         endPtr                 ds           1
1324      Y:004F         CONTROL_PERIOD         ds           1
1325      Y:0050         CONTROL_FACTOR         ds           1
1326      Y:0051         ASP_AMP                ds           1
1327      Y:0052         ta0                    ds           1
1328   
1329   
1330                     ;  SAMPLING RATE INTERPOLATION DELTA VARIABLES
1331      Y:0053         OPC_1_DELTA            ds           1
1332      Y:0054         OPC_2_DELTA            ds           1
1333      Y:0055         OPC_3_DELTA            ds           1
1334      Y:0056         ALPHA_L_DELTA          ds           1
1335      Y:0057         ALPHA_R_DELTA          ds           1
1336      Y:0058         ALPHA_T_DELTA          ds           1
1337      Y:0059         OPC_4_DELTA            ds           1
1338      Y:005A         OPC_5_DELTA            ds           1
1339      Y:005B         OPC_6_DELTA            ds           1
1340      Y:005C         OPC_7_DELTA            ds           1
1341      Y:005D         OPC_REFL_DELTA         ds           1
1342      Y:005E         OPC_RAD_DELTA          ds           1
1343      Y:005F         NC_1_DELTA             ds           1
1344      00000D         NUMBER_DELTAS          equ          13
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 17



1345   
1346   
1347   
1348                     ;***************************************************************************************
1349                     ;  OFF-CHIP X, Y AND PROGRAM MEMORY (CANNOT BE OVERLAID)
1350                     ;
1351                     ;  $2000 - $3FFF        (8192)        total offchip memory
1352                     ;
1353                     ;  $2000 - $22FF        (768)         reserved program memory
1354                     ;
1355                     ;  $2300 - $237F        (128)         free memory
1356                     ;
1357                     ;  $23C0 - 23FF        (64)          beta table
1358                     ;
1359                     ;  $2400 - $24FF        (256)         gp waveform table memory
1360                     ;
1361                     ;  $2500 - $2A7F        (1664)        SRC filter coefficients
1362                     ;  $2B80 - $31FF        (1664)        SRC filter deltas
1363                     ;  $3200 - $33FF        (512)         SRC buffer
1364                     ;
1365                     ;                                  If synchronous dma out:
1366                     ;  $3400 - $37FF        (1024)        DMA output buffer
1367                     ;                                  If asynchronous dma out:
1368                     ;  $3400 - $35FF        (512)         DMA output buffer 1    
1369                     ;  $3600 - $37FF        (512)         DMA output buffer 2    
1370                     ;
1371                     ;  $3800 - $3FFF        (2048)        DMA input buffer              
1372                     ;
1373                     ;***************************************************************************************
1374   
1375                     ;  WAVETABLE MEMORY ALLOCATION (MUST AGREE WITH HOST)
1376      000100         SINE_TABLE_SIZE        equ          256
1377      000100         GP_TABLE_SIZE          equ          256
1378   
1379                     ;  SAMPLE RATE CONVERSION BUFFER MEMORY ALLOCATION (MUST AGREE WITH HOST)
1380      00001A         PADSIZE                equ          26
1381      000006         L_BITS                 equ          6
1382      000040         L_RANGE                equ          @cvi(@pow(2,L_BITS))
1383      00003F         L_MASK                 equ          @cvi(L_RANGE-1)
1384      0.015625       N_SCALE                equ          @pow(2,-L_BITS)
1385      000680         FILTER_SIZE            equ          @cvi(PADSIZE*L_RANGE)
1386      000680         BASE_DIFF              equ          FILTER_SIZE
1387      000200         SRC_BUFFER_SIZE        equ          512
1388   
1389                     ;  DMA OUTPUT BUFFERS MEMORY ALLOCATION (MUST AGREE WITH HOST, IF NOT SSI OUTPUT)
1390                                            IF           !SSI_OUTPUT
1391                                            IF           SYNC_DMA
1392      000400         DMA_OUT_SIZE           equ          1024
1393                                            ELSE
1395                                            ENDIF
1396                                            ELSE
1398                                            ENDIF
1399   
1400                     ;  DMA INPUT BUFFER MEMORY ALLOCATION (MUST AGREE WITH HOST)
1401      000800         DMA_IN_SIZE            equ          2048    ; size of input buffer
1402      000040         TABLES_PER_DMA         equ          64      ; tables per page
1403      000020         TABLE_SIZE             equ          32      ; size of each table
1404   
1405   
1406   
1407                     ;  ACTUAL MEMORY ALLOCATION
1408      Y:0100                                org          y:$0100
1409      Y:0100         sine_wave_table        dsm          SINE_TABLE_SIZE
1410   
1411                     ;  BETA TABLE IS CREATED IN LOW MEMORY, AND LATER MOVED TO OFF-CHIP MEMORY
1412      Y:00C0                                org          y:temp_betaTable
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 18



1413                                            betaTable    64
1414  +
1415  +                  ;  RECORD THE ORIGIN FROM THE CURRENT COUNTER VALUE
1416  +   0000C0         origin                 set          @lcv(R)
1417  +
1418  +                  ;  SET PI
1419  +   3.141593       PI                     set          3.141592653589793
1420  +
1421  +                  ;  RECORD THE SIZE OF THE TABLE
1422  +   000040         betaTableSize          set          64
1423  +
1424  +                  ;  CALCULATE THE VALUES FOR THE TABLE FROM BEGINNING TO END
1425  +   Y:00C0                                org          y:origin
1426  +   000000         count                  set          0
1427  +                                         dup          betaTableSize
1428 m+                  tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1429 m+                  value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1430 m+                                         dc           value
1431 m+                  count                  set          count+1
1432 m+                                         endm
1433  +   0.000000       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1434  +   0.500000       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1435 d+   Y:00C0 400000                         dc           value
1436  +   000001         count                  set          count+1
1437  +   0.024938       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1438  +   0.475668       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1439 d+   Y:00C1 3CE2B3                         dc           value
1440  +   000002         count                  set          count+1
1441  +   0.049908       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1442  +   0.452464       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1443 d+   Y:00C2 39EA5B                         dc           value
1444  +   000003         count                  set          count+1
1445  +   0.074940       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1446  +   0.430285       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1447 d+   Y:00C3 371392                         dc           value
1448  +   000004         count                  set          count+1
1449  +   0.100065       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1450  +   0.409037       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1451 d+   Y:00C4 345B54                         dc           value
1452  +   000005         count                  set          count+1
1453  +   0.125316       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1454  +   0.388639       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1455 d+   Y:00C5 31BEED                         dc           value
1456  +   000006         count                  set          count+1
1457  +   0.150726       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1458  +   0.369017       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1459 d+   Y:00C6 2F3BF1                         dc           value
1460  +   000007         count                  set          count+1
1461  +   0.176327       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1462  +   0.350104       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1463 d+   Y:00C7 2CD033                         dc           value
1464  +   000008         count                  set          count+1
1465  +   0.202154       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1466  +   0.331840       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1467 d+   Y:00C8 2A79BB                         dc           value
1468  +   000009         count                  set          count+1
1469  +   0.228243       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1470  +   0.314171       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1471 d+   Y:00C9 2836C0                         dc           value
1472  +   00000A         count                  set          count+1
1473  +   0.254631       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1474  +   0.297047       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1475 d+   Y:00CA 2605A2                         dc           value
1476  +   00000B         count                  set          count+1
1477  +   0.281356       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1478  +   0.280423       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 19



1479 d+   Y:00CB 23E4E7                         dc           value
1480  +   00000C         count                  set          count+1
1481  +   0.308459       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1482  +   0.264258       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1483 d+   Y:00CC 21D332                         dc           value
1484  +   00000D         count                  set          count+1
1485  +   0.335982       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1486  +   0.248513       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1487 d+   Y:00CD 1FCF46                         dc           value
1488  +   00000E         count                  set          count+1
1489  +   0.363970       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1490  +   0.233154       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1491 d+   Y:00CE 1DD7FC                         dc           value
1492  +   00000F         count                  set          count+1
1493  +   0.392471       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1494  +   0.218148       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1495 d+   Y:00CF 1BEC44                         dc           value
1496  +   000010         count                  set          count+1
1497  +   0.421535       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1498  +   0.203465       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1499 d+   Y:00D0 1A0B22                         dc           value
1500  +   000011         count                  set          count+1
1501  +   0.451217       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1502  +   0.189077       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1503 d+   Y:00D1 1833AB                         dc           value
1504  +   000012         count                  set          count+1
1505  +   0.481575       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1506  +   0.174958       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1507 d+   Y:00D2 166502                         dc           value
1508  +   000013         count                  set          count+1
1509  +   0.512670       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1510  +   0.161083       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1511 d+   Y:00D3 149E5B                         dc           value
1512  +   000014         count                  set          count+1
1513  +   0.544571       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1514  +   0.147429       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1515 d+   Y:00D4 12DEF4                         dc           value
1516  +   000015         count                  set          count+1
1517  +   0.577350       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1518  +   0.133975       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1519 d+   Y:00D5 112614                         dc           value
1520  +   000016         count                  set          count+1
1521  +   0.611087       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1522  +   0.120699       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1523 d+   Y:00D6 0F730F                         dc           value
1524  +   000017         count                  set          count+1
1525  +   0.645868       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1526  +   0.107582       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1527 d+   Y:00D7 0DC53F                         dc           value
1528  +   000018         count                  set          count+1
1529  +   0.681788       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1530  +   0.094605       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1531 d+   Y:00D8 0C1C05                         dc           value
1532  +   000019         count                  set          count+1
1533  +   0.718951       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1534  +   0.081750       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1535 d+   Y:00D9 0A76CA                         dc           value
1536  +   00001A         count                  set          count+1
1537  +   0.757471       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1538  +   0.069000       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1539 d+   Y:00DA 08D4FA                         dc           value
1540  +   00001B         count                  set          count+1
1541  +   0.797473       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1542  +   0.056336       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1543 d+   Y:00DB 073609                         dc           value
1544  +   00001C         count                  set          count+1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 20



1545  +   0.839100       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1546  +   0.043744       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1547 d+   Y:00DC 05996A                         dc           value
1548  +   00001D         count                  set          count+1
1549  +   0.882505       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1550  +   0.031207       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1551 d+   Y:00DD 03FE97                         dc           value
1552  +   00001E         count                  set          count+1
1553  +   0.927864       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1554  +   0.018709       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1555 d+   Y:00DE 02650C                         dc           value
1556  +   00001F         count                  set          count+1
1557  +   0.975372       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1558  +   0.006234       value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1559 d+   Y:00DF 00CC44                         dc           value
1560  +   000020         count                  set          count+1
1561  +   1.025249       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1562  +   -0.006234      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1563 d+   Y:00E0 FF33BC                         dc           value
1564  +   000021         count                  set          count+1
1565  +   1.077744       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1566  +   -0.018709      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1567 d+   Y:00E1 FD9AF4                         dc           value
1568  +   000022         count                  set          count+1
1569  +   1.133138       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1570  +   -0.031207      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1571 d+   Y:00E2 FC0169                         dc           value
1572  +   000023         count                  set          count+1
1573  +   1.191754       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1574  +   -0.043744      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1575 d+   Y:00E3 FA6696                         dc           value
1576  +   000024         count                  set          count+1
1577  +   1.253960       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1578  +   -0.056336      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1579 d+   Y:00E4 F8C9F7                         dc           value
1580  +   000025         count                  set          count+1
1581  +   1.320183       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1582  +   -0.069000      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1583 d+   Y:00E5 F72B06                         dc           value
1584  +   000026         count                  set          count+1
1585  +   1.390915       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1586  +   -0.081750      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1587 d+   Y:00E6 F58936                         dc           value
1588  +   000027         count                  set          count+1
1589  +   1.466731       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1590  +   -0.094605      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1591 d+   Y:00E7 F3E3FB                         dc           value
1592  +   000028         count                  set          count+1
1593  +   1.548303       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1594  +   -0.107582      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1595 d+   Y:00E8 F23AC1                         dc           value
1596  +   000029         count                  set          count+1
1597  +   1.636427       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1598  +   -0.120699      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1599 d+   Y:00E9 F08CF1                         dc           value
1600  +   00002A         count                  set          count+1
1601  +   1.732051       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1602  +   -0.133975      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1603 d+   Y:00EA EED9EC                         dc           value
1604  +   00002B         count                  set          count+1
1605  +   1.836308       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1606  +   -0.147429      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1607 d+   Y:00EB ED210C                         dc           value
1608  +   00002C         count                  set          count+1
1609  +   1.950572       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1610  +   -0.161083      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 21



1611 d+   Y:00EC EB61A5                         dc           value
1612  +   00002D         count                  set          count+1
1613  +   2.076521       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1614  +   -0.174958      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1615 d+   Y:00ED E99AFE                         dc           value
1616  +   00002E         count                  set          count+1
1617  +   2.216228       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1618  +   -0.189077      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1619 d+   Y:00EE E7CC55                         dc           value
1620  +   00002F         count                  set          count+1
1621  +   2.372280       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1622  +   -0.203465      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1623 d+   Y:00EF E5F4DE                         dc           value
1624  +   000030         count                  set          count+1
1625  +   2.547958       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1626  +   -0.218148      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1627 d+   Y:00F0 E413BC                         dc           value
1628  +   000031         count                  set          count+1
1629  +   2.747477       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1630  +   -0.233154      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1631 d+   Y:00F1 E22804                         dc           value
1632  +   000032         count                  set          count+1
1633  +   2.976349       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1634  +   -0.248513      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1635 d+   Y:00F2 E030BA                         dc           value
1636  +   000033         count                  set          count+1
1637  +   3.241920       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1638  +   -0.264258      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1639 d+   Y:00F3 DE2CCE                         dc           value
1640  +   000034         count                  set          count+1
1641  +   3.554211       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1642  +   -0.280423      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1643 d+   Y:00F4 DC1B19                         dc           value
1644  +   000035         count                  set          count+1
1645  +   3.927247       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1646  +   -0.297047      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1647 d+   Y:00F5 D9FA5E                         dc           value
1648  +   000036         count                  set          count+1
1649  +   4.381286       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1650  +   -0.314171      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1651 d+   Y:00F6 D7C940                         dc           value
1652  +   000037         count                  set          count+1
1653  +   4.946715       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1654  +   -0.331840      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1655 d+   Y:00F7 D58645                         dc           value
1656  +   000038         count                  set          count+1
1657  +   5.671282       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1658  +   -0.350104      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1659 d+   Y:00F8 D32FCD                         dc           value
1660  +   000039         count                  set          count+1
1661  +   6.634566       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1662  +   -0.369017      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1663 d+   Y:00F9 D0C40F                         dc           value
1664  +   00003A         count                  set          count+1
1665  +   7.979811       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1666  +   -0.388639      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1667 d+   Y:00FA CE4113                         dc           value
1668  +   00003B         count                  set          count+1
1669  +   9.993495       tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1670  +   -0.409037      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1671 d+   Y:00FB CBA4AC                         dc           value
1672  +   00003C         count                  set          count+1
1673  +   13.344073      tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1674  +   -0.430285      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1675 d+   Y:00FC C8EC6E                         dc           value
1676  +   00003D         count                  set          count+1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 22



1677  +   20.036898      tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1678  +   -0.452464      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1679 d+   Y:00FD C615A5                         dc           value
1680  +   00003E         count                  set          count+1
1681  +   40.098734      tanVal                 set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1682  +   -0.475668      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1683 d+   Y:00FE C31D4D                         dc           value
1684  +   00003F         count                  set          count+1
1685  +   16331778728383844.000000 tanVal       set          @tan(PI*@cvf(count)/(@cvf(betaTableSize-1)*2.0))
1686  +   -0.500000      value                  set          (1.0-tanVal)/(2.0*(1.0+tanVal))
1687 d+   Y:00FF C00000                         dc           value
1688  +   000040         count                  set          count+1
1689  +
1690   
1691                                            IF           BLACK
1692      X:23C0                                org          x:$23C0
1693      X:23C0         l_betaTable            ds           64      ; beta function table
1694      X:2400         gp_wave_table          dsm          GP_TABLE_SIZE
1695      X:2500         filter_base            ds           FILTER_SIZE
1696      X:2B80         filter_d_base          ds           FILTER_SIZE
1697      X:3200         src_buffer_base        dsm          SRC_BUFFER_SIZE
1698                                            IF           SYNC_DMA
1699      X:3400         dma_out_buffer         dsm          DMA_OUT_SIZE
1700                                            ELSE
1703                                            ENDIF
1704      X:3800         dma_in_buffer          dsm          DMA_IN_SIZE
1705                                            ENDIF
1706   
1707   
1708                                            IF           MSOUND
1730                                            ENDIF
1731   
1732   
1733   
1734                     ;***************************************************************************************
1735                     ;  REGISTER USE:
1736                     ;
1737                     ;       r0     m0     n0     waveform table pointers
1738                     ;       r1     m1            SRC index for dataEmpty
1739                     ;       r2     m2            DMA buffer empty pointer
1740                     ;       r3     m3     n3     general (unprotected) use; m3 left at linear ($FFFF)
1741                     ;       r4     m4     n4     general (unprotected) use; m4 left at linear ($FFFF)
1742                     ;       r5     m5     n5     SRC fillPtr for dataFill and dataEmpty 
1743                     ;       r6     m6            DMA buffer fill pointer
1744                     ;       r7     m7     n7     SRC emptyPtr for dataFill and DataEmpty
1745                     ;
1746                     ;***************************************************************************************
1747   
1753   
1754                                     ;***************************************************************************************
1755                                     ;  INTERRUPT VECTORS
1756                                     ;***************************************************************************************
1757   
1758                                               IF      !DEBUG_56
1759   
1760      P:0000                                   org     p:VEC_RESET
1761      P:0000 0AF080  [6 -        6]            jmp     reset
                 002000
1762   
1763                                               IF      SSI_OUTPUT
1770                                               ENDIF
1771   
1772   
1773                                               IF      SYNC_DMA
1774      P:0022                                   org     p:VEC_TRANSMIT_DATA                   ; synchronous DMA-out
1775      P:0022 000000  [2 -        8]            nop
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 23



1776      P:0023 000000  [2 -       10]            nop
1777   
1778      P:0024                                   org     p:VEC_DMA_OUT_DONE                    ; DMA-OUT completed.
1779      P:0024 0A0020  [4 -       14]            bset    #DMA_OUT_DONE,x:x_STATUS_flags
1780      P:0025 000000  [2 -       16]            nop
1781   
1782                                               ELSE
1790                                               ENDIF
1791   
1792      P:0028                                   org     p:VEC_DMA_IN_DONE                     ; DMA-IN completed.
1793      P:0028 0A0021  [4 -       20]            bset    #DMA_IN_DONE,x:x_STATUS_flags
1794      P:0029 000000  [2 -       22]            nop
1795   
1796      P:002C                                   org     p:VEC_DMA_IN_ACCEPTED                 ; DMA-IN accepted: start reading.
1797      P:002C 0BF080  [6 -       28]            jsr     dma_in_accepted
                 00206D
1798   
1799   
1800      P:002E                                   org     p:VEC_START                           ; signal to start synthesizing
1801      P:002E 0A0023  [4 -       32]            bset    #RUN_STATUS,x:x_STATUS_flags
1802      P:002F 000000  [2 -       34]            nop
1803   
1804      P:0030                                   org     p:VEC_STOP                            ; signal to stop synthesizing
1805      P:0030 0BF080  [6 -       40]            jsr     stop_synth
                 00206B
1806   
1807   
1808      P:0032                                   org     p:VEC_LOAD_FIR_COEF                   ; load in FIR coefficients from host
1809      P:0032 0BF080  [6 -       46]            jsr     load_fir_coefficients
                 002112
1810   
1811      P:0034                                   org     p:VEC_LOAD_SRC_COEF                   ; load in SRC coefficients from host
1812      P:0034 0BF080  [6 -       52]            jsr     load_src_coefficients
                 002132
1813   
1814      P:0036                                   org     p:VEC_LOAD_WAVETABLE                  ; load in glottal pulse wavetable
1815      P:0036 0BF080  [6 -       58]            jsr     load_wavetable
                 002104
1816   
1817      P:0038                                   org     p:VEC_LOAD_UR_DATA                    ; load in utterance-rate parameters
1818      P:0038 0BF080  [6 -       64]            jsr     load_ur_parameters
                 002146
1819   
1820                                               ENDIF
1821   
1822   
1823   
1824      P:003A                                   org     p:ON_CHIP_PROGRAM_START
1825   
1826                                     ;***************************************************************************************
1827                                     ;  MAIN LOOP
1828                                     ;
1829                                     ;  This is where samples are created, and where input and output are controlled.
1830                                     ;  This is the top of the loop, where the input control-rate parameters are loaded
1831                                     ;  from the host when needed, and where the control-rate count is decremented.
1832                                     ;***************************************************************************************
1833   
1834      P:003A 0A0083  [6 -       70]  main      jclr    #RUN_STATUS,x:x_STATUS_flags,main     ; loop here if not running
                 00003A
1835   
1836   
1837                                               IF      SSI_OUTPUT
1842                                               ENDIF
1843   
1844   
1845                                     ;  UPDATE CONTROL RATE PARAMETERS, IF NEEDED
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 24



1846      P:003C 5F9013  [2 -       72]  _top      clr     a                       y:cr_count,b  ; 0 -> a        count -> b
1847      P:003D 4D940D  [2 -       74]            cmp     a,b                     y:y_one,x1    ;               1 -> x1
1848      P:003E 0BF0AA  [6 -       80]            jseq    update_datatable                      ; jump if count == 0
                 002073
1849   
1850                                     ;  DECREMENT CONTROL RATE COUNT
1851      P:0040 4C926C  [2 -       82]  _cont     sub     x1,b                    y:y_seed,x0   ; count -= 1    seed -> x0
1852   
1853   
1854                                     ;***************************************************************************************
1855                                     ;  ROUTINE:     lp_noise
1856                                     ;
1857                                     ;  Generates lowpass-filtered noise, using a linear-congruence pseudo-random number
1858                                     ;  generator, and a one-zero low pass filter (zero at PI).
1859                                     ;
1860                                     ;  Input:       x0 (seed)
1861                                     ;  Output:      x:x_lpn_signal (and also in b)
1862                                     ;***************************************************************************************
1863   
1864      P:0041 4E9300  [2 -       84]            move                            y:y_factor,y0 ; y0 = factor
1865      P:0042 5F10D0  [2 -       86]            mpy     x0,y0,a                 b,y:cr_count  ; a = seed * factor    store control rate count
1866      P:0043 200022  [2 -       88]            asr     a                                     ; a0 = randomly signed fraction from -1 to +1
1867      P:0044 210F00  [2 -       90]            move              a0,b                        ; put new random number in b
1868      P:0045 581248  [2 -       92]            add     x0,b                    a0,y:y_seed   ; b = x[n] + x[n-1]    store new random number
1869      P:0046 20002A  [2 -       94]            asr     b                                     ; b /= 2
1870      P:0047 570200  [2 -       96]            move              b,x:x_lpn_signal            ; store low pass noise signal
1871   
1872   
1873   
1874                                               IF      OVERSAMPLE_OSC
1875                                     ;***************************************************************************************
1876                                     ;  ROUTINE:     oversampling_oscillator
1877                                     ;
1878                                     ;  A 2X oversampling oscillator, where decimation is performed with an FIR filter.
1879                                     ;
1880                                     ;  Input:       none
1881                                     ;  Output:      a
1882                                     ;***************************************************************************************
1883   
1884                                     ;  SET UP REGISTERS FOR FIR FILTER
1885      P:0048 058323  [2 -       98]            move              x:x_FIR_mod,m3
1886      P:0049 058324  [2 -      100]            move              x:x_FIR_mod,m4
1887   
1888                                     ;  GENERATE ONE SAMPLE USING LINEAR INTERPOLATING OSCILLATOR
1889      P:004A 489F00  [2 -      102]            move              l:l_currentPhase,a          ; current phase angle -> a
1890      P:004B 499E00  [2 -      104]            move              l:l_phaseInc,b              ; phase angle increment -> b
1891      P:004C 458610  [2 -      106]            add     b,a       x:x_tableMod,x1             ; calc new current phase angle
1892                                                                                             ; uses 48 bit addition (int.frac)
1893      P:004D 4F9466  [2 -      108]            and     x1,a                    y:y_one,y1    ; wrap integer part of current phase
1894                                                                                             ; to keep within table boundaries
1895      P:004E 21D800  [2 -      110]            move              a,n0                        ; put int part of CPA into register n0
1896      P:004F 481F70  [2 -      112]            add     y1,a      a,l:l_currentPhase          ; store new current phase angle & add 1
1897                                               IF      MSOUND
1899                                               ELSE
1900      P:0050 4FE866  [4 -      116]            and     x1,a                    y:(r0+n0),y1  ; wrap integer part of phase & get f(n)
1901                                               ENDIF
1902      P:0051 21D800  [2 -      118]            move              a,n0                        ; put int part of incremented CPA into n0
1903      P:0052 2C0000  [2 -      120]            move              #0,a1                       ; zero upper part of a
1904                                               IF      MSOUND
1906                                               ELSE
1907      P:0053 5FE800  [4 -      124]            move                            y:(r0+n0),b   ; get value of f(n+1)
1908                                               ENDIF
1909      P:0054 63847C  [2 -      126]            sub     y1,b      x:FIR_x_ptr,r3              ; diff = f(n+1) - f(n)   set r3 for FIR filter
1910      P:0055 21E422  [2 -      128]            asr     a         b,x0                        ; shift frac right since no sign bit
1911                                                                                             ; put diff in x0 register
1912      P:0056 210571  [2 -      130]            tfr     y1,a      a0,x1                       ; put f(n) in a; put frac. of CPA into x1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 25



1913      P:0057 499EA3  [2 -      132]            macr    x0,x1,a   l:l_phaseInc,b              ; a = f(n) + (diff * CPA(frac))  phaseInc -> b
1914   
1915                                     ;  MOVE THIS SAMPLE INTO THE INPUT OF THE FIR FILTER
1916      P:0058 565300  [2 -      134]            move              a,x:(r3)-                   ; put sample into input of FIR filter
1917   
1918                                     ;  GENERATE SECOND SAMPLE USING LINEAR INTERPOLATING OSCILLATOR
1919      P:0059 489F00  [2 -      136]            move              l:l_currentPhase,a          ; current phase angle -> a
1920      P:005A 458610  [2 -      138]            add     b,a       x:x_tableMod,x1             ; calc new current phase angle
1921                                                                                             ; uses 48 bit addition (int.frac)
1922      P:005B 4F9466  [2 -      140]            and     x1,a                    y:y_one,y1    ; wrap integer part of current phase
1923                                                                                             ; to keep within table boundaries
1924      P:005C 21D800  [2 -      142]            move              a,n0                        ; put int part of CPA into register n0
1925      P:005D 481F70  [2 -      144]            add     y1,a      a,l:l_currentPhase          ; store new current phase angle & add 1
1926                                               IF      MSOUND
1928                                               ELSE
1929      P:005E 4FE866  [4 -      148]            and     x1,a                    y:(r0+n0),y1  ; wrap integer part of phase & get f(n)
1930                                               ENDIF
1931      P:005F 21D800  [2 -      150]            move              a,n0                        ; put int part of incremented CPA into n0
1932      P:0060 2C0000  [2 -      152]            move              #0,a1                       ; zero upper part of a
1933                                               IF      MSOUND
1935                                               ELSE
1936      P:0061 5FE800  [4 -      156]            move                            y:(r0+n0),b   ; get value of f(n+1)
1937                                               ENDIF
1938      P:0062 64857C  [2 -      158]            sub     y1,b      x:FIR_y_ptr,r4              ; diff = f(n+1) - f(n)   set r4 for FIR filter
1939      P:0063 21E422  [2 -      160]            asr     a         b,x0                        ; shift frac right since no sign bit
1940                                                                                             ; put diff in x0 register
1941      P:0064 210571  [2 -      162]            tfr     y1,a      a0,x1                       ; put f(n) in a; put frac. of CPA into x1
1942      P:0065 2000A3  [2 -      164]            macr    x0,x1,a                               ; a = f(n) + (diff * CPA(frac)),
1943   
1944                                     ;  FILTER THE TWO SAMPLES USING THE FIR FILTER
1945      P:0066 F81B13  [2 -      166]            clr     a         a,x:(r3)+     y:(r4)+,y0
1946      P:0067 060300  [6 -      172]            do      x:x_FIR_mod,_end_loop
                 000069
1947      P:0069 F09BD2  [2 -      174]            mac     x0,y0,a   x:(r3)+,x0    y:(r4)+,y0
1948                                     _end_loop
1949      P:006A 2053D3  [2 -      176]            macr    x0,y0,a   (r3)-
1950   
1951                                     ;  STORE REGISTERS FOR FIR FILTER
1952      P:006B 630400  [2 -      178]            move              r3,x:FIR_x_ptr
1953      P:006C 640500  [2 -      180]            move              r4,x:FIR_y_ptr
1954      P:006D 059663  [2 -      182]            move                            y:y_max,m3
1955      P:006E 059664  [2 -      184]            move                            y:y_max,m4    ; output in a is decimated signal
1956   
1957   
1958   
1959                                               ELSE
1996                                               ENDIF
1997   
1998   
1999   
2000                                     ;***************************************************************************************
2001                                     ;  ROUTINE:     noisy_glottal_source
2002                                     ;
2003                                     ;  Calculates the noisy glottal source by adding pulsed noise to the glottal source
2004                                     ;  according to the breathiness parameter.  Also updates the OSC_AMP variable, by
2005                                     ;  adding the delta increment to it (don't use  OSC_AMP from here to end of loop).
2006                                     ;
2007                                     ;  Input:       a (glottal source), x:x_lpn_signal (lp noise)
2008                                     ;  Output:      x:x_ngs_signal, b (x_lpn_signal), x0 (pulsed noise)
2009                                     ;***************************************************************************************
2010   
2011      P:006F 10B000  [4 -      188]            move              a,y0          x:x_lpn_signal,x0 ; pulsed noise = lp_noise * gp
                 000002
2012      P:0071 21C5D1  [2 -      190]            mpyr    x0,y0,a   a,x1                        ; glottal source -> x1
2013   
2014      P:0072 10F000  [4 -      194]            move              a,x0          y:BREATHINESS,y0 ; store pulsed noise signal in x0
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 26



                 000049
2015      P:0074 4F84D0  [2 -      196]            mpy     x0,y0,a                 y:ANTI_BREATHINESS,y1 ; a = pulsed noise * breathiness
2016   
2017      P:0075 4E82F3  [2 -      198]            macr    x1,y1,a                 y:OSC_AMP,y0  ; a += gp * (1.0 - breathiness)
2018      P:0076 21C500  [2 -      200]            move              a,x1                        ; get amplitude factor
2019   
2020      P:0077 5E83E9  [2 -      202]            mpyr    x1,y0,b                 y:OSC_AMP_DELTA,a ; a = signal * amplitude factor
2021      P:0078 570100  [2 -      204]            move              b,x:x_ngs_signal            ; save noisy glottal source signal
2022   
2023      P:0079 578250  [2 -      206]            add     y0,a      x:x_lpn_signal,b            ; lp_noise signal -> b
2024      P:007A 5E0200  [2 -      208]            move                            a,y:OSC_AMP   ; OSC_AMP += OSC_AMP_DELTA
2025   
2026   
2027   
2028                                     ;***************************************************************************************
2029                                     ;  ROUTINE:     modulation_switch
2030                                     ;
2031                                     ;  Skips the crossmix_noise routine, if not switched on.  Note that register b contains
2032                                     ;  crossmixed noise if switch on, or plain lp noise if switched off.
2033                                     ;
2034                                     ;***************************************************************************************
2035   
2036      P:007B 0A01C0  [6 -      214]            jclr    #0,y:PULSE_MODULATION,_bpfilt         ; crossmixed noise in b (preserve!)
                 000081
2037   
2038   
2039   
2040                                     ;***************************************************************************************
2041                                     ;  ROUTINE:     crossmix_noise
2042                                     ;
2043                                     ;  Crossmixes pulsed noise and low-pass noise, according to the crossmix and
2044                                     ;  anti-crossmix factors (calculated from oscillator amplitude in outer loop).
2045                                     ;
2046                                     ;  Input:       x0 (pulsed noise signal), x:x_lpn_signal
2047                                     ;  Output:      b
2048                                     ;***************************************************************************************
2049   
2050      P:007D 4E9900  [2 -      216]            move                            y:crossmix,y0 ; ax -> y0
2051      P:007E 4F9A00  [2 -      218]            move                            y:anti_crossmix,y1 ; (1.0 - ax) -> y1
2052      P:007F 4582D8  [2 -      220]            mpy     x0,y0,b   x:x_lpn_signal,x1           ; b = ax * pulsed_noise          lp_noise -> x1
2053      P:0080 2000FB  [2 -      222]            macr    x1,y1,b                               ; b += (1.0 - ax) * lp_noise
2054   
2055   
2056   
2057                                     ;***************************************************************************************
2058                                     ;  ROUTINE:     bandpass_filter
2059                                     ;
2060                                     ;  Bandpass filters the input signal, with specified center frequency and bandwidth
2061                                     ;  converted the the filter coefficients ALPHA, BETA, and GAMMA.  Note that this
2062                                     ;  implementation does not use R registers, since using them means more instructions,
2063                                     ;  and fixed locations of filter memory
2064                                     ;
2065                                     ;  Input:       b (b is preserved)
2066                                     ;  Output:      a (and also in y:y_bp_yn1)
2067                                     ;***************************************************************************************
2068   
2069      P:0081 13B000  [4 -      226]  _bpfilt   move              b,y1          x:ALPHA,x0
                 000007
2070      P:0083 4E86C0  [2 -      228]            mpy     x0,y1,a                 y:y_bp_xn2,y0 ; a = alpha * x(n)
2071      P:0084 4488D6  [2 -      230]            mac     -x0,y0,a  x:BETA,x0                   ; a -= alpha * x(n-2)
2072      P:0085 4E8800  [2 -      232]            move                            y:y_bp_yn2,y0
2073      P:0086 4489D6  [2 -      234]            mac     -x0,y0,a  x:GAMMA,x0                  ; a -= beta * y(n-2)
2074      P:0087 4E8700  [2 -      236]            move                            y:y_bp_yn1,y0
2075      P:0088 4E08D2  [2 -      238]            mac     x0,y0,a                 y0,y:y_bp_yn2 ; a += gamma * y(n-1)
2076      P:0089 4C8532  [2 -      240]            asl     a                       y:y_bp_xn1,x0 ; a *= 2
2077      P:008A 4C0611  [2 -      242]            rnd     a                       x0,y:y_bp_xn2
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 27



2078      P:008B 5E0700  [2 -      244]            move                            a,y:y_bp_yn1  ; store output
2079      P:008C 4F0500  [2 -      246]            move                            y1,y:y_bp_xn1 ; store input
2080      P:008D 560200  [2 -      248]            move              a,x:x_fric_sig              ; store frication signal
2081   
2082   
2083   
2084                                     ;***************************************************************************************
2085                                     ;  ROUTINE:     sum_asp_ngs
2086                                     ;
2087                                     ;  Scale the aspiration signal (crossmixed noise) and add it to the noisy
2088                                     ;  glottal source.
2089                                     ;
2090                                     ;  Input:       b (crossmixed noise), x:x_ngs_signal (noisy glottal source)
2091                                     ;  Output:      a (summed signal: also in y:y_bp_yn1), y1 (vtScale)
2092                                     ;***************************************************************************************
2093   
2094      P:008E 18F000  [4 -      252]            move              b,x0          y:ASP_AMP,y0  ; crossmixed noise -> x0   asp_amp -> y0
                 000051
2095      P:0090 4581D1  [2 -      254]            mpyr    x0,y0,a   x:x_ngs_signal,x1           ; a = crossmix_noise * asp_amp
2096      P:0091 479960  [2 -      256]            add     x1,a      x:vtScale,y1                ; a += noisy glottal source  vtScale->y1
2097   
2098   
2099   
2100                                     ;***************************************************************************************
2101                                     ;  ROUTINE:     vocalTract
2102                                     ;
2103                                     ;  Calculates the propagation of the input sample value (the glottis) through the vocal
2104                                     ;  tract, and sums the output from the nose and mouth.
2105                                     ;
2106                                     ;  Input:       a, x:x_fric_sig, y1 (vtScale)
2107                                     ;  Output:      a
2108                                     ;***************************************************************************************
2109   
2110                                     ;  SCALE INPUT SO THERE IS NO OVERFLOW
2111      P:0092 21C500  [2 -      258]            move              a,x1
2112      P:0093 639AF8  [2 -      260]            mpy     x1,y1,b   x:coeff_mem,r3              ; scaled input -> b    coeff ptr -> r3
2113      P:0094 649B00  [2 -      262]            move              x:tap_mem,r4                ; set up pointer to tap memory
2114   
2115                                     ;  BRANCH TEST
2116      P:0095 0B0004  [4 -      266]            bchg    #VT_BRANCH,x:x_STATUS_flags           ; flip branch bit
2117      P:0096 0A0084  [6 -      272]            jclr    #VT_BRANCH,x:x_STATUS_flags,_branch   ; branch every other time
                 000127
2118   
2119   
2120                                     ;  FIRST BRANCH
2121                                     ;  INITIALIZE TOP LEFT OF TUBE
2122      P:0098 4D8000  [2 -      274]            move                            y:DAMPING,x1  ; damping -> x1 (x1 not disturbed)
2123      P:0099 4EA100  [2 -      276]            move                            y:S1_BB,y0    ; BL_PREV -> y0
2124      P:009A 4EA0EB  [2 -      278]            macr    x1,y0,b                 y:S1_TB,y0    ; b += damping * BL_PREV
2125      P:009B 44DB00  [2 -      280]            move              x:(r3)+,x0                  ; coeff -> x0
2126   
2127                                     ;  JUNCTION S1 - S2 (R1 - R2)
2128      P:009C 4FA3D0  [2 -      282]            mpy     x0,y0,a                 y:S2_BB,y1    ; a = coeff * TL_PREV
2129      P:009D 5720C7  [2 -      284]            macr    -x0,y1,a  b,x:S1_TA                   ; a -= coeff * BR_PREV   b -> TL_CURR
2130      P:009E 21C4E0  [2 -      286]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2131      P:009F 4EA2A3  [2 -      288]            macr    x0,x1,a                 y:S2_TB,y0    ; a += damping * delta
2132      P:00A0 5622F8  [2 -      290]            mpy     y1,x1,b   a,x:S2_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2133      P:00A1 44DBAB  [2 -      292]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2134   
2135                                     ;  JUNCTION S2 - S3 (R2 - R3)
2136      P:00A2 4FA5D0  [2 -      294]            mpy     x0,y0,a                 y:S3_BB,y1    ; a = coeff * TL_PREV
2137      P:00A3 5721C7  [2 -      296]            macr    -x0,y1,a  b,x:S1_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2138      P:00A4 21C4E0  [2 -      298]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2139      P:00A5 4EA4A2  [2 -      300]            mac     x0,x1,a                 y:S3_TB,y0    ; a += damping * delta
2140      P:00A6 4FDCF8  [2 -      302]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV   fric_tap0-> y1
2141      P:00A7 4482AB  [2 -      304]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta    frication-> x0
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 28



2142      P:00A8 44DBC3  [2 -      306]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap0 * frication
2143      P:00A9 562400  [2 -      308]            move              a,x:S3_TA                   ; a -> TR_CURR
2144   
2145                                     ;  JUNCTION S3 - S4 (R3 - R4)
2146      P:00AA 4FA7D0  [2 -      310]            mpy     x0,y0,a                 y:S4_BB,y1    ; a = coeff * TL_PREV
2147      P:00AB 5723C7  [2 -      312]            macr    -x0,y1,a  b,x:S2_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2148      P:00AC 21C4E0  [2 -      314]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2149      P:00AD 4EB5A2  [2 -      316]            mac     x0,x1,a                 y:N1_BB,y0    ; a += damping * delta    n1 B prev-> y0
2150      P:00AE 4FDCF8  [2 -      318]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV   fric_tap1-> y1
2151      P:00AF 4482AB  [2 -      320]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta    frication-> x0
2152      P:00B0 4CA6C3  [2 -      322]            macr    y1,x0,a                 y:S4_TB,x0    ; a += tap1 * frication   s4 T prev-> x0
2153      P:00B1 572500  [2 -      324]            move              b,x:S3_BA                   ; b -> BL_CURR
2154      P:00B2 562600  [2 -      326]            move              a,x:S4_TA                   ; a -> TR_CURR
2155   
2156                                     ;  CALCULATE 3-WAY JUNCTION:  S4 - S5 - N1 (R4 - N1)
2157      P:00B3 4DA900  [2 -      328]            move                            y:S5_BB,x1    ; s5 B prev -> x1
2158   
2159      P:00B4 47DB69  [2 -      330]            tfr     x1,b      x:(r3)+,y1                  ; ALPHA_L -> y1
2160      P:00B5 47DBC0  [2 -      332]            mpy     x0,y1,a   x:(r3)+,y1                  ; ALPHA_R -> y1
2161      P:00B6 47DBF2  [2 -      334]            mac     x1,y1,a   x:(r3)+,y1                  ; ALPHA_T -> y1
2162   
2163      P:00B7 4F80B3  [2 -      336]            macr    y0,y1,a                 y:DAMPING,y1
2164      P:00B8 21C500  [2 -      338]            move              a,x1
2165      P:00B9 2000F0  [2 -      340]            mpy     x1,y1,a
2166      P:00BA 21E532  [2 -      342]            asl     a         b,x1
2167   
2168      P:00BB 21CFC7  [2 -      344]            macr    -x0,y1,a  a,b                         ; left output
2169      P:00BC 562701  [2 -      346]            tfr     b,a       a,x:S4_BA                   ; left output -> s4 B curr
2170   
2171      P:00BD 4682BF  [2 -      348]            macr    -y0,y1,b  x:x_fric_sig,y0             ; top output
2172   
2173      P:00BE 5734F6  [2 -      350]            mac     -x1,y1,a  b,x:N1_TA                   ; right output   TO -> s5 T curr
2174      P:00BF F19B00  [2 -      352]            move              x:(r3)+,x0    y:(r4)+,y1    ; coeff -> x0    fric_tap2 -> y1
2175      P:00C0 4EA8B3  [2 -      354]            macr    y1,y0,a                 y:S5_TB,y0    ; a += tap2 * frication
2176      P:00C1 562800  [2 -      356]            move              a,x:S5_TA                   ; right output -> s5 T curr
2177   
2178                                     ;  JUNCTION S5 - S6 (R4 - R5)
2179      P:00C2 4FABD0  [2 -      358]            mpy     x0,y0,a                 y:S6_BB,y1    ; a = coeff * TL_PREV
2180      P:00C3 4D80C7  [2 -      360]            macr    -x0,y1,a                y:DAMPING,x1  ; a -= coeff * BR_PREV
2181      P:00C4 21C4E0  [2 -      362]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2182      P:00C5 4EAAA2  [2 -      364]            mac     x0,x1,a                 y:S6_TB,y0    ; a += damping * delta
2183      P:00C6 4FDCF8  [2 -      366]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap3-> y1
2184      P:00C7 4482AB  [2 -      368]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2185      P:00C8 4FDCC3  [2 -      370]            macr    y1,x0,a                 y:(r4)+,y1    ; a += tap3 * frication
2186      P:00C9 562A00  [2 -      372]            move              a,x:S6_TA                   ; a -> TR_CURR
2187   
2188                                     ;  JUNCTION:  S6 - S7 (R5 internal)
2189      P:00CA 5729E0  [2 -      374]            mpy     y0,x1,a   b,x:S5_BA                   ; a = TL_PREV * damping
2190      P:00CB 4FADC3  [2 -      376]            macr    y1,x0,a                 y:S7_BB,y1    ; a += tap4 * frication   BR_PREV -> y1
2191      P:00CC 562CF9  [2 -      378]            mpyr    y1,x1,b   a,x:S7_TA                   ; b = BR_PREV * damping   a -> TR_CURR
2192   
2193                                     ;  JUNCTION S7 - S8 (R5 - R6)
2194      P:00CD 44DB00  [2 -      380]            move              x:(r3)+,x0
2195      P:00CE 4EAC00  [2 -      382]            move                            y:S7_TB,y0
2196      P:00CF 4FAFD0  [2 -      384]            mpy     x0,y0,a                 y:S8_BB,y1    ; a = coeff * TL_PREV
2197      P:00D0 572BC7  [2 -      386]            macr    -x0,y1,a  b,x:S6_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2198      P:00D1 21C4E0  [2 -      388]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2199      P:00D2 4EAEA2  [2 -      390]            mac     x0,x1,a                 y:S8_TB,y0    ; a += damping * delta
2200      P:00D3 4FDCF8  [2 -      392]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap5-> y1
2201      P:00D4 4482AB  [2 -      394]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2202      P:00D5 44DBC3  [2 -      396]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap5 * frication
2203      P:00D6 562E00  [2 -      398]            move              a,x:S8_TA                   ; a -> TR_CURR
2204   
2205                                     ;  JUNCTION S8 - S9 (R6 - R7)
2206      P:00D7 4FB1D0  [2 -      400]            mpy     x0,y0,a                 y:S9_BB,y1    ; a = coeff * TL_PREV
2207      P:00D8 572DC7  [2 -      402]            macr    -x0,y1,a  b,x:S7_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 29



2208      P:00D9 21C4E0  [2 -      404]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2209      P:00DA 4EB0A2  [2 -      406]            mac     x0,x1,a                 y:S9_TB,y0    ; a += damping * delta
2210      P:00DB 4FDCF8  [2 -      408]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap6-> y1
2211      P:00DC 4482AB  [2 -      410]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2212      P:00DD 44DBC3  [2 -      412]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap6 * frication
2213      P:00DE 563000  [2 -      414]            move              a,x:S9_TA                   ; a -> TR_CURR
2214   
2215                                     ;  JUNCTION S9 - S10 (R7 - R8)
2216      P:00DF 4FB3D0  [2 -      416]            mpy     x0,y0,a                 y:S10_BB,y1   ; a = coeff * TL_PREV
2217      P:00E0 572FC7  [2 -      418]            macr    -x0,y1,a  b,x:S8_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2218      P:00E1 21C4E0  [2 -      420]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2219      P:00E2 4EB2A2  [2 -      422]            mac     x0,x1,a                 y:S10_TB,y0   ; a += damping * delta
2220      P:00E3 4FDCF8  [2 -      424]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap7-> y1
2221      P:00E4 4482AB  [2 -      426]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2222      P:00E5 44DBC3  [2 -      428]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap7 * frication
2223      P:00E6 563200  [2 -      430]            move              a,x:S10_TA                  ; a -> TR_CURR
2224      P:00E7 573100  [2 -      432]            move              b,x:S9_BA                   ; b -> BL_CURR
2225   
2226                                     ;  MOUTH REFLECTION
2227      P:00E8 448AD9  [2 -      434]            mpyr    y0,x0,b   x:fa10,x0                   ; b = TL_PREV * coeff    fa10 -> x0
2228      P:00E9 17B000  [4 -      438]            move              b,y1          x:fb11,x1     ; scaled input -> y1     fb11 -> x1
                 00000B
2229      P:00EB 4FB3C0  [2 -      440]            mpy     x0,y1,a                 y:S10_BB,y1   ; a = fa10 * input       y[n-1] -> y1
2230      P:00EC 44DBF7  [2 -      442]            macr    -x1,y1,a  x:(r3)+,x0                  ; a -= fb11 * y[n-1]     radCoeff -> x0
2231      P:00ED 563300  [2 -      444]            move              a,x:S10_BA                  ; a -> BL_CURR
2232   
2233                                     ;  MOUTH RADIATION (INPUT IN y0, OUTPUT STORED IN y:mRadiationY)
2234      P:00EE 448CD1  [2 -      446]            mpyr    x0,y0,a   x:fa20,x0                   ; a = TL_PREV * coeff   fa20 -> x0
2235      P:00EF 14B000  [4 -      450]            move              a,y0          x:fa21,x1     ; scaled input -> y0    fa21 -> x1
                 00000D
2236      P:00F1 4F89D0  [2 -      452]            mpy     x0,y0,a                 y:mRadiationX,y1 ; a = fa20 * input      x[n-1] -> y1
2237      P:00F2 458EF2  [2 -      454]            mac     x1,y1,a   x:fb21,x1                   ; a += fa21 * x[n-1]    fb21 -> x1
2238      P:00F3 4F8A00  [2 -      456]            move                            y:mRadiationY,y1 ; y[n-1] -> y1
2239      P:00F4 4E09F7  [2 -      458]            macr    -x1,y1,a                y0,y:mRadiationX ; a -= fb21 * y[n-1]    store x[n]
2240      P:00F5 5E0A00  [2 -      460]            move                            a,y:mRadiationY ; store y[n]
2241   
2242   
2243                                     ;  CALCULATE NOSE SECTIONS
2244                                     ;  JUNCTION N1 - N2
2245      P:00F6 4EB400  [2 -      462]            move                            y:N1_TB,y0
2246      P:00F7 44DB00  [2 -      464]            move              x:(r3)+,x0
2247      P:00F8 4FB7D0  [2 -      466]            mpy     x0,y0,a                 y:N2_BB,y1    ; a = coeff * TL_PREV
2248      P:00F9 4D80C7  [2 -      468]            macr    -x0,y1,a                y:DAMPING,x1  ; a -= coeff * BR_PREV
2249      P:00FA 21C4E0  [2 -      470]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2250      P:00FB 4EB6A3  [2 -      472]            macr    x0,x1,a                 y:N2_TB,y0    ; a += damping * delta
2251      P:00FC 5636F8  [2 -      474]            mpy     y1,x1,b   a,x:N2_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2252      P:00FD 44DBAB  [2 -      476]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2253   
2254                                     ;  JUNCTION N2 - N3
2255      P:00FE 4FB9D0  [2 -      478]            mpy     x0,y0,a                 y:N3_BB,y1    ; a = coeff * TL_PREV
2256      P:00FF 5735C7  [2 -      480]            macr    -x0,y1,a  b,x:N1_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2257      P:0100 21C4E0  [2 -      482]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2258      P:0101 4EB8A3  [2 -      484]            macr    x0,x1,a                 y:N3_TB,y0    ; a += damping * delta
2259      P:0102 5638F8  [2 -      486]            mpy     y1,x1,b   a,x:N3_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2260      P:0103 44DBAB  [2 -      488]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2261   
2262                                     ;  JUNCTION N3 - N4
2263      P:0104 4FBBD0  [2 -      490]            mpy     x0,y0,a                 y:N4_BB,y1    ; a = coeff * TL_PREV
2264      P:0105 5737C7  [2 -      492]            macr    -x0,y1,a  b,x:N2_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2265      P:0106 21C4E0  [2 -      494]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2266      P:0107 4EBAA3  [2 -      496]            macr    x0,x1,a                 y:N4_TB,y0    ; a += damping * delta
2267      P:0108 563AF8  [2 -      498]            mpy     y1,x1,b   a,x:N4_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2268      P:0109 44DBAB  [2 -      500]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2269   
2270                                     ;  JUNCTION N4 - N5
2271      P:010A 4FBDD0  [2 -      502]            mpy     x0,y0,a                 y:N5_BB,y1    ; a = coeff * TL_PREV
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 30



2272      P:010B 5739C7  [2 -      504]            macr    -x0,y1,a  b,x:N3_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2273      P:010C 21C4E0  [2 -      506]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2274      P:010D 4EBCA3  [2 -      508]            macr    x0,x1,a                 y:N5_TB,y0    ; a += damping * delta
2275      P:010E 563CF8  [2 -      510]            mpy     y1,x1,b   a,x:N5_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2276      P:010F 44DBAB  [2 -      512]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2277   
2278                                     ;  JUNCTION N5 - N6
2279      P:0110 4FBFD0  [2 -      514]            mpy     x0,y0,a                 y:N6_BB,y1    ; a = coeff * TL_PREV
2280      P:0111 573BC7  [2 -      516]            macr    -x0,y1,a  b,x:N4_BA                   ; a -= coeff * BR_PREV    b -> BL_CURR
2281      P:0112 21C4E0  [2 -      518]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2282      P:0113 4EBEA3  [2 -      520]            macr    x0,x1,a                 y:N6_TB,y0    ; a += damping * delta
2283      P:0114 563EF8  [2 -      522]            mpy     y1,x1,b   a,x:N6_TA                   ; b = damping * BR_PREV   a -> TR_CURR
2284      P:0115 44DBAB  [2 -      524]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2285      P:0116 573D00  [2 -      526]            move              b,x:N5_BA                   ; b -> BL_CURR
2286   
2287                                     ;  NOSE REFLECTION
2288      P:0117 4490D9  [2 -      528]            mpyr    y0,x0,b   x:nfa10,x0                  ; b = TL_PREV * coeff    fa10 -> x0
2289      P:0118 17B000  [4 -      532]            move              b,y1          x:nfb11,x1    ; scaled input -> y1     fb11 -> x1
                 000011
2290      P:011A 4FBFC0  [2 -      534]            mpy     x0,y1,a                 y:N6_BB,y1    ; a = fa10 * input       y[n-1] -> y1
2291      P:011B 44DBF7  [2 -      536]            macr    -x1,y1,a  x:(r3)+,x0                  ; a -= fb11 * y[n-1]     radCoeff -> x0
2292      P:011C 563F00  [2 -      538]            move              a,x:N6_BA                   ; a -> BL_CURR
2293   
2294                                     ;  NOSE RADIATION (INPUT IN y0, OUTPUT STORED IN y:nRadiationY)
2295      P:011D 4492D1  [2 -      540]            mpyr    x0,y0,a   x:nfa20,x0                  ; a = TL_PREV * coeff   fa20 -> x0
2296      P:011E 14B000  [4 -      544]            move              a,y0          x:nfa21,x1    ; scaled input -> y0    fa21 -> x1
                 000013
2297      P:0120 4F8BD0  [2 -      546]            mpy     x0,y0,a                 y:nRadiationX,y1 ; a = fa20 * input      x[n-1] -> y1
2298      P:0121 4594F2  [2 -      548]            mac     x1,y1,a   x:nfb21,x1                  ; a += fa21 * x[n-1]    fb21 -> x1
2299      P:0122 4F8C00  [2 -      550]            move                            y:nRadiationY,y1 ; y[n-1] -> y1
2300      P:0123 4E0BF7  [2 -      552]            macr    -x1,y1,a                y0,y:nRadiationX ; a -= fb21 * y[n-1]    store x[n]
2301      P:0124 5E0C00  [2 -      554]            move                            a,y:nRadiationY ; store y[n]
2302   
2303                                     ;  GO TO END OF VOCAL TRACT SUBROUTINE
2304      P:0125 0AF080  [6 -      560]            jmp     _endVT
                 0001B4
2305   
2306   
2307   
2308                                     ;  SECOND BRANCH
2309                                     ;  INITIALIZE TOP LEFT OF TUBE
2310      P:0127 4D8000  [2 -      562]  _branch   move                            y:DAMPING,x1  ; damping -> x1 (x1 not disturbed)
2311      P:0128 46A100  [2 -      564]            move              x:S1_BA,y0                  ; BL_PREV -> y0
2312      P:0129 46A0EB  [2 -      566]            macr    x1,y0,b   x:S1_TA,y0                  ; b += damping * BL_PREV
2313      P:012A 44DB00  [2 -      568]            move              x:(r3)+,x0                  ; coeff -> x0
2314   
2315                                     ;  JUNCTION S1 - S2 (R1 - R2)
2316      P:012B 47A3D0  [2 -      570]            mpy     x0,y0,a   x:S2_BA,y1                  ; a = coeff * TL_PREV
2317      P:012C 5F20C7  [2 -      572]            macr    -x0,y1,a                b,y:S1_TB     ; a -= coeff * BR_PREV   b -> TL_CURR
2318      P:012D 21C4E0  [2 -      574]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2319      P:012E 46A2A3  [2 -      576]            macr    x0,x1,a   x:S2_TA,y0                  ; a += damping * delta
2320      P:012F 5E22F8  [2 -      578]            mpy     y1,x1,b                 a,y:S2_TB     ; b = damping * BR_PREV   a -> TR_CURR
2321      P:0130 44DBAB  [2 -      580]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2322   
2323                                     ;  JUNCTION S2 - S3 (R2 - R3)
2324      P:0131 47A5D0  [2 -      582]            mpy     x0,y0,a   x:S3_BA,y1                  ; a = coeff * TL_PREV
2325      P:0132 5F21C7  [2 -      584]            macr    -x0,y1,a                b,y:S1_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2326      P:0133 21C4E0  [2 -      586]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2327      P:0134 46A4A2  [2 -      588]            mac     x0,x1,a   x:S3_TA,y0                  ; a += damping * delta
2328      P:0135 4FDCF8  [2 -      590]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV   fric_tap0-> y1
2329      P:0136 4482AB  [2 -      592]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta    frication-> x0
2330      P:0137 44DBC3  [2 -      594]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap0 * frication
2331      P:0138 5E2400  [2 -      596]            move                            a,y:S3_TB     ; a -> TR_CURR
2332   
2333                                     ;  JUNCTION S3 - S4 (R3 - R4)
2334      P:0139 47A7D0  [2 -      598]            mpy     x0,y0,a   x:S4_BA,y1                  ; a = coeff * TL_PREV
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 31



2335      P:013A 5F23C7  [2 -      600]            macr    -x0,y1,a                b,y:S2_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2336      P:013B 21C4E0  [2 -      602]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2337      P:013C 46B5A2  [2 -      604]            mac     x0,x1,a   x:N1_BA,y0                  ; a += damping * delta    n1 B prev-> y0
2338      P:013D 4FDCF8  [2 -      606]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap1-> y1
2339      P:013E 4482AB  [2 -      608]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta    frication-> x0
2340      P:013F 44A6C3  [2 -      610]            macr    y1,x0,a   x:S4_TA,x0                  ; a += tap1 * frication   s4 T prev-> x0
2341      P:0140 5F2500  [2 -      612]            move                            b,y:S3_BB     ; b -> BL_CURR
2342      P:0141 5E2600  [2 -      614]            move                            a,y:S4_TB     ; a -> TR_CURR
2343   
2344                                     ;  CALCULATE 3-WAY JUNCTION:  S4 - S5 - N1 (R4 - N1)
2345      P:0142 45A900  [2 -      616]            move              x:S5_BA,x1                  ; s5 B prev -> x1
2346   
2347      P:0143 47DB69  [2 -      618]            tfr     x1,b      x:(r3)+,y1                  ; ALPHA_L -> y1
2348      P:0144 47DBC0  [2 -      620]            mpy     x0,y1,a   x:(r3)+,y1                  ; ALPHA_R -> y1
2349      P:0145 47DBF2  [2 -      622]            mac     x1,y1,a   x:(r3)+,y1                  ; ALPHA_T -> y1
2350   
2351      P:0146 4F80B3  [2 -      624]            macr    y0,y1,a                 y:DAMPING,y1
2352      P:0147 21C500  [2 -      626]            move              a,x1
2353      P:0148 2000F0  [2 -      628]            mpy     x1,y1,a
2354      P:0149 21E532  [2 -      630]            asl     a         b,x1
2355   
2356      P:014A 21CFC7  [2 -      632]            macr    -x0,y1,a  a,b                         ; left output
2357      P:014B 5E2701  [2 -      634]            tfr     b,a                     a,y:S4_BB     ; left output -> s4 B curr
2358   
2359      P:014C 4682BF  [2 -      636]            macr    -y0,y1,b  x:x_fric_sig,y0             ; top output
2360   
2361      P:014D 5F34F6  [2 -      638]            mac     -x1,y1,a                b,y:N1_TB     ; right output   TO -> s5 T curr
2362      P:014E F19B00  [2 -      640]            move              x:(r3)+,x0    y:(r4)+,y1    ; coeff -> x0    fric_tap2 -> y1
2363      P:014F 46A8B3  [2 -      642]            macr    y1,y0,a   x:S5_TA,y0                  ; a += tap2 * frication
2364      P:0150 5E2800  [2 -      644]            move                            a,y:S5_TB     ; right output -> s5 T curr
2365   
2366   
2367                                     ;  CALCULATE MOUTH SECTIONS
2368                                     ;  JUNCTION S5 - S6 (R4 - R5)
2369      P:0151 47ABD0  [2 -      646]            mpy     x0,y0,a   x:S6_BA,y1                  ; a = coeff * TL_PREV
2370      P:0152 4D80C7  [2 -      648]            macr    -x0,y1,a                y:DAMPING,x1  ; a -= coeff * BR_PREV
2371      P:0153 21C4E0  [2 -      650]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2372      P:0154 46AAA2  [2 -      652]            mac     x0,x1,a   x:S6_TA,y0                  ; a += damping * delta
2373      P:0155 4FDCF8  [2 -      654]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap3-> y1
2374      P:0156 4482AB  [2 -      656]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2375      P:0157 4FDCC3  [2 -      658]            macr    y1,x0,a                 y:(r4)+,y1    ; a += tap3 * frication
2376      P:0158 5E2A00  [2 -      660]            move                            a,y:S6_TB     ; a -> TR_CURR
2377   
2378                                     ;  JUNCTION:  S6 - S7 (R5 internal)
2379      P:0159 5F29E0  [2 -      662]            mpy     y0,x1,a                 b,y:S5_BB     ; a = TL_PREV * damping
2380      P:015A 47ADC3  [2 -      664]            macr    y1,x0,a   x:S7_BA,y1                  ; a += tap4 * frication   BR_PREV -> y1
2381      P:015B 5E2CF9  [2 -      666]            mpyr    y1,x1,b                 a,y:S7_TB     ; b = BR_PREV * damping   a -> TR_CURR
2382   
2383                                     ;  JUNCTION S7 - S8 (R5 - R6)
2384      P:015C 44DB00  [2 -      668]            move              x:(r3)+,x0
2385      P:015D 46AC00  [2 -      670]            move              x:S7_TA,y0
2386      P:015E 47AFD0  [2 -      672]            mpy     x0,y0,a   x:S8_BA,y1                  ; a = coeff * TL_PREV
2387      P:015F 5F2BC7  [2 -      674]            macr    -x0,y1,a                b,y:S6_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2388      P:0160 21C4E0  [2 -      676]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2389      P:0161 46AEA2  [2 -      678]            mac     x0,x1,a   x:S8_TA,y0                  ; a += damping * delta
2390      P:0162 4FDCF8  [2 -      680]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap5-> y1
2391      P:0163 4482AB  [2 -      682]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2392      P:0164 44DBC3  [2 -      684]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap5 * frication
2393      P:0165 5E2E00  [2 -      686]            move                            a,y:S8_TB     ; a -> TR_CURR
2394   
2395                                     ;  JUNCTION S8 - S9 (R6 - R7)
2396      P:0166 47B1D0  [2 -      688]            mpy     x0,y0,a   x:S9_BA,y1                  ; a = coeff * TL_PREV
2397      P:0167 5F2DC7  [2 -      690]            macr    -x0,y1,a                b,y:S7_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2398      P:0168 21C4E0  [2 -      692]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2399      P:0169 46B0A2  [2 -      694]            mac     x0,x1,a   x:S9_TA,y0                  ; a += damping * delta
2400      P:016A 4FDCF8  [2 -      696]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap6-> y1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 32



2401      P:016B 4482AB  [2 -      698]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2402      P:016C 44DBC3  [2 -      700]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap6 * frication
2403      P:016D 5E3000  [2 -      702]            move                            a,y:S9_TB     ; a -> TR_CURR
2404   
2405                                     ;  JUNCTION S9 - S10 (R7 - R8)
2406      P:016E 47B3D0  [2 -      704]            mpy     x0,y0,a   x:S10_BA,y1                 ; a = coeff * TL_PREV
2407      P:016F 5F2FC7  [2 -      706]            macr    -x0,y1,a                b,y:S8_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2408      P:0170 21C4E0  [2 -      708]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2409      P:0171 46B2A2  [2 -      710]            mac     x0,x1,a   x:S10_TA,y0                 ; a += damping * delta
2410      P:0172 4FDCF8  [2 -      712]            mpy     y1,x1,b                 y:(r4)+,y1    ; b = damping * BR_PREV          fric_tap7-> y1
2411      P:0173 4482AB  [2 -      714]            macr    x0,x1,b   x:x_fric_sig,x0             ; b += damping * delta   frication-> x0
2412      P:0174 44DBC3  [2 -      716]            macr    y1,x0,a   x:(r3)+,x0                  ; a += tap7 * frication
2413      P:0175 5E3200  [2 -      718]            move                            a,y:S10_TB    ; a -> TR_CURR
2414      P:0176 5F3100  [2 -      720]            move                            b,y:S9_BB     ; b -> BL_CURR
2415   
2416                                     ;  MOUTH REFLECTION
2417      P:0177 448AD9  [2 -      722]            mpyr    y0,x0,b   x:fa10,x0                   ; b = TL_PREV * coeff    fa10 -> x0
2418      P:0178 17B000  [4 -      726]            move              b,y1          x:fb11,x1     ; scaled input -> y1     fb11 -> x1
                 00000B
2419      P:017A 47B3C0  [2 -      728]            mpy     x0,y1,a   x:S10_BA,y1                 ; a = fa10 * input       y[n-1] -> y1
2420      P:017B 44DBF7  [2 -      730]            macr    -x1,y1,a  x:(r3)+,x0                  ; a -= fb11 * y[n-1]     radCoeff -> x0
2421      P:017C 5E3300  [2 -      732]            move                            a,y:S10_BB    ; a -> BL_CURR
2422   
2423                                     ;  MOUTH RADIATION (INPUT IN y0, OUTPUT STORED IN y:mRadiationY)
2424      P:017D 448CD1  [2 -      734]            mpyr    x0,y0,a   x:fa20,x0                   ; a = TL_PREV * coeff   fa20 -> x0
2425      P:017E 14B000  [4 -      738]            move              a,y0          x:fa21,x1     ; scaled input -> y0    fa21 -> x1
                 00000D
2426      P:0180 4F89D0  [2 -      740]            mpy     x0,y0,a                 y:mRadiationX,y1 ; a = fa20 * input      x[n-1] -> y1
2427      P:0181 458EF2  [2 -      742]            mac     x1,y1,a   x:fb21,x1                   ; a += fa21 * x[n-1]    fb21 -> x1
2428      P:0182 4F8A00  [2 -      744]            move                            y:mRadiationY,y1 ; y[n-1] -> y1
2429      P:0183 4E09F7  [2 -      746]            macr    -x1,y1,a                y0,y:mRadiationX ; a -= fb21 * y[n-1]    store x[n]
2430      P:0184 5E0A00  [2 -      748]            move                            a,y:mRadiationY ; store y[n]
2431   
2432   
2433                                     ;  CALCULATE NOSE SECTIONS
2434                                     ;  JUNCTION N1 - N2
2435      P:0185 46B400  [2 -      750]            move              x:N1_TA,y0
2436      P:0186 44DB00  [2 -      752]            move              x:(r3)+,x0
2437      P:0187 47B7D0  [2 -      754]            mpy     x0,y0,a   x:N2_BA,y1                  ; a = coeff * TL_PREV
2438      P:0188 4D80C7  [2 -      756]            macr    -x0,y1,a                y:DAMPING,x1  ; a -= coeff * BR_PREV
2439      P:0189 21C4E0  [2 -      758]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2440      P:018A 46B6A3  [2 -      760]            macr    x0,x1,a   x:N2_TA,y0                  ; a += damping * delta
2441      P:018B 5E36F8  [2 -      762]            mpy     y1,x1,b                 a,y:N2_TB     ; b = damping * BR_PREV   a -> TR_CURR
2442      P:018C 44DBAB  [2 -      764]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2443   
2444                                     ;  JUNCTION N2 - N3
2445      P:018D 47B9D0  [2 -      766]            mpy     x0,y0,a   x:N3_BA,y1                  ; a = coeff * TL_PREV
2446      P:018E 5F35C7  [2 -      768]            macr    -x0,y1,a                b,y:N1_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2447      P:018F 21C4E0  [2 -      770]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2448      P:0190 46B8A3  [2 -      772]            macr    x0,x1,a   x:N3_TA,y0                  ; a += damping * delta
2449      P:0191 5E38F8  [2 -      774]            mpy     y1,x1,b                 a,y:N3_TB     ; b = damping * BR_PREV   a -> TR_CURR
2450      P:0192 44DBAB  [2 -      776]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2451   
2452                                     ;  JUNCTION N3 - N4
2453      P:0193 47BBD0  [2 -      778]            mpy     x0,y0,a   x:N4_BA,y1                  ; a = coeff * TL_PREV
2454      P:0194 5F37C7  [2 -      780]            macr    -x0,y1,a                b,y:N2_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2455      P:0195 21C4E0  [2 -      782]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2456      P:0196 46BAA3  [2 -      784]            macr    x0,x1,a   x:N4_TA,y0                  ; a += damping * delta
2457      P:0197 5E3AF8  [2 -      786]            mpy     y1,x1,b                 a,y:N4_TB     ; b = damping * BR_PREV   a -> TR_CURR
2458      P:0198 44DBAB  [2 -      788]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2459   
2460                                     ;  JUNCTION N4 - N5
2461      P:0199 47BDD0  [2 -      790]            mpy     x0,y0,a   x:N5_BA,y1                  ; a = coeff * TL_PREV
2462      P:019A 5F39C7  [2 -      792]            macr    -x0,y1,a                b,y:N3_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2463      P:019B 21C4E0  [2 -      794]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2464      P:019C 46BCA3  [2 -      796]            macr    x0,x1,a   x:N5_TA,y0                  ; a += damping * delta
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 33



2465      P:019D 5E3CF8  [2 -      798]            mpy     y1,x1,b                 a,y:N5_TB     ; b = damping * BR_PREV   a -> TR_CURR
2466      P:019E 44DBAB  [2 -      800]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2467   
2468                                     ;  JUNCTION N5 - N6
2469      P:019F 47BFD0  [2 -      802]            mpy     x0,y0,a   x:N6_BA,y1                  ; a = coeff * TL_PREV
2470      P:01A0 5F3BC7  [2 -      804]            macr    -x0,y1,a                b,y:N4_BB     ; a -= coeff * BR_PREV    b -> BL_CURR
2471      P:01A1 21C4E0  [2 -      806]            mpy     y0,x1,a   a,x0                        ; a = damping * TL_PREV   x0 = delta
2472      P:01A2 46BEA3  [2 -      808]            macr    x0,x1,a   x:N6_TA,y0                  ; a += damping * delta
2473      P:01A3 5E3EF8  [2 -      810]            mpy     y1,x1,b                 a,y:N6_TB     ; b = damping * BR_PREV   a -> TR_CURR
2474      P:01A4 44DBAB  [2 -      812]            macr    x0,x1,b   x:(r3)+,x0                  ; b += damping * delta
2475      P:01A5 5F3D00  [2 -      814]            move                            b,y:N5_BB     ; b -> BL_CURR
2476   
2477                                     ;  NOSE REFLECTION
2478      P:01A6 4490D9  [2 -      816]            mpyr    y0,x0,b   x:nfa10,x0                  ; b = TL_PREV * coeff    fa10 -> x0
2479      P:01A7 17B000  [4 -      820]            move              b,y1          x:nfb11,x1    ; scaled input -> y1     fb11 -> x1
                 000011
2480      P:01A9 47BFC0  [2 -      822]            mpy     x0,y1,a   x:N6_BA,y1                  ; a = fa10 * input       y[n-1] -> y1
2481      P:01AA 44DBF7  [2 -      824]            macr    -x1,y1,a  x:(r3)+,x0                  ; a -= fb11 * y[n-1]     radCoeff -> x0
2482      P:01AB 5E3F00  [2 -      826]            move                            a,y:N6_BB     ; a -> BL_CURR
2483   
2484                                     ;  NOSE RADIATION (INPUT IN y0, OUTPUT STORED IN y:nRadiationY)
2485      P:01AC 4492D1  [2 -      828]            mpyr    x0,y0,a   x:nfa20,x0                  ; a = TL_PREV * coeff   fa20 -> x0
2486      P:01AD 14B000  [4 -      832]            move              a,y0          x:nfa21,x1    ; scaled input -> y0    fa21 -> x1
                 000013
2487      P:01AF 4F8BD0  [2 -      834]            mpy     x0,y0,a                 y:nRadiationX,y1 ; a = fa20 * input      x[n-1] -> y1
2488      P:01B0 4594F2  [2 -      836]            mac     x1,y1,a   x:nfb21,x1                  ; a += fa21 * x[n-1]    fb21 -> x1
2489      P:01B1 4F8C00  [2 -      838]            move                            y:nRadiationY,y1 ; y[n-1] -> y1
2490      P:01B2 4E0BF7  [2 -      840]            macr    -x1,y1,a                y0,y:nRadiationX ; a -= fb21 * y[n-1]    store x[n]
2491      P:01B3 5E0C00  [2 -      842]            move                            a,y:nRadiationY ; store y[n]
2492   
2493   
2494                                     ;  THE TWO BRANCHES JOIN HERE
2495                                     ;  ADD NOSE AND MOUTH OUTPUT TOGETHER (y:nRadiation in a)
2496      P:01B4 4D8A00  [2 -      844]  _endVT    move                            y:mRadiationY,x1
2497      P:01B5 469960  [2 -      846]            add     x1,a      x:vtScale,y0                ; output is about 8 bits softer
2498   
2499   
2500   
2501                                     ;***************************************************************************************
2502                                     ;  ROUTINE:     throat
2503                                     ;
2504                                     ;  Synthesizes the effect of transmission of the glottal pulse through the membranes
2505                                     ;  of the throat and mouth, using a low pass filter and gain control.
2506                                     ;
2507                                     ;  Input:       x:x_ngs_signal, y0 (vtScale)
2508                                     ;  Output:      b
2509                                     ;
2510                                     ;  a (vocalTract signal) not used
2511                                     ;***************************************************************************************
2512   
2513      P:01B6 448100  [2 -      848]            move              x:x_ngs_signal,x0           ; noisy glottal source -> x0
2514      P:01B7 4D8ED8  [2 -      850]            mpy     x0,y0,b                 y:throatY,x1  ; scaled input -> b    y[n-1] -> x1
2515      P:01B8 18F000  [4 -      854]            move              b,x0          y:ta0,y0      ; input -> x0         ta0 -> y0
                 000052
2516      P:01BA 4E8DD8  [2 -      856]            mpy     x0,y0,b                 y:tb1,y0      ; b = input * ta0      tb1 -> y0
2517      P:01BB 4E8FEB  [2 -      858]            macr    x1,y0,b                 y:throatGain,y0 ; b += y[n-1] * tb1    gain -> y0
2518      P:01BC 21E400  [2 -      860]            move              b,x0                        ; b -> x0
2519      P:01BD 5F0ED9  [2 -      862]            mpyr    x0,y0,b                 b,y:throatY   ; b = output * gain    store y[n]
2520   
2521   
2522   
2523                                     ;***************************************************************************************
2524                                     ;  ROUTINE:     sum_throat_vt
2525                                     ;
2526                                     ;  Sums the signals from the throat and vocal tract, and shifts this left to boost the
2527                                     ;  weak signal.  For SSI output, the signal is shifted left 11 bits, 3 to boost the
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 34



2528                                     ;  low amplitude signal, and 8 to move the sample into the upper 16 bits of the word.
2529                                     ;  In all other cases, the signal is shifted left 3 bits to boost the weak signal.
2530                                     ;
2531                                     ;  Input:       a (vocal tract signal), b (throat signal)
2532                                     ;  Output:      a0 (summed & shifted signal), x0 (SRC emptyPtr)
2533                                     ;***************************************************************************************
2534   
2535      P:01BE 4F9110  [2 -      864]            add     b,a                     y:left_shift,y1 ; sum throat signal & vt signal, and
2536      P:01BF 21C500  [2 -      866]            move              a,x1                        ; get shift constant
2537      P:01C0 22E4F0  [2 -      868]            mpy     x1,y1,a   r7,x0                       ; shift output signal  SRC emptyPtr->x0
2538   
2539   
2540   
2541                                     ;***************************************************************************************
2542                                     ;  ROUTINE:     dataFill
2543                                     ;
2544                                     ;  Fills the sample rate conversion (SRC) buffer with the input value.  The buffer is
2545                                     ;  emptied (and thus the samples converted to the new sample rate) when full.
2546                                     ;
2547                                     ;  Input:       a0 (input sample), x0 (SRC emptyPtr: r7)
2548                                     ;  Output:      x:(r5)
2549                                     ;***************************************************************************************
2550   
2551      P:01C1 505D00  [2 -      870]            move              a0,x:(r5)+
2552      P:01C2 22AF00  [2 -      872]            move              r5,b
2553      P:01C3 20004D  [2 -      874]            cmp     x0,b
2554      P:01C4 0BF0AA  [6 -      880]            jseq    dataEmpty
                 0022A1
2555   
2556   
2557   
2558                                     ;***************************************************************************************
2559                                     ;  ROUTINE:     radiiInterpolation
2560                                     ;
2561                                     ;  Interpolates the scattering coefficient values using linear interpolation.
2562                                     ;
2563                                     ;  Input:       none
2564                                     ;  Output:      none
2565                                     ;***************************************************************************************
2566   
2567                                               IF      INTERP_RADII
2568      P:01C6 639A00  [2 -      882]            move              x:coeff_mem,r3
2569      P:01C7 6C9B00  [2 -      884]            move                            y:delta_mem,r4
2570      P:01C8 000000  [2 -      886]            nop
2571   
2572      P:01C9 F89B00  [2 -      888]            move              x:(r3)+,a     y:(r4)+,y0
2573      P:01CA FD9350  [2 -      890]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2574      P:01CB 565B78  [2 -      892]            add     y1,b      a,x:(r3)+
2575      P:01CC 575B00  [2 -      894]            move              b,x:(r3)+
2576   
2577      P:01CD F89B00  [2 -      896]            move              x:(r3)+,a     y:(r4)+,y0
2578      P:01CE FD9350  [2 -      898]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2579      P:01CF 565B78  [2 -      900]            add     y1,b      a,x:(r3)+
2580      P:01D0 575B00  [2 -      902]            move              b,x:(r3)+
2581   
2582      P:01D1 F89B00  [2 -      904]            move              x:(r3)+,a     y:(r4)+,y0
2583      P:01D2 FD9350  [2 -      906]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2584      P:01D3 565B78  [2 -      908]            add     y1,b      a,x:(r3)+
2585      P:01D4 575B00  [2 -      910]            move              b,x:(r3)+
2586   
2587      P:01D5 F89B00  [2 -      912]            move              x:(r3)+,a     y:(r4)+,y0
2588      P:01D6 FD9350  [2 -      914]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2589      P:01D7 565B78  [2 -      916]            add     y1,b      a,x:(r3)+
2590      P:01D8 575B00  [2 -      918]            move              b,x:(r3)+
2591   
2592      P:01D9 F89B00  [2 -      920]            move              x:(r3)+,a     y:(r4)+,y0
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 35



2593      P:01DA FD9350  [2 -      922]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2594      P:01DB 565B78  [2 -      924]            add     y1,b      a,x:(r3)+
2595      P:01DC 575B00  [2 -      926]            move              b,x:(r3)+
2596   
2597      P:01DD F89B00  [2 -      928]            move              x:(r3)+,a     y:(r4)+,y0
2598      P:01DE FD9350  [2 -      930]            add     y0,a      x:(r3)-,b     y:(r4)+,y1
2599      P:01DF 565B78  [2 -      932]            add     y1,b      a,x:(r3)+
2600      P:01E0 575B00  [2 -      934]            move              b,x:(r3)+
2601   
2602      P:01E1 F88300  [2 -      936]            move              x:(r3),a      y:(r4)+,y0
2603      P:01E2 200050  [2 -      938]            add     y0,a
2604      P:01E3 565B00  [2 -      940]            move              a,x:(r3)+
2605                                               ENDIF
2606   
2607      P:01E4 0C003C  [4 -      944]            jmp     _top                                  ; loop forever
2608   
2609   
2610   
2611                                     ;***************************************************************************************
2612                                     ;  SUBROUTINE:  write_DMA_buffer
2613                                     ;
2614                                     ;  Writes one complete DMA output buffer to the host, using the NeXT specified DMA
2615                                     ;  protocol.
2616                                     ;
2617                                     ;  Input:       none
2618                                     ;  Output:      none
2619                                     ;***************************************************************************************
2620   
2621                                     write_DMA_buffer
2622                                               IF      SSI_OUTPUT
2639                                               ELSE
2640                                               IF      SYNC_DMA
2641      P:01E5 0A0000  [4 -      948]            bclr    #DMA_OUT_DONE,x:x_STATUS_flags        ; clear dma-out done flag
2642                                               writeHost #DMA_OUT_REQ                        ; request host for dma-out
2643  +   P:01E6 0AA981  [6 -      954]            jclr    #m_htde,x:m_hsr,*
                 0001E6
2644  +   P:01E8 08F4AB  [4 -      958]            movep             #DMA_OUT_REQ,x:m_htx
                 050001
2645   
2646      P:01EA 0AA984  [6 -      964]            jclr    #m_hf1,x:m_hsr,*                      ; loop until host acknowledges (HF1=1)
                 0001EA
2647   
2648      P:01EC 060084  [6 -      970]            do      #DMA_OUT_SIZE,_send_loop              ; top of DMA buffer send loop
                 0001F0
2649      P:01EE 0AA981  [6 -      976]            jclr    #m_htde,x:m_hsr,*                     ; loop until htde bit of HSR is set
                 0001EE
2650      P:01F0 08DEEB  [4 -      980]            movep             y:(r6)+,x:m_htx             ; send buffer element to host
2651                                     _send_loop
2652      P:01F1 0A00A0  [6 -      986]            jset    #DMA_OUT_DONE,x:x_STATUS_flags,_endDMA ; if interrupt has set flags,
                 0001F8
2653      P:01F3 0AA981  [6 -      992]            jclr    #m_htde,x:m_hsr,_send_loop            ; then go to end;  else keep
                 0001F1
2654      P:01F5 08F4AB  [4 -      996]            movep             #0,x:m_htx                  ; sending 0s until interrupt sets flags
                 000000
2655      P:01F7 0C01F1  [4 -     1000]            jmp     _send_loop
2656                                     _endDMA
2657   
2658      P:01F8 0AA9A4  [6 -     1006]            jset    #m_hf1,x:m_hsr,*                      ; loop until host ack. has ended (HF1=0)
                 0001F8
2659   
2660      P:01FA 00000C  [4 -     1010]            rts
2661   
2662   
2663                                               ELSE
2678                                               ENDIF
2679                                               ENDIF
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 36



2680   
2681   
2682   
2683                                               IF      *>512
2685                                               ENDIF
2686   
2687   
2688   
2689      P:2000                                   org     p:OFF_CHIP_PROGRAM_START
2690   
2691   
2692                                     ;***************************************************************************************
2693                                     ;  SUBROUTINE:  reset
2694                                     ;
2695                                     ;  Resets the dsp chip, and initializes variables and registers.
2696                                     ;***************************************************************************************
2697   
2698                                     ;  DISABLE HOST COMMANDS AND INTERRUPTS
2699      P:2000 0AA802  [4 -     1014]  reset     bclr    #m_hcie,x:m_hcr                       ; disable host command interrupts
2700      P:2001 0AA800  [4 -     1018]            bclr    #m_hrie,x:m_hcr                       ; disable host receive interrupt
2701                                                                                             ; (no interrupts while setting up)
2702                                     ;  SET UP CHIP
2703      P:2002 0506BA  [2 -     1020]            movec             #6,omr                      ; chip set to mode 2; ROM enabled
2704      P:2003 0AA020  [4 -     1024]            bset    #0,x:m_pbc                            ; set port B to be host interface
2705      P:2004 0AA323  [4 -     1028]            bset    #3,x:m_pcddr                          ; set pin 3 (pc3) of port C to be output
2706      P:2005 0AA503  [4 -     1032]            bclr    #3,x:m_pcd                            ; zero to enable the external ram
2707                                               IF      BLACK
2708      P:2006 08F4BE  [4 -     1036]            movep             #>$000000,x:m_bcr           ; set 0 wait states for all external RAM
                 000000
2709                                               ENDIF
2710                                               IF      MSOUND
2714                                               ENDIF
2715   
2716                                               IF      SSI_OUTPUT
2719                                               ELSE
2720      P:2008 08F4BF  [4 -     1040]            movep             #>$000c00,x:m_ipr           ; set interrupt priority register to
                 000C00
2721                                                                                             ; SSI=0, SCI=0, HOST=2
2722                                               ENDIF
2723   
2724                                               IF      SSI_OUTPUT
2735                                               ENDIF
2736   
2737   
2738                                     ;  MOVE BETA TABLE FROM LOW MEMORY (FILLED BY LOADER) TO HIGH MEMORY
2739      P:200A 63F400  [4 -     1044]            move              #>temp_betaTable,r3         ; set register to base of temporary memory
                 0000C0
2740      P:200C 64F400  [4 -     1048]            move              #>l_betaTable,r4            ; set register to base of betaTable memory
                 0023C0
2741      P:200E 064080  [6 -     1054]            do      #64,_move                             ; transfer the table
                 002011
2742      P:2010 5EDB00  [2 -     1056]            move                            y:(r3)+,a
2743      P:2011 565C00  [2 -     1058]            move              a,x:(r4)+
2744                                     _move
2745   
2746                                     ;  ON MSOUND, CREATE A DUPLICATE SINE WAVE TABLE IN HIGH X MEMORY 
2747                                               IF      MSOUND
2754                                               ENDIF
2755   
2756                                     ;  SET UP VARIABLES
2757      P:2012 200013  [2 -     1060]            clr     a
2758      P:2013 401F00  [2 -     1062]            move              a10,l:l_currentPhase        ; set current phase angle to 1; fix this later
2759      P:2014 560000  [2 -     1064]            move              a,x:x_STATUS_flags          ; clear status flags
2760   
2761                                     ;  CLEAR BANDPASS FILTER MEMORY
2762      P:2015 5E0500  [2 -     1066]            move                            a,y:y_bp_xn1  ; clear bandpass filter x and y memory
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 37



2763      P:2016 5E0600  [2 -     1068]            move                            a,y:y_bp_xn2
2764      P:2017 5E0700  [2 -     1070]            move                            a,y:y_bp_yn1
2765      P:2018 5E0800  [2 -     1072]            move                            a,y:y_bp_yn2
2766   
2767                                     ;  CLEAR TUBE MEMORY
2768      P:2019 64F400  [4 -     1076]            move              #>$0020,r4
                 000020
2769      P:201B 062080  [6 -     1082]            do      #32,_endloopb
                 00201D
2770      P:201D 405C00  [2 -     1084]            move              a10,l:(r4)+
2771                                     _endloopb
2772   
2773                                     ;  CLEAR MOUTH RADIATION FILTER MEMORY
2774      P:201E 5E0900  [2 -     1086]            move                            a,y:mRadiationX
2775      P:201F 5E0A00  [2 -     1088]            move                            a,y:mRadiationY
2776   
2777                                     ;  CLEAR NOSE RADIATION FILTER MEMORY
2778      P:2020 5E0B00  [2 -     1090]            move                            a,y:nRadiationX
2779      P:2021 5E0C00  [2 -     1092]            move                            a,y:nRadiationY
2780   
2781                                     ;  CLEAR THROAT LP FILTER MEMORY
2782      P:2022 5E0E00  [2 -     1094]            move                            a,y:throatY
2783   
2784                                     ;  CLEAR SAMPLE RATE CONVERSION BUFFER
2785      P:2023 64F400  [4 -     1098]            move              #>src_buffer_base,r4
                 003200
2786      P:2025 060082  [6 -     1104]            do      #SRC_BUFFER_SIZE,_endloop2
                 002027
2787      P:2027 565C00  [2 -     1106]            move              a,x:(r4)+
2788                                     _endloop2
2789   
2790                                     ;  SET UP DMA INPUT BUFFER VARIABLES
2791      P:2028 567000  [4 -     1110]            move              a,x:x_tableCount
                 00005D
2792   
2793                                     ;  SET UP THE CONTROL-RATE COUNT
2794      P:202A 5E1000  [2 -     1112]            move                            a,y:cr_count
2795   
2796                                     ;  SET UP OSCILLATOR AMPLITUDE, READY FOR INTERPOLATION
2797      P:202B 5E0200  [2 -     1114]            move                            a,y:OSC_AMP   ; set oscil ampl to 0 (ready for interpolation)
2798   
2799                                     ;  SET UP SCATTERING COEFFICIENT VARIABLES, READY FOR INTERPOLATION
2800                                               IF      INTERP_RADII
2801      P:202C 649A00  [2 -     1116]            move              x:coeff_mem,r4
2802      P:202D 060D80  [6 -     1122]            do      #13,_endloop3                         ; clear the control-rate coefficient 
                 00202F
2803      P:202F 565C00  [2 -     1124]            move              a,x:(r4)+                   ; memory first
2804                                     _endloop3
2805   
2806      P:2030 2F4000  [2 -     1126]            move              #@cvf(0.5),b                ; some coefficients are not set to 0.0
2807      P:2031 577000  [4 -     1130]            move              b,x:ALPHA_L
                 000043
2808      P:2033 577000  [4 -     1134]            move              b,x:ALPHA_R
                 000044
2809      P:2035 57F400  [4 -     1138]            move              #@cvf(-0.871260),b
                 907A8D
2810      P:2037 577000  [4 -     1142]            move              b,x:OPC_REFL
                 00004A
2811      P:2039 57F400  [4 -     1146]            move              #@cvf(0.128740),b
                 107A8D
2812      P:203B 577000  [4 -     1150]            move              b,x:OPC_RAD
                 00004B
2813      P:203D 2F8000  [2 -     1152]            move              #@cvf(-1.0),b
2814      P:203E 577000  [4 -     1156]            move              b,x:NC_1
                 00004C
2815                                               ENDIF
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 38



2816   
2817                                     ;  SET UP REGISTERS
2818                                               IF      MSOUND
2820                                               ELSE
2821      P:2040 60F400  [4 -     1160]            move              #>sine_wave_table,r0        ; set register to base of waveform table
                 000100
2822                                               ENDIF
2823      P:2042 44F400  [4 -     1164]            move              #>SINE_TABLE_SIZE-1,x0
                 0000FF
2824      P:2044 440600  [2 -     1166]            move              x0,x:x_tableMod             ; set mask to tablesize - 1
2825      P:2045 04C4A0  [2 -     1168]            move              x0,m0                       ; set modulus for waveform table
2826   
2827                                               IF      SSI_OUTPUT
2837                                               ELSE
2838                                               IF      SYNC_DMA
2839      P:2046 56F400  [4 -     1172]            move              #>dma_out_buffer,a          ; store base of dma buffer
                 003400
2840      P:2048 561500  [2 -     1174]            move              a,x:dma_fill_base
2841      P:2049 21D600  [2 -     1176]            move              a,r6
2842      P:204A 05F426  [4 -     1180]            move              #>DMA_OUT_SIZE-1,m6         ; set modulus for dma buffer
                 0003FF
2843   
2844                                               ELSE
2854                                               ENDIF
2855                                               ENDIF
2856   
2857                                               IF      OVERSAMPLE_OSC
2858      P:204C 63F400  [4 -     1184]            move              #>l_FIR_base,r3             ; set register to base of FIR filter memory
                 0000C0
2859      P:204E 630400  [2 -     1186]            move              r3,x:FIR_x_ptr
2860      P:204F 64F400  [4 -     1190]            move              #>l_FIR_base,r4             ; set register to base of FIR filter memory
                 0000C0
2861      P:2051 640500  [2 -     1192]            move              r4,x:FIR_y_ptr              ; modulus set when coefficients loaded (HC)
2862                                               ENDIF
2863   
2864      P:2052 05F421  [4 -     1196]            move              #>SRC_BUFFER_SIZE-1,m1      ; set moduli for srate conversion buffer
                 0001FF
2865      P:2054 05F427  [4 -     1200]            move              #>SRC_BUFFER_SIZE-1,m7
                 0001FF
2866      P:2056 05F425  [4 -     1204]            move              #>SRC_BUFFER_SIZE-1,m5
                 0001FF
2867   
2868      P:2058 75F400  [4 -     1208]            move              #>PADSIZE,n5                ; set n5 to padsize
                 00001A
2869   
2870      P:205A 65F400  [4 -     1212]            move              #>src_buffer_base,r5        ; emptyPtr = src_buffer_base
                 003200
2871      P:205C 67F400  [4 -     1216]            move              #>src_buffer_base,r7
                 003200
2872   
2873      P:205E 204D00  [2 -     1218]            move              (r5)+n5                     ; fillPtr = src_buffer_base + padsize
2874   
2875      P:205F 73F400  [4 -     1222]            move              #>L_RANGE,n3                ; set filter increments
                 000040
2876      P:2061 74F400  [4 -     1226]            move              #>L_RANGE,n4
                 000040
2877   
2878   
2879                                     ;  INITIALIZE INPUT SCALE FOR THE VOCAL TRACT
2880      P:2063 2E0400  [2 -     1228]            move              #VT_SCALE,a
2881      P:2064 561900  [2 -     1230]            move              a,x:vtScale
2882   
2883                                     ;  INITIALIZE TIME REGISTER
2884      P:2065 54F400  [4 -     1234]            move              #>L_RANGE,a1
                 000040
2885      P:2067 481C00  [2 -     1236]            move              a,l:l_timeReg
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 39



2886   
2887   
2888                                     ;  UNMASK INTERRUPTS
2889      P:2068 0AA822  [4 -     1240]            bset    #m_hcie,x:m_hcr                       ; enable host command interrupts
2890      P:2069 0500B9  [2 -     1242]            move              #0,sr                       ; unmask interrupts
2891   
2892                                     ;  JUMP TO MAIN LOOP
2893      P:206A 0C003A  [4 -     1246]            jmp     main
2894   
2895   
2896   
2897                                     ;***************************************************************************************
2898                                     ;  HOST COMMAND SERVICE ROUTINE:  stop_synth
2899                                     ;
2900                                     ;  Clears the running status flag, and if doing SSI output to DAC, turns off the SSI
2901                                     ;  transmit interrupt and sends some zeros to avoid clicking on next reset.
2902                                     ;
2903                                     ;  Input:       none
2904                                     ;  Output:      none
2905                                     ;***************************************************************************************
2906   
2907                                     stop_synth
2908      P:206B 0A0003  [4 -     1250]            bclr    #RUN_STATUS,x:x_STATUS_flags          ; clear the running status flag
2909   
2910                                               IF      SSI_OUTPUT
2932                                               ENDIF
2933   
2934      P:206C 000004  [4 -     1254]            rti
2935   
2936   
2937   
2938                                               IF      SSI_OUTPUT
2953                                               ENDIF
2954   
2955   
2956   
2957                                     ;***************************************************************************************
2958                                     ;  INTERRUPT SERVICE ROUTINE:  dma_in_accepted
2959                                     ;
2960                                     ;  Sets the status flag when the host is ready to send the samples.  It reads an
2961                                     ;  integer, which is not used.
2962                                     ;
2963                                     ;  Input:       none
2964                                     ;  Output:      none
2965                                     ;***************************************************************************************
2966   
2967                                     dma_in_accepted
2968                                               readHost x:x_temp                             ; The host sends a integer.
2969  +   P:206D 0AA980  [6 -     1260]            jclr    #m_hrdf,x:m_hsr,*
                 00206D
2970  +   P:206F 0870AB  [6 -     1266]            movep             x:m_hrx,x:x_temp
                 00005C
2971      P:2071 0A0022  [4 -     1270]            bset    #DMA_IN_ACCEPTED,x:x_STATUS_flags     ; But we don't really need it.
2972      P:2072 000004  [4 -     1274]            rti
2973   
2974   
2975   
2976                                     ;***************************************************************************************
2977                                     ;  SUBROUTINE:  update_datatable 
2978                                     ;
2979                                     ;  Loads a new DMA input buffer, if necessary, and copies data from the dma input
2980                                     ;  buffer to the control-rate parameter datatable.  Conversions of this data are
2981                                     ;  also performed.
2982                                     ;
2983                                     ;  Input:       none
2984                                     ;  Output:      x1 (1), b (CONTROL PERIOD)
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 40



2985                                     ;***************************************************************************************
2986   
2987                                     update_datatable
2988   
2989                                     ;  CHECK TABLE COUNT, AND READ NEW DMA BUFFER IF NEEDED
2990      P:2073 57F013  [4 -     1278]            clr     a         x:x_tableCount,b
                 00005D
2991      P:2075 64F00D  [4 -     1282]            cmp     a,b       x:readPtr,r4                ; set r4 to readPtr of DMA input buffer
                 00005E
2992      P:2077 0AF0A2  [6 -     1288]            jne     _continue                             ; if table_count != 0 then continue
                 002081
2993      P:2079 0BF080  [6 -     1294]            jsr     read_DMA_buffer                       ; else, read in new DMA buffer
                 0020DE
2994      P:207B 57F400  [4 -     1298]            move              #>TABLES_PER_DMA,b          ; reinitialize table_count
                 000040
2995      P:207D 64F400  [4 -     1302]            move              #>dma_in_buffer,r4          ; and reset pointer to start of buffer
                 003800
2996      P:207F 647000  [4 -     1306]            move              r4,x:readPtr
                 00005E
2997                                     _continue
2998   
2999                                     ;  DECREMENT TABLE COUNT
3000      P:2081 4D9400  [2 -     1308]            move                            y:y_one,x1    ; b preserved from above
3001      P:2082 20006C  [2 -     1310]            sub     x1,b
3002      P:2083 577000  [4 -     1314]            move              b,x:x_tableCount            ; table_count -= 1
                 00005D
3003   
3004   
3005                                     ;  TRANSFER DATA FROM INPUT DMA BUFFER TO CR PARAMETER DATA TABLE
3006                                     ;  CONCATENATE PHASE INCREMENT INTEGER AND FRACTIONAL PARTS
3007      P:2085 46DC13  [2 -     1316]            clr     a         x:(r4)+,y0                  ; integer part of incr -> y0
3008      P:2086 50DC00  [2 -     1318]            move              x:(r4)+,a0                  ; fractional part of incr -> a0
3009      P:2087 200032  [2 -     1320]            asl     a                                     ; get rid of sign bit, left justify
3010      P:2088 20CC00  [2 -     1322]            move              y0,a1                       ; concatenate integer part of increment
3011      P:2089 401E00  [2 -     1324]            move              a10,l:l_phaseInc            ; store phase angle increment
3012   
3013                                     ;  CONVERT GS VOLUME TO AMPLITUDE, UPDATE WAVETABLE, & UPDATE CROSSMIX VARIABLES
3014      P:208A 46DC00  [2 -     1326]            move              x:(r4)+,y0                  ; OSC_VOL -> y0
3015      P:208B 0BF080  [6 -     1332]            jsr     convert_to_amp
                 0021B2
3016      P:208D 21E400  [2 -     1334]            move              b,x0
3017      P:208E 4DF000  [4 -     1338]            move                            y:CONTROL_FACTOR,x1
                 000050
3018      P:2090 4E82A0  [2 -     1340]            mpy     x1,x0,a                 y:OSC_AMP,y0
3019      P:2091 2000E7  [2 -     1342]            macr    -x1,y0,a
3020      P:2092 5E0300  [2 -     1344]            move                            a,y:OSC_AMP_DELTA
3021   
3022                                               IF      VARIABLE_GP
3023                                               IF      RECALC_GP
3025                                               ENDIF
3026                                               ENDIF
3027   
3028                                               IF      FIXED_CROSSMIX
3033                                               ELSE
3034      P:2093 4E8200  [2 -     1346]            move                            y:OSC_AMP,y0  ; current amplitude -> y0
3035      P:2094 4DF000  [4 -     1350]            move                            y:CROSSMIX_FACTOR,x1 ; crossmix factor -> x1
                 00004A
3036      P:2096 46F4E8  [4 -     1354]            mpy     x1,y0,b   #>@cvi(@pow(2,CROSSMIX_SCALE-1)),y0 ; b = amp * mix_factor
                 000010
3037      P:2098 21E513  [2 -     1356]            clr     a         b,x1
3038      P:2099 5895E8  [2 -     1358]            mpy     x1,y0,b                 y:y_unity,a0  ; b *= 32 (scaled by 1/32 in host)
3039      P:209A 21260D  [2 -     1360]            cmp     a,b       b0,y0                       ; (output is in b0)
3040      P:209B 0AF0AF  [6 -     1366]            jle     _next
                 00209E
3041      P:209D 210600  [2 -     1368]            move              a0,y0                       ; y0 = min(product, 1.0)
3042      P:209E 5E9500  [2 -     1370]  _next     move                            y:y_unity,a
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 41



3043      P:209F 4E1954  [2 -     1372]            sub     y0,a                    y0,y:crossmix
3044      P:20A0 5E1A00  [2 -     1374]            move                            a,y:anti_crossmix
3045                                               ENDIF
3046   
3047   
3048                                     ;  CONVERT ASPIRATION VOLUME TO AMPLITUDE
3049      P:20A1 46DC00  [2 -     1376]            move              x:(r4)+,y0                  ; ASP_VOL -> y0
3050      P:20A2 0BF080  [6 -     1382]            jsr     convert_to_amp
                 0021B2
3051      P:20A4 5F7000  [4 -     1386]            move                            b,y:ASP_AMP
                 000051
3052   
3053                                     ;  CALCULATE FRICATION TAPS FROM FRICATION VOLUME AND POSITION
3054      P:20A6 46DC00  [2 -     1388]            move              x:(r4)+,y0                  ; FRICATION_VOL -> y0
3055      P:20A7 0BF080  [6 -     1394]            jsr     convert_to_amp                        ; output in b
                 0021B2
3056      P:20A9 44DC00  [2 -     1396]            move              x:(r4)+,x0                  ; FRICATION_POS -> x0
3057      P:20AA 0BF080  [6 -     1402]            jsr     setFricationTaps                      ; set frication taps according to fr. position
                 00227C
3058   
3059                                     ;  CALCULATE BANDPASS FILTER COEFFICIENTS FROM CENTER FREQUENCY & BANDWIDTH
3060      P:20AC 44DC00  [2 -     1404]            move              x:(r4)+,x0                  ; BANDPASS_CF -> x0
3061      P:20AD 46DC00  [2 -     1406]            move              x:(r4)+,y0                  ; BANDPASS_BW -> Y0
3062      P:20AE 0BF080  [6 -     1412]            jsr     bpConvert                             ; convert bandpass bw & cf into coefficients
                 0021E1
3063   
3064                                     ;  REST OF TABLE CONSISTS OF COEFFICIENTS, WHICH ARE USED DIRECTLY  */
3065                                               IF      !INTERP_RADII
3072                                               ELSE
3073      P:20B0 639A00  [2 -     1414]            move              x:coeff_mem,r3
3074      P:20B1 657000  [4 -     1418]            move              r5,x:x_r5_save
                 000057
3075      P:20B3 6D9B00  [2 -     1420]            move                            y:delta_mem,r5
3076      P:20B4 4DF000  [4 -     1424]            move                            y:CONTROL_FACTOR,x1
                 000050
3077   
3078      P:20B6 46DC00  [2 -     1426]            move              x:(r4)+,y0
3079      P:20B7 44DBE8  [2 -     1428]            mpy     x1,y0,b   x:(r3)+,x0
3080      P:20B8 46DCAF  [2 -     1430]            macr    -x1,x0,b  x:(r4)+,y0
3081   
3082      P:20B9 B3BBE8  [2 -     1432]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3083      P:20BA 46DCAF  [2 -     1434]            macr    -x1,x0,b  x:(r4)+,y0
3084   
3085      P:20BB B3BBE8  [2 -     1436]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3086      P:20BC 46DCAF  [2 -     1438]            macr    -x1,x0,b  x:(r4)+,y0
3087   
3088      P:20BD B3BBE8  [2 -     1440]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3089      P:20BE 46DCAF  [2 -     1442]            macr    -x1,x0,b  x:(r4)+,y0
3090   
3091      P:20BF B3BBE8  [2 -     1444]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3092      P:20C0 46DCAF  [2 -     1446]            macr    -x1,x0,b  x:(r4)+,y0
3093   
3094      P:20C1 B3BBE8  [2 -     1448]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3095      P:20C2 46DCAF  [2 -     1450]            macr    -x1,x0,b  x:(r4)+,y0
3096   
3097      P:20C3 B3BBE8  [2 -     1452]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3098      P:20C4 46DCAF  [2 -     1454]            macr    -x1,x0,b  x:(r4)+,y0
3099   
3100      P:20C5 B3BBE8  [2 -     1456]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3101      P:20C6 46DCAF  [2 -     1458]            macr    -x1,x0,b  x:(r4)+,y0
3102   
3103      P:20C7 B3BBE8  [2 -     1460]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3104      P:20C8 46DCAF  [2 -     1462]            macr    -x1,x0,b  x:(r4)+,y0
3105   
3106      P:20C9 B3BBE8  [2 -     1464]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3107      P:20CA 46DCAF  [2 -     1466]            macr    -x1,x0,b  x:(r4)+,y0
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 42



3108   
3109      P:20CB B3BBE8  [2 -     1468]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3110      P:20CC 46DCAF  [2 -     1470]            macr    -x1,x0,b  x:(r4)+,y0
3111   
3112      P:20CD B3BBE8  [2 -     1472]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3113      P:20CE 46DCAF  [2 -     1474]            macr    -x1,x0,b  x:(r4)+,y0
3114   
3115      P:20CF B3BBE8  [2 -     1476]            mpy     x1,y0,b   x:(r3)+,x0    b,y:(r5)+
3116      P:20D0 2000AF  [2 -     1478]            macr    -x1,x0,b
3117      P:20D1 5F5D00  [2 -     1480]            move                            b,y:(r5)+
3118   
3119      P:20D2 65F000  [4 -     1484]            move              x:x_r5_save,r5
                 000057
3120                                               ENDIF
3121   
3122                                     ;  UPDATE READ POINTER TO NEXT TABLE IN DMA INPUT BUFFER
3123      P:20D4 57F400  [4 -     1488]            move              #>TABLE_SIZE,b
                 000020
3124      P:20D6 44F000  [4 -     1492]            move              x:readPtr,x0
                 00005E
3125      P:20D8 4D9448  [2 -     1494]            add     x0,b                    y:y_one,x1    ; 1 -> x1
3126      P:20D9 577000  [4 -     1498]            move              b,x:readPtr                 ; readPtr += TABLE_SIZE
                 00005E
3127      P:20DB 5FF000  [4 -     1502]            move                            y:CONTROL_PERIOD,b ; control period -> b
                 00004F
3128   
3129      P:20DD 00000C  [4 -     1506]            rts
3130   
3131   
3132   
3133                                     ;***************************************************************************************
3134                                     ;  SUBROUTINE:  read_DMA_buffer
3135                                     ;
3136                                     ;  Reads one complete DMA buffer from the host, and puts it in the dma input buffer.
3137                                     ;
3138                                     ;  Input:       none
3139                                     ;  Output:      none
3140                                     ;***************************************************************************************
3141   
3142                                     read_DMA_buffer
3143      P:20DE 0AA800  [4 -     1510]            bclr    #m_hrie,x:m_hcr                       ; Disable the host receive interrupt.
3144                                                                                             ; since the following values are samples...
3145   
3146      P:20DF 64F400  [4 -     1514]            move              #>dma_in_buffer,r4          ; set pointer to dma input buffer
                 003800
3147      P:20E1 0A0002  [4 -     1518]            bclr    #DMA_IN_ACCEPTED,x:x_STATUS_flags     ; clear accepted flag
3148      P:20E2 0A0001  [4 -     1522]            bclr    #DMA_IN_DONE,x:x_STATUS_flags         ; clear dma-in done flag
3149   
3150                                               writeHost #DMA_IN_REQ                         ; send dma-in request to host
3151  +   P:20E3 0AA981  [6 -     1528]            jclr    #m_htde,x:m_hsr,*
                 0020E3
3152  +   P:20E5 08F4AB  [4 -     1532]            movep             #DMA_IN_REQ,x:m_htx
                 040002
3153      P:20E7 0A0082  [6 -     1538]            jclr    #DMA_IN_ACCEPTED,x:x_STATUS_flags,*   ; loop until host ready
                 0020E7
3154   
3155   
3156                                               IF      BLACK
3157      P:20E9 060088  [6 -     1544]            do      #DMA_IN_SIZE,_end_DMA_loop            ; loop until buffer filled
                 0020FB
3158      P:20EB 0AA980  [6 -     1550]            jclr    #m_hrdf,x:m_hsr,*                     ; wait until we can read
                 0020EB
3159      P:20ED 08452B  [4 -     1554]            movep             x:m_hrx,x1                  ; get high order 16 bits
3160   
3161                                               shiftLeft x1,y1,16,a                          ; shift left two bytes
3162  +   P:20EE 47F400  [4 -     1558]            move              #>@cvi(@pow(2,16-1)),y1
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 43



                 008000
3163  +   P:20F0 2000F0  [2 -     1560]            mpy     x1,y1,a
3164      P:20F1 210500  [2 -     1562]            move              a0,x1                       ; result of shift is in a0
3165   
3166      P:20F2 0AA980  [6 -     1568]            jclr    #m_hrdf,x:m_hsr,*                     ; get low order 16 bits
                 0020F2
3167      P:20F4 084E2B  [4 -     1572]            movep             x:m_hrx,a                   ; and put in A1 (A2 and A0 clear)
3168      P:20F5 200062  [2 -     1574]            or      x1,a                                  ; add the high order 8 bits into A1
3169   
3170      P:20F6 450F00  [2 -     1576]            move              x1,x:x_temp2
3171      P:20F7 0A0F97  [6 -     1582]            jclr    #23,x:x_temp2,_no_correct             ; if necessary, do sign extension
                 0020FB
3172      P:20F9 52F400  [4 -     1586]            move              #>$FF,a2
                 0000FF
3173                                     _no_correct
3174      P:20FB 565C00  [2 -     1588]            move              a,x:(r4)+                   ; put data into dma input buffer
3175                                     _end_DMA_loop
3176                                               ENDIF
3177   
3178                                               IF      MSOUND
3183                                               ENDIF
3184   
3185   
3186      P:20FC 0AA980  [6 -     1594]            jclr    #m_hrdf,x:m_hsr,_then                 ; Continue reading incoming (junk) data...
                 002100
3187      P:20FE 44F000  [4 -     1598]            move              x:m_hrx,x0                  ; until dma-in complete signalled by host
                 00FFEB
3188                                     _then
3189      P:2100 0A0081  [6 -     1604]            jclr    #DMA_IN_DONE,x:x_STATUS_flags,_end_DMA_loop
                 0020FC
3190   
3191      P:2102 0AA820  [4 -     1608]            bset    #m_hrie,x:m_hcr                       ; Enable the host receive interrupt.
3192      P:2103 00000C  [4 -     1612]            rts
3193   
3194   
3195   
3196                                     ;***************************************************************************************
3197                                     ;  HOST COMMAND SERVICE ROUTINE:  load_wavetable 
3198                                     ;
3199                                     ;  Loads in the wavetable from the host.
3200                                     ;
3201                                     ;  Input:       none
3202                                     ;  Output:      none
3203                                     ;***************************************************************************************
3204   
3205                                     load_wavetable
3206      P:2104 0AA802  [4 -     1616]            bclr    #m_hcie,x:m_hcr                       ; disable host command interrupts
3207      P:2105 647000  [4 -     1620]            move              r4,x:x_r4_save              ; save the current value of r4
                 000056
3208      P:2107 64F400  [4 -     1624]            move              #gp_wave_table,r4           ; set r4 to gp wavetable base
                 002400
3209   
3210      P:2109 060081  [6 -     1630]            do      #GP_TABLE_SIZE,_end_loop
                 00210D
3211                                               readHost x:(r4)+
3212  +   P:210B 0AA980  [6 -     1636]            jclr    #m_hrdf,x:m_hsr,*
                 00210B
3213  +   P:210D 085CAB  [4 -     1640]            movep             x:m_hrx,x:(r4)+
3214                                     _end_loop
3215   
3216      P:210E 64F000  [4 -     1644]            move              x:x_r4_save,r4              ; restore the saved value of r4
                 000056
3217      P:2110 0AA822  [4 -     1648]            bset    #m_hcie,x:m_hcr                       ; enable host command interrupts
3218      P:2111 000004  [4 -     1652]            rti
3219   
3220   
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 44



3221   
3222                                     ;***************************************************************************************
3223                                     ;  HOST COMMAND SERVICE ROUTINE:  load_fir_coefficients
3224                                     ;
3225                                     ;  Loads in the table of FIR filter coefficients from the host.
3226                                     ;
3227                                     ;  Input:       none
3228                                     ;  Output:      none 
3229                                     ;***************************************************************************************
3230   
3231                                     load_fir_coefficients
3232      P:2112 0AA802  [4 -     1656]            bclr    #m_hcie,x:m_hcr                       ; disable host command interrupts
3233      P:2113 647000  [4 -     1660]            move              r4,x:x_r4_save              ; save the current value of r4
                 000056
3234      P:2115 407000  [4 -     1664]            move              a10,l:l_a_save              ; save the current value of a
                 0000BF
3235      P:2117 447000  [4 -     1668]            move              x0,x:x_x0_save              ; save the current value of x0
                 000054
3236   
3237                                               readHost a                                    ; read and store the tablesize
3238  +   P:2119 0AA980  [6 -     1674]            jclr    #m_hrdf,x:m_hsr,*
                 002119
3239  +   P:211B 084E2B  [4 -     1678]            movep             x:m_hrx,a
3240      P:211C 567000  [4 -     1682]            move              a,x:x_FIR_size
                 00005F
3241   
3242      P:211E 4C9400  [2 -     1684]            move                            y:y_one,x0    ; modulus = tablesize - 1
3243      P:211F 200044  [2 -     1686]            sub     x0,a
3244      P:2120 560300  [2 -     1688]            move              a,x:x_FIR_mod               ; store modulus (used in FIR routine)
3245   
3246      P:2121 64F400  [4 -     1692]            move              #>l_FIR_base,r4             ; set pointer to beginning of coefficient array
                 0000C0
3247      P:2123 56F000  [4 -     1696]            move              x:x_FIR_size,a
                 00005F
3248      P:2125 06CE00  [6 -     1702]            do      a,_end_loop
                 002129
3249                                               readHost y:(r4)+                              ; read and store each coefficient
3250  +   P:2127 0AA980  [6 -     1708]            jclr    #m_hrdf,x:m_hsr,*
                 002127
3251  +   P:2129 085CEB  [4 -     1712]            movep             x:m_hrx,y:(r4)+
3252                                     _end_loop
3253   
3254      P:212A 64F000  [4 -     1716]            move              x:x_r4_save,r4              ; restore the saved value of r4
                 000056
3255      P:212C 40F000  [4 -     1720]            move              l:l_a_save,a10              ; restore the saved value of a
                 0000BF
3256      P:212E 44F000  [4 -     1724]            move              x:x_x0_save,x0              ; restore the saved value of x0
                 000054
3257      P:2130 0AA822  [4 -     1728]            bset    #m_hcie,x:m_hcr                       ; enable host command interrupts
3258      P:2131 000004  [4 -     1732]            rti
3259   
3260   
3261   
3262                                     ;***************************************************************************************
3263                                     ;  HOST COMMAND SERVICE ROUTINE:  load_src_coefficients
3264                                     ;
3265                                     ;  Loads in both the table of sample rate conversion coefficients and the table of the
3266                                     ;  filter deltas from the host.
3267                                     ;
3268                                     ;  Input:       none
3269                                     ;  Output:      none
3270                                     ;***************************************************************************************
3271   
3272                                     load_src_coefficients
3273      P:2132 0AA802  [4 -     1736]            bclr    #m_hcie,x:m_hcr                       ; disable host command interrupts
3274      P:2133 647000  [4 -     1740]            move              r4,x:x_r4_save              ; save the current value of r4
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 45



                 000056
3275   
3276      P:2135 649800  [2 -     1742]            move              x:fbase_addr,r4             ; set pointer to beginning of coefficient array
3277      P:2136 068086  [6 -     1748]            do      #FILTER_SIZE,_end_loop
                 00213A
3278                                               readHost x:(r4)+                              ; read and store each coefficient
3279  +   P:2138 0AA980  [6 -     1754]            jclr    #m_hrdf,x:m_hsr,*
                 002138
3280  +   P:213A 085CAB  [4 -     1758]            movep             x:m_hrx,x:(r4)+
3281                                     _end_loop
3282   
3283      P:213B 64F400  [4 -     1762]            move              #>filter_d_base,r4          ; set pointer to beginning of delta array
                 002B80
3284      P:213D 068086  [6 -     1768]            do      #FILTER_SIZE,_end_loop2
                 002141
3285                                               readHost x:(r4)+                              ; read and store each delta
3286  +   P:213F 0AA980  [6 -     1774]            jclr    #m_hrdf,x:m_hsr,*
                 00213F
3287  +   P:2141 085CAB  [4 -     1778]            movep             x:m_hrx,x:(r4)+
3288                                     _end_loop2
3289   
3290      P:2142 64F000  [4 -     1782]            move              x:x_r4_save,r4              ; restore the saved value of r4
                 000056
3291      P:2144 0AA822  [4 -     1786]            bset    #m_hcie,x:m_hcr                       ; enable host command interrupts
3292      P:2145 000004  [4 -     1790]            rti
3293   
3294   
3295   
3296                                     ;***************************************************************************************
3297                                     ;  HOST COMMAND SERVICE ROUTINE:  load_ur_parameters
3298                                     ;
3299                                     ;  Loads in the table of utterance-rate parameters from the host, and performs
3300                                     ;  necessary conversion of data.
3301                                     ;
3302                                     ;  Input:       none
3303                                     ;  Output:      none
3304                                     ;***************************************************************************************
3305   
3306                                     load_ur_parameters
3307      P:2146 0AA802  [4 -     1794]            bclr    #m_hcie,x:m_hcr                       ; disable host command interrupts
3308      P:2147 637000  [4 -     1798]            move              r3,x:x_r3_save              ; save the current value of r3
                 000055
3309   
3310   
3311                                     ;  LOAD IN COEFFICIENTS NC_2, NC_3, NC_4, NC_5, NC_REFL, NC_RAD
3312      P:2149 334D00  [2 -     1800]            move              #NC_2,r3                    ; set r3 to NC_2 memory
3313      P:214A 060680  [6 -     1806]            do      #6,_end_loop
                 00214E
3314                                               readHost x:(r3)+
3315  +   P:214C 0AA980  [6 -     1812]            jclr    #m_hrdf,x:m_hsr,*
                 00214C
3316  +   P:214E 085BAB  [4 -     1816]            movep             x:m_hrx,x:(r3)+
3317                                     _end_loop
3318   
3319                                     ;  READ IN MASTER VOLUME, AND CONVERT TO AMPLITUDE
3320                                               readHost y0
3321  +   P:214F 0AA980  [6 -     1822]            jclr    #m_hrdf,x:m_hsr,*
                 00214F
3322  +   P:2151 08462B  [4 -     1826]            movep             x:m_hrx,y0
3323      P:2152 0BF080  [6 -     1832]            jsr     convert_to_amp                        ; convert master volume to amplitude
                 0021B2
3324      P:2154 21E600  [2 -     1834]            move              b,y0
3325   
3326                                     ;  READ IN CHANNELS & STEREO BALANCE, AND CONVERT TO BALANCE_L AND BALANCE_R
3327                                               readHost x:x_temp2
3328  +   P:2155 0AA980  [6 -     1840]            jclr    #m_hrdf,x:m_hsr,*
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 46



                 002155
3329  +   P:2157 0870AB  [6 -     1846]            movep             x:m_hrx,x:x_temp2
                 00000F
3330                                               readHost a
3331  +   P:2159 0AA980  [6 -     1852]            jclr    #m_hrdf,x:m_hsr,*
                 002159
3332  +   P:215B 084E2B  [4 -     1856]            movep             x:m_hrx,a
3333      P:215C 0BF080  [6 -     1862]            jsr     convert_balance                       ; convert balance to L & R values
                 0021F0
3334   
3335                                     ;  READ IN BREATHINESS, AND CALCULATE ANTI-BREATHINESS
3336                                               readHost y0
3337  +   P:215E 0AA980  [6 -     1868]            jclr    #m_hrdf,x:m_hsr,*
                 00215E
3338  +   P:2160 08462B  [4 -     1872]            movep             x:m_hrx,y0
3339      P:2161 5E9500  [2 -     1874]            move                            y:y_unity,a   ; calculate anti-breathiness
3340      P:2162 4E7054  [4 -     1878]            sub     y0,a                    y0,y:BREATHINESS
                 000049
3341      P:2164 5E0400  [2 -     1880]            move                            a,y:ANTI_BREATHINESS ; anti_breathiness = 1.0 - breathiness
3342   
3343                                     ;  READ IN INTEGER AND FRACTIONAL PARTS OF THE TIME REGISTER INCREMENT, CONCATENATE
3344                                               readHost a
3345  +   P:2165 0AA980  [6 -     1886]            jclr    #m_hrdf,x:m_hsr,*
                 002165
3346  +   P:2167 084E2B  [4 -     1890]            movep             x:m_hrx,a
3347                                               readHost y0
3348  +   P:2168 0AA980  [6 -     1896]            jclr    #m_hrdf,x:m_hsr,*
                 002168
3349  +   P:216A 08462B  [4 -     1900]            movep             x:m_hrx,y0
3350      P:216B 20C800  [2 -     1902]            move              y0,a0                       ; set time register increment by concatenating
3351      P:216C 481D00  [2 -     1904]            move              a,l:l_timeRegInc            ; the integer and fractional parts
3352   
3353                                     ;  READ IN CONTROL PERIOD (NO CONVERSION)
3354                                               readHost y:CONTROL_PERIOD
3355  +   P:216D 0AA980  [6 -     1910]            jclr    #m_hrdf,x:m_hsr,*
                 00216D
3356  +   P:216F 0870EB  [6 -     1916]            movep             x:m_hrx,y:CONTROL_PERIOD
                 00004F
3357   
3358                                     ;  READ IN CONTROL FACTOR (NO CONVERSION)
3359                                               readHost y:CONTROL_FACTOR
3360  +   P:2171 0AA980  [6 -     1922]            jclr    #m_hrdf,x:m_hsr,*
                 002171
3361  +   P:2173 0870EB  [6 -     1928]            movep             x:m_hrx,y:CONTROL_FACTOR
                 000050
3362   
3363                                     ;  READ IN DAMPING FACTOR (NO CONVERSION)
3364                                               readHost y:DAMPING
3365  +   P:2175 0AA980  [6 -     1934]            jclr    #m_hrdf,x:m_hsr,*
                 002175
3366  +   P:2177 0870EB  [6 -     1940]            movep             x:m_hrx,y:DAMPING
                 000000
3367   
3368                                     ;  READ IN TP, TN_MIN, TN_MAX, AND CREATE WAVE TABLE
3369                                               readHost y:TP
3370  +   P:2179 0AA980  [6 -     1946]            jclr    #m_hrdf,x:m_hsr,*
                 002179
3371  +   P:217B 0870EB  [6 -     1952]            movep             x:m_hrx,y:TP
                 00004B
3372                                               readHost y:TN_MIN
3373  +   P:217D 0AA980  [6 -     1958]            jclr    #m_hrdf,x:m_hsr,*
                 00217D
3374  +   P:217F 0870EB  [6 -     1964]            movep             x:m_hrx,y:TN_MIN
                 00004C
3375                                               readHost y:TN_MAX
3376  +   P:2181 0AA980  [6 -     1970]            jclr    #m_hrdf,x:m_hsr,*
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 47



                 002181
3377  +   P:2183 0870EB  [6 -     1976]            movep             x:m_hrx,y:TN_MAX
                 00004D
3378                                               IF      VARIABLE_GP
3379      P:2185 0BF080  [6 -     1982]            jsr     initializeWavetable                   ; rewrite the glottal pulse wavetable
                 00220E
3380                                               ENDIF
3381   
3382                                     ;  READ IN THROAT CUTOFF VALUE, CALCULATE THROAT FILTER COEFFICIENTS
3383                                               readHost a
3384  +   P:2187 0AA980  [6 -     1988]            jclr    #m_hrdf,x:m_hsr,*
                 002187
3385  +   P:2189 084E2B  [4 -     1992]            movep             x:m_hrx,a
3386      P:218A 0BF080  [6 -     1998]            jsr     setThroatCoefficients                 ; set the throat filter coefficients
                 00229B
3387   
3388                                     ;  READ IN THROAT VOLUME, AND CONVERT TO THROAT AMPLITUDE
3389                                               readHost y0
3390  +   P:218C 0AA980  [6 -     2004]            jclr    #m_hrdf,x:m_hsr,*
                 00218C
3391  +   P:218E 08462B  [4 -     2008]            movep             x:m_hrx,y0
3392      P:218F 0BF080  [6 -     2014]            jsr     convert_to_amp
                 0021B2
3393      P:2191 5F0F00  [2 -     2016]            move                            b,y:throatGain
3394   
3395                                     ;  READ IN MOUTH APERTURE COEFFICIENT, AND CALCULATE MOUTH FILTER COEFFICIENTS
3396                                               readHost a
3397  +   P:2192 0AA980  [6 -     2022]            jclr    #m_hrdf,x:m_hsr,*
                 002192
3398  +   P:2194 084E2B  [4 -     2026]            movep             x:m_hrx,a
3399      P:2195 0BF080  [6 -     2032]            jsr     setMouthCoefficients                  ; set mouth radiation & reflection filter coef.
                 00228D
3400   
3401                                     ;  READ IN NOSE APERTURE COEFFICIENT, AND CALCUALTE NOSE FILTER COEFFICIENTS
3402                                               readHost a
3403  +   P:2197 0AA980  [6 -     2038]            jclr    #m_hrdf,x:m_hsr,*
                 002197
3404  +   P:2199 084E2B  [4 -     2042]            movep             x:m_hrx,a
3405      P:219A 0BF080  [6 -     2048]            jsr     setNoseCoefficients                   ; set nose radiation & reflection filter coef.
                 002294
3406   
3407                                     ;  READ IN GLOTTAL SOURCE WAVEFORM TYPE, AND SET WAVETABLE BASE
3408                                               readHost x:x_temp2
3409  +   P:219C 0AA980  [6 -     2054]            jclr    #m_hrdf,x:m_hsr,*
                 00219C
3410  +   P:219E 0870AB  [6 -     2060]            movep             x:m_hrx,x:x_temp2
                 00000F
3411      P:21A0 0BF080  [6 -     2066]            jsr     set_waveform_type                     ; set the waveform type
                 0021FE
3412   
3413                                     ;  READ IN PULSE MODULATION (NO CONVERSION)
3414                                               readHost y:PULSE_MODULATION
3415  +   P:21A2 0AA980  [6 -     2072]            jclr    #m_hrdf,x:m_hsr,*
                 0021A2
3416  +   P:21A4 0870EB  [6 -     2078]            movep             x:m_hrx,y:PULSE_MODULATION
                 000001
3417   
3418                                     ;  READ IN CROSSMIX FACTOR (NO CONVERSION)
3419                                               readHost y:CROSSMIX_FACTOR
3420  +   P:21A6 0AA980  [6 -     2084]            jclr    #m_hrdf,x:m_hsr,*
                 0021A6
3421  +   P:21A8 0870EB  [6 -     2090]            movep             x:m_hrx,y:CROSSMIX_FACTOR
                 00004A
3422   
3423                                     ;  READ IN LEFT SHIFT SCALING VALUE
3424                                               IF      SSI_OUTPUT
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 48



3429                                               ELSE
3430                                               readHost y:left_shift                         ; store the scaling value
3431  +   P:21AA 0AA980  [6 -     2096]            jclr    #m_hrdf,x:m_hsr,*
                 0021AA
3432  +   P:21AC 0870EB  [6 -     2102]            movep             x:m_hrx,y:left_shift
                 000011
3433                                               ENDIF
3434   
3435   
3436      P:21AE 63F000  [4 -     2106]            move              x:x_r3_save,r3              ; restore the saved value of r3
                 000055
3437      P:21B0 0AA822  [4 -     2110]            bset    #m_hcie,x:m_hcr                       ; enable host command interrupts
3438      P:21B1 000004  [4 -     2114]            rti
3439   
3440   
3441   
3442                                     ;***************************************************************************************
3443                                     ;  SUBROUTINE:  convert_to_amp
3444                                     ;
3445                                     ;  Converts dB value (a fraction equal to dB/64.0) to an amplitude value (0.0 to 1.0).
3446                                     ;
3447                                     ;  Input:       y0
3448                                     ;  Output:      b
3449                                     ;***************************************************************************************
3450   
3451                                     convert_to_amp
3452      P:21B2 45F400  [4 -     2118]            move              #>64,x1                     ; move scaling factor into x1
                 000040
3453      P:21B4 2000E0  [2 -     2120]            mpy     y0,x1,a                               ; mult. input by scaling factor
3454      P:21B5 200033  [2 -     2122]            lsl     a                                     ; put sign bit into a0 and
3455      P:21B6 57F422  [4 -     2126]            asr     a         #>l_dbToAmpTable,b          ; get conversion table base
                 000080
3456   
3457      P:21B8 218600  [2 -     2128]            move              a1,y0                       ; get the table offset
3458      P:21B9 200058  [2 -     2130]            add     y0,b                                  ; and add it to the table base
3459      P:21BA 21F300  [2 -     2132]            move              b,r3                        ; and put the result into r3
3460   
3461      P:21BB 210500  [2 -     2134]            move              a0,x1                       ; get the fractional part of the scaled input
3462      P:21BC 57E300  [2 -     2136]            move              x:(r3),b                    ; get the ampl value of the int part of the inp
ut
3463      P:21BD 4FE300  [2 -     2138]            move                            y:(r3),y1     ; get the corresponding delta value
3464      P:21BE 2000FB  [2 -     2140]            macr    x1,y1,b                               ; add frac * delta to b
3465   
3466      P:21BF 00000C  [4 -     2144]            rts
3467   
3468   
3469   
3470                                     ;***************************************************************************************
3471                                     ;  SUBROUTINE:  betaFunction
3472                                     ;
3473                                     ;  Calculates the beta coefficient used to calculate the filter coefficients for
3474                                     ;  the bandpass filter.  Note that the input is bandwidth/sampleRate (varies from
3475                                     ;  0 to 0.5).
3476                                     ;
3477                                     ;  Input:       y0
3478                                     ;  Output:      b
3479                                     ;
3480                                     ;  Preserves:   x0
3481                                     ;***************************************************************************************
3482   
3483                                     betaFunction
3484      P:21C0 45F400  [4 -     2148]            move              #>betaTableSize-1,x1        ; move scaling factor into x1
                 00003F
3485      P:21C2 2000E0  [2 -     2150]            mpy     y0,x1,a                               ; mult. input by scaling factor
3486      P:21C3 200032  [2 -     2152]            asl     a                                     ; multiply by 2
3487      P:21C4 200033  [2 -     2154]            lsl     a                                     ; put sign bit into a0 and
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 49



3488      P:21C5 57F422  [4 -     2158]            asr     a         #>l_betaTable,b             ; get conversion table base
                 0023C0
3489   
3490      P:21C7 218600  [2 -     2160]            move              a1,y0                       ; get the table offset
3491      P:21C8 200058  [2 -     2162]            add     y0,b                                  ; and add it to the table base
3492      P:21C9 21F300  [2 -     2164]            move              b,r3                        ; and put the result into r3
3493   
3494      P:21CA 210500  [2 -     2166]            move              a0,x1                       ; get the fractional part of the scaled input
3495      P:21CB 57DB00  [2 -     2168]            move              x:(r3)+,b                   ; get the ampl value of the int part of the inp
ut
3496   
3497      P:21CC 56E300  [2 -     2170]            move              x:(r3),a                    ; a = nextValue
3498      P:21CD 200014  [2 -     2172]            sub     b,a                                   ; delta = nextValue - value
3499      P:21CE 21C700  [2 -     2174]            move              a,y1
3500   
3501      P:21CF 2000FB  [2 -     2176]            macr    x1,y1,b                               ; b += frac * delta
3502   
3503      P:21D0 00000C  [4 -     2180]            rts
3504   
3505   
3506   
3507                                     ;***************************************************************************************
3508                                     ;  SUBROUTINE:  sin
3509                                     ;
3510                                     ;  Calculate the sine function of the input value.  The input value varies from 0.0 to
3511                                     ;  1.0 (i.e. theta/2PI).
3512                                     ;
3513                                     ;  Input:       y0
3514                                     ;  Output:      b
3515                                     ;***************************************************************************************
3516   
3517                                     sin
3518      P:21D1 45F400  [4 -     2184]            move              #>SINE_TABLE_SIZE,x1        ; move scaling factor into x1
                 000100
3519      P:21D3 2000E0  [2 -     2186]            mpy     y0,x1,a                               ; mult. input by scaling factor
3520      P:21D4 200033  [2 -     2188]            lsl     a                                     ; put sign bit into a0 and
3521      P:21D5 57F422  [4 -     2192]            asr     a         #>sine_wave_table,b         ; get conversion table base
                 000100
3522   
3523      P:21D7 218600  [2 -     2194]            move              a1,y0                       ; get the table offset
3524      P:21D8 200058  [2 -     2196]            add     y0,b                                  ; and add it to the table base
3525      P:21D9 21F300  [2 -     2198]            move              b,r3                        ; and put the result into r3
3526   
3527      P:21DA 210500  [2 -     2200]            move              a0,x1                       ; get the fractional part of the scaled input
3528      P:21DB 5FDB00  [2 -     2202]            move                            y:(r3)+,b     ; get the ampl value from the sine table
3529      P:21DC 5EE300  [2 -     2204]            move                            y:(r3),a      ; get the next value in the table
3530      P:21DD 200014  [2 -     2206]            sub     b,a                                   ; calculate the table delta (a = a - b)
3531      P:21DE 21C700  [2 -     2208]            move              a,y1                        ; move the delta into y1
3532      P:21DF 2000FB  [2 -     2210]            macr    x1,y1,b                               ; add frac * delta to base amplitude value
3533   
3534      P:21E0 00000C  [4 -     2214]            rts
3535   
3536   
3537   
3538                                     ;***************************************************************************************
3539                                     ;  SUBROUTINE:  bpConvert
3540                                     ;
3541                                     ;  Converts bandpass center frequency and bandwidth values to filter coefficients.
3542                                     ;  Note that the inputs are cf/sampleRate and bw/sampleRate (i.e. vary from 0 to 0.5).
3543                                     ;
3544                                     ;  Input:       x0 (BANDPASS_CF), y0 (BANDPASS_BW)
3545                                     ;  Output:      x:ALPHA, y:BETA, y:GAMMA
3546                                     ;***************************************************************************************
3547   
3548                                     bpConvert
3549      P:21E1 0BF080  [6 -     2220]            jsr     betaFunction                          ; calculate the beta coefficient (x0 preserved!
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 50



)
                 0021C0
3550   
3551      P:21E3 2E2000  [2 -     2222]            move              #@cvf(0.25),a               ; add .25 to CF, so we can use the sin function
3552      P:21E4 570840  [2 -     2224]            add     x0,a      b,x:BETA                    ; to calculate the cos of CF.  Store beta coeff
.
3553      P:21E5 21C600  [2 -     2226]            move              a,y0                        ; move (CF+0.25) to y0
3554      P:21E6 0BF080  [6 -     2232]            jsr     sin                                   ; calculate cos(CF), output in b
                 0021D1
3555      P:21E8 21E42A  [2 -     2234]            asr     b         b,x0                        ; b /= 2
3556      P:21E9 468800  [2 -     2236]            move              x:BETA,y0
3557      P:21EA 2E40DB  [2 -     2238]            macr    x0,y0,b   #@cvf(0.5),a                ; b += beta * cos(CF)
3558   
3559      P:21EB 570954  [2 -     2240]            sub     y0,a      b,x:GAMMA                   ; a = 0.5 - beta.   Store gamma coefficient
3560      P:21EC 200022  [2 -     2242]            asr     a                                     ; a /= 2
3561      P:21ED 200011  [2 -     2244]            rnd     a
3562      P:21EE 560700  [2 -     2246]            move              a,x:ALPHA                   ; Store alpha coefficient
3563   
3564      P:21EF 00000C  [4 -     2250]            rts
3565   
3566   
3567   
3568                                     ;***************************************************************************************
3569                                     ;  SUBROUTINE:  convert_balance
3570                                     ;
3571                                     ;  Converts the channels value (1 or 2), the balance value (-1.0 to +1.0), and the
3572                                     ;  master amplitude (0.0 to 1.0) to left and right channel scaling values.
3573                                     ;
3574                                     ;  Input:       x:x_temp2 (channels), a (balance), y0 (master amplitude)
3575                                     ;  Output:      y:BALANCE_R, y:BALANCE_L
3576                                     ;***************************************************************************************
3577   
3578                                     convert_balance
3579      P:21F0 0A0FA1  [6 -     2256]            jset    #1,x:x_temp2,_stereo                  ; if 2 channels, do stereo scaling below
                 0021F7
3580   
3581      P:21F2 244000  [2 -     2258]  _mono     move              #@cvf(0.5),x0               ; mono signal has equal energy in both channels
3582      P:21F3 2000D9  [2 -     2260]            mpyr    x0,y0,b                               ; scale by master amplitude
3583      P:21F4 5F1700  [2 -     2262]            move                            b,y:BALANCE_R ; store R channel scale
3584      P:21F5 5F1800  [2 -     2264]            move                            b,y:BALANCE_L ; store L channel scale
3585      P:21F6 00000C  [4 -     2268]            rts
3586   
3587      P:21F7 244022  [2 -     2270]  _stereo   asr     a         #@cvf(0.5),x0               ; a /= 2
3588      P:21F8 5F9540  [2 -     2272]            add     x0,a                    y:y_unity,b   ; a += 0.5
3589      P:21F9 21C41C  [2 -     2274]            sub     a,b       a,x0                        ; L = 1 - R
3590      P:21FA 21E5D1  [2 -     2276]            mpyr    x0,y0,a   b,x1                        ; scale R channel by master amp
3591      P:21FB 5E17E9  [2 -     2278]            mpyr    x1,y0,b                 a,y:BALANCE_R ; sclae L channel; store R channel scale
3592      P:21FC 5F1800  [2 -     2280]            move                            b,y:BALANCE_L ; store L channel scale
3593      P:21FD 00000C  [4 -     2284]            rts
3594   
3595   
3596   
3597                                     ;***************************************************************************************
3598                                     ;  SUBROUTINE:   set_waveform_type
3599                                     ;
3600                                     ;  Sets the waveform type by setting the r0 and m0 registers, plus the x_tableMod value.
3601                                     ;
3602                                     ;  Input:       x:x_temp2
3603                                     ;  Output:      r0, m0, x:x_tableMod
3604                                     ;***************************************************************************************
3605   
3606                                     set_waveform_type
3607      P:21FE 0A0FA0  [6 -     2290]            jset    #0,x:x_temp2,_sine
                 002207
3608      P:2200 60F400  [4 -     2294]            move              #>gp_wave_table,r0          ; set register to base of glottal pulse table
                 002400
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 51



3609      P:2202 44F400  [4 -     2298]            move              #>GP_TABLE_SIZE-1,x0
                 0000FF
3610      P:2204 440600  [2 -     2300]            move              x0,x:x_tableMod             ; set mask to tablesize - 1
3611      P:2205 04C4A0  [2 -     2302]            move              x0,m0                       ; set modulus for waveform table
3612      P:2206 00000C  [4 -     2306]            rts
3613   
3614                                               IF      MSOUND
3616                                               ELSE
3617      P:2207 60F400  [4 -     2310]  _sine     move              #>sine_wave_table,r0        ; set register to base of sine table
                 000100
3618                                               ENDIF
3619      P:2209 44F400  [4 -     2314]            move              #>SINE_TABLE_SIZE-1,x0
                 0000FF
3620      P:220B 440600  [2 -     2316]            move              x0,x:x_tableMod             ; set mask to tablesize - 1
3621      P:220C 04C4A0  [2 -     2318]            move              x0,m0                       ; set modulus for waveform table
3622      P:220D 00000C  [4 -     2322]            rts
3623   
3624   
3625   
3626                                               IF      VARIABLE_GP
3627                                     ;***************************************************************************************
3628                                     ;  SUBROUTINE:  initializeWavetable
3629                                     ;
3630                                     ;  Initializes the glottal pulse wavetable according to the tnMin, tnMax, and tp
3631                                     ;  variables.
3632                                     ;
3633                                     ;  Input:       y:TN_MAX, y:TN_MIN, y:TP
3634                                     ;  Output:      gp_wave_table
3635                                     ;***************************************************************************************
3636   
3637                                     initializeWavetable
3638   
3639      P:220E 5EF000  [4 -     2326]            move                            y:TN_MAX,a    ; tnDelta = tnMax - tnMin
                 00004D
3640      P:2210 4CF000  [4 -     2330]            move                            y:TN_MIN,x0
                 00004C
3641      P:2212 47F444  [4 -     2334]            sub     x0,a      #>GP_TABLE_SIZE,y1
                 000100
3642      P:2214 567000  [4 -     2338]            move              a,x:x_tnDelta
                 000058
3643   
3644   
3645      P:2216 0AF0AB  [6 -     2344]            jmi     _negative                             ; div2 = rint(wavetableSize *
                 00221A
3646      P:2218 4CF000  [4 -     2348]            move                            y:TN_MAX,x0   ;   (tp + max(tnMin,tnMax))) - 1
                 00004D
3647                                     _negative
3648      P:221A 5EF000  [4 -     2352]            move                            y:TP,a
                 00004B
3649      P:221C 200040  [2 -     2354]            add     x0,a
3650      P:221D 21C400  [2 -     2356]            move              a,x0
3651      P:221E 46F4C1  [4 -     2360]            mpyr    x0,y1,a   #>gp_wave_table,y0
                 002400
3652      P:2220 4C9450  [2 -     2362]            add     y0,a                    y:y_one,x0
3653      P:2221 4DF044  [4 -     2366]            sub     x0,a                    y:TP,x1
                 00004B
3654      P:2223 567000  [4 -     2370]            move              a,x:x_div2
                 00005A
3655   
3656      P:2225 2000F9  [2 -     2372]            mpyr    x1,y1,b                               ; div1 = rint(wavetableSize * tp) - 1
3657      P:2226 200058  [2 -     2374]            add     y0,b
3658      P:2227 20004C  [2 -     2376]            sub     x0,b
3659      P:2228 577000  [4 -     2380]            move              b,x:x_div1
                 000059
3660   
3661      P:222A 21F300  [2 -     2382]            move              b,r3                        ; create rising part of table
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 52



3662      P:222B 20005C  [2 -     2384]            sub     y0,b                                  ; put div1 into r3
3663      P:222C 21E500  [2 -     2386]            move              b,x1                        ; tpLength = div1 - base
3664      P:222D 0BF080  [6 -     2392]            jsr     reciprocal                            ; y0 =  1/tpLength
                 002276
3665   
3666      P:222F 5E9500  [2 -     2394]            move                            y:y_unity,a   ; put 1.0 into top of curve
3667      P:2230 565300  [2 -     2396]            move              a,x:(r3)-
3668      P:2231 4F9400  [2 -     2398]            move                            y:y_one,y1
3669      P:2232 20007C  [2 -     2400]            sub     y1,b                                  ; decrement loop count by 1
3670   
3671      P:2233 06CF00  [6 -     2406]            do      b,_end_loop1                          ; this loop increments backwards
                 002242
3672      P:2235 0445BF  [2 -     2408]            movec             lc,x1                       ; put loop count into x1
3673      P:2236 2000E8  [2 -     2410]            mpy     x1,y0,b                               ; b = loopCount * 1/newTnLength
3674      P:2237 20003B  [2 -     2412]            lsl     b                                     ; put sign bit into b0
3675      P:2238 20002A  [2 -     2414]            asr     b
3676      P:2239 212400  [2 -     2416]            move              b0,x0                       ; put fractional part of product into x0
3677      P:223A 276081  [2 -     2418]            mpyr    x0,x0,a   #0.75,y1                    ; a = x^2
3678      P:223B 21C500  [2 -     2420]            move              a,x1
3679      P:223C 2000F0  [2 -     2422]            mpy     x1,y1,a                               ; a = 0.75 * x^2
3680      P:223D 2740A9  [2 -     2424]            mpyr    x0,x1,b   #0.5,y1                     ; b = x^3
3681      P:223E 21E500  [2 -     2426]            move              b,x1
3682      P:223F 2000F7  [2 -     2428]            macr    -x1,y1,a                              ; a *=  -(0.5 * x^3)
3683      P:2240 200032  [2 -     2430]            asl     a
3684      P:2241 200032  [2 -     2432]            asl     a                                     ; a *= 4
3685      P:2242 565313  [2 -     2434]            clr     a         a,x:(r3)-                   ; put value into the wavetable
3686                                     _end_loop1
3687   
3688      P:2243 566300  [2 -     2436]            move              a,x:(r3)                    ; put 0 into very 1st table entry
3689   
3690      P:2244 47F400  [4 -     2440]            move              #>GP_TABLE_SIZE,y1          ; create closed part of table (all zeros)
                 000100
3691      P:2246 57F400  [4 -     2444]            move              #>gp_wave_table,b
                 002400
3692      P:2248 45F078  [4 -     2448]            add     y1,b      x:x_div2,x1
                 00005A
3693      P:224A 20B36C  [2 -     2450]            sub     x1,b      x1,r3
3694   
3695      P:224B 06CF00  [6 -     2456]            do      b,_end_loop2
                 00224D
3696      P:224D 565B00  [2 -     2458]            move              a,x:(r3)+
3697                                     _end_loop2
3698   
3699      P:224E 0BF080  [6 -     2464]            jsr     updateWavetable                       ; create falling part of table
                 002251
3700                                                                                             ; according to current amplitude
3701      P:2250 00000C  [4 -     2468]            rts
3702   
3703   
3704   
3705                                     ;***************************************************************************************
3706                                     ;  SUBROUTINE:  updateWavetable
3707                                     ;
3708                                     ;  Updates the variable portion of the glottal pulse wavetable according to the voicing
3709                                     ;  amplitude.
3710                                     ;
3711                                     ;  Input:       y:TN_MAX, y:OSC_AMP
3712                                     ;  Output:      gp_wave_table
3713                                     ;***************************************************************************************
3714   
3715                                     updateWavetable
3716      P:2251 5EF000  [4 -     2472]            move                            y:TN_MAX,a
                 00004D
3717      P:2253 4F8200  [2 -     2474]            move                            y:OSC_AMP,y1
3718      P:2254 44F000  [4 -     2478]            move              x:x_tnDelta,x0              ; actualTnLength = tnMax - (OSC_AMP * tnDelta)
                 000058
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 53



3719      P:2256 46F4C7  [4 -     2482]            macr    -y1,x0,a  #>GP_TABLE_SIZE,y0
                 000100
3720   
3721      P:2258 21C400  [2 -     2484]            move              a,x0
3722      P:2259 4C94D1  [2 -     2486]            mpyr    x0,y0,a                 y:y_one,x0
3723      P:225A 47F044  [4 -     2490]            sub     x0,a      x:x_div1,y1
                 000059
3724      P:225C 218570  [2 -     2492]            add     y1,a      a1,x1                       ; newTnLength=rint(actualTnLength * tableSize)-
1
3725      P:225D 21D300  [2 -     2494]            move              a,r3
3726      P:225E 567000  [4 -     2498]            move              a,x:x_newDiv2               ; newDiv2 = newTnLength + div1
                 00005B
3727   
3728      P:2260 0BF080  [6 -     2504]            jsr     reciprocal                            ; y0 =  1/newTnLength
                 002276
3729   
3730      P:2262 06C500  [6 -     2510]            do      x1,_end_loop1                         ; this loop increments backwards
                 00226A
3731      P:2264 0445BF  [2 -     2512]            movec             lc,x1                       ; put loop count into x1
3732      P:2265 2000E8  [2 -     2514]            mpy     x1,y0,b                               ; b = loopCount * 1/newTnLength
3733      P:2266 20003B  [2 -     2516]            lsl     b                                     ; put sign bit into b0, and
3734      P:2267 5E952A  [2 -     2518]            asr     b                       y:y_unity,a   ; put 1.0 into a
3735      P:2268 212400  [2 -     2520]            move              b0,x0                       ; put fractional part of product into x0
3736      P:2269 200087  [2 -     2522]            macr    -x0,x0,a                              ; a -= x^2
3737      P:226A 565300  [2 -     2524]            move              a,x:(r3)-                   ; put value into the wavetable
3738                                     _end_loop1
3739   
3740                                     ; ZERO REST OF TABLE HERE---REMEMBER ERROR IN FIRST VALUE CALCULATED ABOVE
3741      P:226B 44F000  [4 -     2528]            move              x:x_newDiv2,x0
                 00005B
3742      P:226D 209300  [2 -     2530]            move              x0,r3                       ; move newDiv2 into r3
3743      P:226E 56F01B  [4 -     2534]            clr     b         x:x_div2,a
                 00005A
3744      P:2270 4D9444  [2 -     2536]            sub     x0,a                    y:y_one,x1
3745      P:2271 200060  [2 -     2538]            add     x1,a                                  ; a = div2 - newDiv2 + 1
3746   
3747      P:2272 06CE00  [6 -     2544]            do      a,_end_loop2
                 002274
3748      P:2274 575B00  [2 -     2546]            move              b,x:(r3)+
3749                                     _end_loop2
3750   
3751      P:2275 00000C  [4 -     2550]            rts
3752   
3753   
3754   
3755                                     ;***************************************************************************************
3756                                     ;  SUBROUTINE:  reciprocal
3757                                     ;
3758                                     ;  Calculates the positive reciprocal of the input.
3759                                     ;
3760                                     ;  Input:       x1 (divisor)
3761                                     ;  Output:      y0 (quotient)
3762                                     ;
3763                                     ;  overwrites a, y0
3764                                     ;  preserves x1
3765                                     ;***************************************************************************************
3766   
3767                                     reciprocal
3768      P:2276 5E9400  [2 -     2552]            move                            y:y_one,a     ; put dividend (1) into a1
3769      P:2277 00FEB9  [2 -     2554]            and     #$fe,ccr                              ; make sure carry bit is clear
3770      P:2278 0618A0  [4 -     2558]            rep     #$18                                  ; do division
3771      P:2279 018060  [2 -     2560]            div     x1,a
3772      P:227A 210600  [2 -     2562]            move              a0,y0                       ; put result into y0
3773      P:227B 00000C  [4 -     2566]            rts
3774   
3775                                               ENDIF
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 54



3776   
3777   
3778   
3779                                     ;***************************************************************************************
3780                                     ;  SUBROUTINE:  setFricationTaps
3781                                     ;
3782                                     ;  Sets the frication taps to according to frication position (x0) and amplitude (b).
3783                                     ;
3784                                     ;  Input:       x0 (FRICATION_POS), b (FRICATION_AMP)
3785                                     ;  Output:      y:y_tap0 to y:y_tap4
3786                                     ;***************************************************************************************
3787   
3788                                     setFricationTaps
3789      P:227C 639B13  [2 -     2568]            clr     a         x:tap_mem,r3                ; clear the tap memory
3790      P:227D 0608A0  [4 -     2572]            rep     #NUMBER_TAPS
3791      P:227E 5E5B00  [2 -     2574]            move                            a,y:(r3)+
3792   
3793      P:227F 46F400  [4 -     2578]            move              #>POSITION_SCALE,y0         ; move scaling factor into y0
                 000008
3794      P:2281 21E7D0  [2 -     2580]            mpy     x0,y0,a   b,y1                        ; mult. input by scaling factor
3795                                                                                             ; frication ampl. -> y1 (preserve!)
3796      P:2282 200033  [2 -     2582]            lsl     a                                     ; put sign bit into a0 and
3797      P:2283 5F9522  [2 -     2584]            asr     a                       y:y_unity,b   ; put 1.0 into b
3798   
3799      P:2284 210500  [2 -     2586]            move              a0,x1                       ; store complement (frac.) in x1
3800      P:2285 218600  [2 -     2588]            move              a1,y0                       ; put integer part into y0
3801      P:2286 569B6C  [2 -     2590]            sub     x1,b      x:tap_mem,a                 ; calculate remainder; tablebase -> a
3802      P:2287 21E450  [2 -     2592]            add     y0,a      b,x0                        ; add integer to tablebase; store
3803                                                                                             ; remainder; put frication ampl in y1
3804      P:2288 21D300  [2 -     2594]            move              a,r3                        ; put tap # into r3
3805      P:2289 2000C1  [2 -     2596]            mpyr    x0,y1,a                               ; calculate first tap
3806      P:228A 5E5BF9  [2 -     2598]            mpyr    x1,y1,b                 a,y:(r3)+     ; calculate second tap; store 1st tap
3807      P:228B 5F6300  [2 -     2600]            move                            b,y:(r3)      ; store 2nd tap
3808   
3809      P:228C 00000C  [4 -     2604]            rts
3810   
3811   
3812   
3813                                     ;***************************************************************************************
3814                                     ;  SUBROUTINE:  setMouthCoefficients
3815                                     ;
3816                                     ;  Calculates the mouth filter coefficients from the input mouth coefficient.
3817                                     ;
3818                                     ;  Input:       a
3819                                     ;  Output:      x:fa10, x:fb11, x:fa20, x:fa21, x:fb21
3820                                     ;***************************************************************************************
3821   
3822                                     setMouthCoefficients
3823      P:228D 560C00  [2 -     2606]            move              a,x:fa20                    ; a20 = coeff
3824      P:228E 4C9536  [2 -     2608]            neg     a                       y:y_unity,x0
3825      P:228F 560B00  [2 -     2610]            move              a,x:fb11                    ; b11 = -coeff
3826      P:2290 560D00  [2 -     2612]            move              a,x:fa21                    ; a21 = -coeff
3827      P:2291 560E40  [2 -     2614]            add     x0,a      a,x:fb21                    ; b21 = -coeff
3828      P:2292 560A00  [2 -     2616]            move              a,x:fa10                    ; a10 = 1.0 - coeff
3829   
3830      P:2293 00000C  [4 -     2620]            rts
3831   
3832   
3833   
3834                                     ;***************************************************************************************
3835                                     ;  SUBROUTINE:  setNoseCoefficients
3836                                     ;
3837                                     ;  Calculates the nose filter coefficients from the input nose coefficient.
3838                                     ;
3839                                     ;  Input:       a
3840                                     ;  Output:      x:nfa10, x:nfb11, x:nfa20, x:nfa21, x:nfb21
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 55



3841                                     ;***************************************************************************************
3842   
3843                                     setNoseCoefficients
3844      P:2294 561200  [2 -     2622]            move              a,x:nfa20                   ; a20 = coeff
3845      P:2295 4C9536  [2 -     2624]            neg     a                       y:y_unity,x0
3846      P:2296 561100  [2 -     2626]            move              a,x:nfb11                   ; b11 = -coeff
3847      P:2297 561300  [2 -     2628]            move              a,x:nfa21                   ; a21 = -coeff
3848      P:2298 561440  [2 -     2630]            add     x0,a      a,x:nfb21                   ; b21 = -coeff
3849      P:2299 561000  [2 -     2632]            move              a,x:nfa10                   ; a10 = 1.0 - coeff
3850      P:229A 00000C  [4 -     2636]            rts
3851   
3852   
3853   
3854                                     ;***************************************************************************************
3855                                     ;  SUBROUTINE:  setThroatCoefficients
3856                                     ;
3857                                     ;  Sets the throat filter coefficients from the input throat cutoff value (the cutoff
3858                                     ;  frequency divided by the sample rate, i.e. a value from 0 to 0.5).  These
3859                                     ;  coefficients assume addition in the difference equation:
3860                                     ;       y[n] = (ta0 * input) + (tb1 * y[n-1])
3861                                     ;
3862                                     ;  Input:       a
3863                                     ;  Output:      y:ta0, y:tb1
3864                                     ;***************************************************************************************
3865   
3866                                     setThroatCoefficients
3867      P:229B 4D9532  [2 -     2638]            asl     a                       y:y_unity,x1  ; a *= 2              1 -> x1
3868      P:229C 5E7036  [4 -     2642]            neg     a                       a,y:ta0       ; a *= -1             ta0 = cutoff * 2
                 000052
3869      P:229E 200060  [2 -     2644]            add     x1,a                                  ; a = -(cutoff * 2) + 1
3870      P:229F 5E0D00  [2 -     2646]            move                            a,y:tb1       ; tb1 = 1 - (cutoff * 2)
3871      P:22A0 00000C  [4 -     2650]            rts
3872   
3873   
3874   
3875                                     ;***************************************************************************************
3876                                     ;  SUBROUTINE:   dataEmpty
3877                                     ;
3878                                     ;  Empties the sample rate conversion (SRC) buffer while doing the sample rate
3879                                     ;  conversion.
3880                                     ;
3881                                     ;  Input:       src_buffer_base
3882                                     ;  Output:      dma_out_buffer
3883                                     ;***************************************************************************************
3884   
3885                                     dataEmpty
3886   
3887                                     ;  CALCULATE AND STORE endPtr
3888      P:22A1 044514  [4 -     2654]            lua     (r5)-n5,r4
3889      P:22A2 6C7000  [4 -     2658]            move                            r4,y:endPtr
                 00004E
3890   
3891                                     ;  index = emptyPtr
3892      P:22A4 22F100  [2 -     2660]            move              r7,r1
3893   
3894                                     ;  GET CURRENT VALUE OF THE TIME REGISTER       
3895      P:22A5 499C00  [2 -     2662]            move              l:l_timeReg,b
3896   
3897                                     ;  CONVERSION LOOP 
3898      P:22A6 47963E  [2 -     2664]  _topCL    neg     b         x:mask_l,y1                 ; complement timeReg.  L_MASK->y1
3899      P:22A7 56987E  [2 -     2666]            and     y1,b      x:fbase_addr,a              ; mask out N part      filter base->a
3900      P:22A8 21A53B  [2 -     2668]            lsl     b         b1,x1                       ; put sign bit in b0   L part->x1
3901      P:22A9 479760  [2 -     2670]            add     x1,a      x:base_diff,y1              ; a += L part         delta filt base diff->y1
3902      P:22AA 21D370  [2 -     2672]            add     y1,a      a,r3                        ; a += base diff       a->r3
3903      P:22AB 21D42A  [2 -     2674]            asr     b         a,r4                        ; put sign bit in b0   a->r4
3904      P:22AC 212400  [2 -     2676]            move              b0,x0                       ; interpolation->x0
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer.asm  Page 56



3905   
3906                                               IF      MSOUND
3909                                               ENDIF
3910                                               IF      BLACK                                 ; works since ext. x == y
3911      P:22AD DC8B13  [2 -     2678]            clr     a         x:(r3)+n3,b   y:(r4)+n4,y0  ; get filter data & delta data
3912                                               ENDIF
3913   
3914      P:22AE 061980  [6 -     2684]            do      #PADSIZE-1,_endloop                   ; do convolution
                 0022B2
3915      P:22B0 45D9DB  [2 -     2686]            macr    x0,y0,b   x:(r1)+,x1                  ; b += interpolation * delta   x[n]->x1
3916      P:22B1 1F8B00  [2 -     2688]            move              b,y1          x:(r3)+n3,b   ; b->y1                             filter valu
e->b
3917      P:22B2 46CCF2  [2 -     2690]            mac     x1,y1,a   x:(r4)+n4,y0                ; a += x[n] * (filt + (int. * delta))
3918                                     _endloop
3919   
3920   
3921                                     ;***************************************************************************************
3922                                     ;  ROUTINE:     write_sample_stereo
3923                                     ;
3924                                     ;  Takes the input sample, and either creates a pseudo-mono signal by writing that
3925                                     ;  sample (scaled by 0.5) to both the left and right channels, or creates a
3926                                     ;  stereo signal by writing the left and right channels according the the balance
3927                                     ;  control (left and right channel scaling factors).  If the output buffer is full,
3928                                     ;  it is written to the host (and thus the DAC).
3929                                     ;
3930                                     ;  Input:       a
3931                                     ;  Output:      none
3932                                     ;***************************************************************************************
3933   
3934      P:22B3 10F000  [4 -     2694]            move              a,x0          y:BALANCE_L,y0 ; signal in x0, L scaling -> y0
                 000018
3935      P:22B5 4F97D0  [2 -     2696]            mpy     x0,y0,a                 y:BALANCE_R,y1 ; scale L channel, R scaling -> y1
3936      P:22B6 5E5EC8  [2 -     2698]            mpy     x0,y1,b                 a,y:(r6)+     ; scale R channel, L value -> dma buffer
3937      P:22B7 5F5E00  [2 -     2700]            move                            b,y:(r6)+     ; R value -> dma buffer
3938   
3939      P:22B8 449500  [2 -     2702]            move              x:dma_fill_base,x0          ; put buffer base in x0
3940      P:22B9 22CE00  [2 -     2704]            move              r6,a                        ; put current index in a
3941      P:22BA 200045  [2 -     2706]            cmp     x0,a                                  ; if (current index==buffer base)
3942      P:22BB 0FA1E5  [4 -     2710]            jseq    write_DMA_buffer                      ; then the buffer is full, so write it out
3943   
3944   
3945   
3946                                     ;***************************************************************************************
3947                                     ;  SUBROUTINE:   dataEmpty (2nd part)
3948                                     ;***************************************************************************************
3949   
3950                                     ;  UPDATE TIME REGISTER
3951      P:22BC 489C00  [2 -     2712]            move              l:l_timeReg,a               ; timeRegister->a
3952      P:22BD 499D00  [2 -     2714]            move              l:l_timeRegInc,b            ; timeRegisterIncrement->b
3953      P:22BE 260210  [2 -     2716]            add     b,a       #N_SCALE,y0                 ; a += increment    N_SCALE->y0
3954      P:22BF 11F009  [4 -     2720]            tfr     a,b       a,x0          y:endPtr,y1   ; a->b   a->x0            endPtr->y1
                 00004E
3955      P:22C1 4596D0  [2 -     2722]            mpy     x0,y0,a   x:mask_l,x1                 ; a = N part       L_MASK->x1
3956      P:22C2 21DF6E  [2 -     2724]            and     x1,b      a,n7                        ; clear out N part  N part->n7
3957      P:22C3 491C00  [2 -     2726]            move              b,l:l_timeReg               ; store timeRegister
3958      P:22C4 204F00  [2 -     2728]            move              (r7)+n7                     ; emptyPtr += nValue(timeRegister)
3959   
3960                                     ;  LOOP TEST
3961      P:22C5 22EE00  [2 -     2730]            move              r7,a                        ; emptyPtr->a
3962      P:22C6 22F175  [2 -     2732]            cmp     y1,a      r7,r1                       ; index = emptyPtr
3963      P:22C7 0AF0A2  [6 -     2738]            jne     _topCL                                ; if (emptyPtr < endPtr) loop again
                 0022A6
3964   
3965      P:22C9 00000C  [4 -     2742]            rts
0    Errors
0    Warnings
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer_black.asm  Page 57





































































Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer_black.asm  Page 58



                         Memory Utilization Report


X Memory

Start    End     Length    Type      Label             Section           Overlay Address
0000     0000        1     DATA      x_STATUS_flags
0001     0001        1     DATA      x_ngs_signal
0002     0002        1     DATA      x_lpn_signal
0003     0003        1     DATA      x_FIR_mod
0004     0004        1     DATA      FIR_x_ptr
0005     0005        1     DATA      FIR_y_ptr
0006     0006        1     DATA      x_tableMod
0007     0007        1     DATA      ALPHA
0008     0008        1     DATA      BETA
0009     0009        1     DATA      GAMMA
000A     000A        1     DATA      fa10
000B     000B        1     DATA      fb11
000C     000C        1     DATA      fa20
000D     000D        1     DATA      fa21
000E     000E        1     DATA      fb21
000F     000F        1     DATA      x_temp2
0010     0010        1     DATA      nfa10
0011     0011        1     DATA      nfb11
0012     0012        1     DATA      nfa20
0013     0013        1     DATA      nfa21
0014     0014        1     DATA      nfb21
0015     0015        1     DATA      dma_fill_base
0016     0016        1     CONST     mask_l
0017     0017        1     CONST     base_diff
0018     0018        1     CONST     fbase_addr
0019     0019        1     DATA      vtScale
001A     001A        1     CONST     coeff_mem
001B     001B        1     CONST     tap_mem
001C     001F        4     UNUSED
0020     0020        1     DATA      S1_TA
0021     0021        1     DATA      S1_BA
0022     0022        1     DATA      S2_TA
0023     0023        1     DATA      S2_BA
0024     0024        1     DATA      S3_TA
0025     0025        1     DATA      S3_BA
0026     0026        1     DATA      S4_TA
0027     0027        1     DATA      S4_BA
0028     0028        1     DATA      S5_TA
0029     0029        1     DATA      S5_BA
002A     002A        1     DATA      S6_TA
002B     002B        1     DATA      S6_BA
002C     002C        1     DATA      S7_TA
002D     002D        1     DATA      S7_BA
002E     002E        1     DATA      S8_TA
002F     002F        1     DATA      S8_BA
0030     0030        1     DATA      S9_TA
0031     0031        1     DATA      S9_BA
0032     0032        1     DATA      S10_TA
0033     0033        1     DATA      S10_BA
0034     0034        1     DATA      N1_TA
0035     0035        1     DATA      N1_BA
0036     0036        1     DATA      N2_TA
0037     0037        1     DATA      N2_BA
0038     0038        1     DATA      N3_TA
0039     0039        1     DATA      N3_BA
003A     003A        1     DATA      N4_TA
003B     003B        1     DATA      N4_BA
003C     003C        1     DATA      N5_TA
003D     003D        1     DATA      N5_BA
003E     003E        1     DATA      N6_TA
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer_black.asm  Page 59



003F     003F        1     DATA      N6_BA
0040     0040        1     DATA      OPC_1
0041     0041        1     DATA      OPC_2
0042     0042        1     DATA      OPC_3
0043     0043        1     DATA      ALPHA_L
0044     0044        1     DATA      ALPHA_R
0045     0045        1     DATA      ALPHA_T
0046     0046        1     DATA      OPC_4
0047     0047        1     DATA      OPC_5
0048     0048        1     DATA      OPC_6
0049     0049        1     DATA      OPC_7
004A     004A        1     DATA      OPC_REFL
004B     004B        1     DATA      OPC_RAD
004C     004C        1     DATA      NC_1
004D     004D        1     DATA      NC_2
004E     004E        1     DATA      NC_3
004F     004F        1     DATA      NC_4
0050     0050        1     DATA      NC_5
0051     0051        1     DATA      NC_REFL
0052     0052        1     DATA      NC_RAD
0053     0053        1     DATA      dma_empty_base
0054     0054        1     DATA      x_x0_save
0055     0055        1     DATA      x_r3_save
0056     0056        1     DATA      x_r4_save
0057     0057        1     DATA      x_r5_save
0058     0058        1     DATA      x_tnDelta
0059     0059        1     DATA      x_div1
005A     005A        1     DATA      x_div2
005B     005B        1     DATA      x_newDiv2
005C     005C        1     DATA      x_temp
005D     005D        1     DATA      x_tableCount
005E     005E        1     DATA      readPtr
005F     005F        1     DATA      x_FIR_size
0060     007F       32     UNUSED
0080     00BC       61     CONST 
00BD     23BF     8963     UNUSED
23C0     23FF       64     DATA      l_betaTable
2400     24FF      256     MOD       gp_wave_table
2500     2B7F     1664     DATA      filter_base
2B80     31FF     1664     DATA      filter_d_base
3200     33FF      512     MOD       src_buffer_base
3400     37FF     1024     MOD       dma_out_buffer
3800     3FFF     2048     MOD       dma_in_buffer
4000     FFFF    49152     UNUSED


Y Memory

Start    End     Length    Type      Label             Section           Overlay Address
0000     0000        1     DATA      DAMPING
0001     0001        1     DATA      PULSE_MODULATION
0002     0002        1     DATA      OSC_AMP
0003     0003        1     DATA      OSC_AMP_DELTA
0004     0004        1     DATA      ANTI_BREATHINESS
0005     0005        1     DATA      y_bp_xn1
0006     0006        1     DATA      y_bp_xn2
0007     0007        1     DATA      y_bp_yn1
0008     0008        1     DATA      y_bp_yn2
0009     0009        1     DATA      mRadiationX
000A     000A        1     DATA      mRadiationY
000B     000B        1     DATA      nRadiationX
000C     000C        1     DATA      nRadiationY
000D     000D        1     DATA      tb1
000E     000E        1     DATA      throatY
000F     000F        1     DATA      throatGain
0010     0010        1     DATA      cr_count
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer_black.asm  Page 60



0011     0011        1     DATA      left_shift
0012     0012        1     CONST     y_seed
0013     0013        1     CONST     y_factor
0014     0014        1     CONST     y_one
0015     0015        1     CONST     y_unity
0016     0016        1     CONST     y_max
0017     0017        1     DATA      BALANCE_R
0018     0018        1     DATA      BALANCE_L
0019     0019        1     DATA      crossmix
001A     001A        1     DATA      anti_crossmix
001B     001B        1     CONST     delta_mem
001C     001F        4     UNUSED
0020     0020        1     DATA      S1_TB
0021     0021        1     DATA      S1_BB
0022     0022        1     DATA      S2_TB
0023     0023        1     DATA      S2_BB
0024     0024        1     DATA      S3_TB
0025     0025        1     DATA      S3_BB
0026     0026        1     DATA      S4_TB
0027     0027        1     DATA      S4_BB
0028     0028        1     DATA      S5_TB
0029     0029        1     DATA      S5_BB
002A     002A        1     DATA      S6_TB
002B     002B        1     DATA      S6_BB
002C     002C        1     DATA      S7_TB
002D     002D        1     DATA      S7_BB
002E     002E        1     DATA      S8_TB
002F     002F        1     DATA      S8_BB
0030     0030        1     DATA      S9_TB
0031     0031        1     DATA      S9_BB
0032     0032        1     DATA      S10_TB
0033     0033        1     DATA      S10_BB
0034     0034        1     DATA      N1_TB
0035     0035        1     DATA      N1_BB
0036     0036        1     DATA      N2_TB
0037     0037        1     DATA      N2_BB
0038     0038        1     DATA      N3_TB
0039     0039        1     DATA      N3_BB
003A     003A        1     DATA      N4_TB
003B     003B        1     DATA      N4_BB
003C     003C        1     DATA      N5_TB
003D     003D        1     DATA      N5_BB
003E     003E        1     DATA      N6_TB
003F     003F        1     DATA      N6_BB
0040     0040        1     DATA      y_tap0
0041     0041        1     DATA      y_tap1
0042     0042        1     DATA      y_tap2
0043     0043        1     DATA      y_tap3
0044     0044        1     DATA      y_tap4
0045     0045        1     DATA      y_tap5
0046     0046        1     DATA      y_tap6
0047     0047        1     DATA      y_tap7
0048     0048        1     DATA      y_tapGuard
0049     0049        1     DATA      BREATHINESS
004A     004A        1     DATA      CROSSMIX_FACTOR
004B     004B        1     DATA      TP
004C     004C        1     DATA      TN_MIN
004D     004D        1     DATA      TN_MAX
004E     004E        1     DATA      endPtr
004F     004F        1     DATA      CONTROL_PERIOD
0050     0050        1     DATA      CONTROL_FACTOR
0051     0051        1     DATA      ASP_AMP
0052     0052        1     DATA      ta0
0053     0053        1     DATA      OPC_1_DELTA
0054     0054        1     DATA      OPC_2_DELTA
0055     0055        1     DATA      OPC_3_DELTA
Motorola DSP56000 Macro Cross Assembler  Version 3.02  95-04-20  11:35:55  synthesizer_black.asm  Page 61



0056     0056        1     DATA      ALPHA_L_DELTA
0057     0057        1     DATA      ALPHA_R_DELTA
0058     0058        1     DATA      ALPHA_T_DELTA
0059     0059        1     DATA      OPC_4_DELTA
005A     005A        1     DATA      OPC_5_DELTA
005B     005B        1     DATA      OPC_6_DELTA
005C     005C        1     DATA      OPC_7_DELTA
005D     005D        1     DATA      OPC_REFL_DELTA
005E     005E        1     DATA      OPC_RAD_DELTA
005F     005F        1     DATA      NC_1_DELTA
0060     007F       32     UNUSED
0080     00BC       61     CONST 
00BD     00BF        3     UNUSED
00C0     00FF       64     CONST 
0100     01FF      256     MOD       sine_wave_table
0200     FFFF    65024     UNUSED


L Memory

Start    End     Length    Type      Label             Section           Overlay Address
0000     001B       28     UNUSED
001C     001C        1     DATA      l_timeReg
001D     001D        1     DATA      l_timeRegInc
001E     001E        1     DATA      l_phaseInc
001F     001F        1     DATA      l_currentPhase
0020     00BE      159     UNUSED
00BF     00BF        1     DATA      l_a_save
00C0     00FF       64     MOD       l_FIR_base
0100     FFFF    65280     UNUSED


P Memory

Start    End     Length    Type      Label             Section           Overlay Address
0000     0001        2     CODE  
0002     0021       32     UNUSED
0022     0023        2     CODE  
0024     0025        2     CODE  
0026     0027        2     UNUSED
0028     0029        2     CODE  
002A     002B        2     UNUSED
002C     002D        2     CODE  
002E     002F        2     CODE  
0030     0031        2     CODE  
0032     0033        2     CODE  
0034     0035        2     CODE  
0036     0037        2     CODE  
0038     0039        2     CODE  
003A     01FA      449     CODE      main
01FB     1FFF     7685     UNUSED
2000     22C9      714     CODE      reset
22CA     FFFF    56630     UNUSED













